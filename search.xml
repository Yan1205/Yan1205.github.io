<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深度学习</title>
      <link href="/2023/09/19/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/09/19/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、框架"><a href="#一、框架" class="headerlink" title="一、框架"></a>一、框架</h1><h2 id="一-快速获得API-以Dataset为例"><a href="#一-快速获得API-以Dataset为例" class="headerlink" title="(一)快速获得API(#以Dataset为例)"></a>(一)快速获得API(#以Dataset为例)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span>(Dataset)</span><br><span class="line">Dataset??</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Matlab基础</title>
      <link href="/2023/08/28/Matlab%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/08/28/Matlab%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="一、变量-amp-运算"><a href="#一、变量-amp-运算" class="headerlink" title="一、变量&amp;运算"></a>一、变量&amp;运算</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">% 加*为了解内容</span></span><br><span class="line"><span class="comment">% 生成矩阵</span></span><br><span class="line">    <span class="comment">% 直接法</span></span><br><span class="line">        a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line">    <span class="comment">% 冒号一维矩阵 a = 开始：步长：结束，步长为1可省略</span></span><br><span class="line">        b = <span class="number">1</span>:<span class="number">1</span>:<span class="number">10</span>;  <span class="comment">% 1,2,...10</span></span><br><span class="line">        b = <span class="number">1</span>:<span class="number">10</span>;  <span class="comment">%与上一个等价</span></span><br><span class="line">    <span class="comment">% 函数生成</span></span><br><span class="line">        <span class="comment">% linspace(开始，结束，元素个数)，等差生成指定元素数的一维矩阵，省略个数则生成100个</span></span><br><span class="line">            c = <span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">10</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="comment">% 特殊矩阵</span></span><br><span class="line">            e = <span class="built_in">eye</span>(<span class="number">4</span>);  <span class="comment">% eye(维数)单位阵</span></span><br><span class="line">            z = <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">4</span>);  <span class="comment">% zeros(维数)全零阵</span></span><br><span class="line">            o = <span class="built_in">ones</span>(<span class="number">4</span>,<span class="number">1</span>);  <span class="comment">% ones(维数)全1阵</span></span><br><span class="line">            r = <span class="built_in">rand</span>(<span class="number">4</span>);  <span class="comment">% rand(维数)0~1分布随机阵</span></span><br><span class="line">            rn = <span class="built_in">randn</span>(<span class="number">4</span>);  <span class="comment">% randn(维数)0均值Gaussian分布随机阵</span></span><br><span class="line">                       </span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">% 矩阵运算</span></span><br><span class="line">    diag_a = <span class="built_in">diag</span>(a,<span class="number">1</span>);  <span class="comment">% diag(行向量，主对角线上方第k条斜线)用行向量生成对角阵</span></span><br><span class="line">    tril_a = <span class="built_in">tril</span>(a,<span class="number">1</span>);  <span class="comment">% tril(矩阵，主对角线上方第k条斜线)生成矩阵的下三角阵，triu上三角阵</span></span><br><span class="line">    <span class="comment">% 加、减、乘、乘方</span></span><br><span class="line">        a*a</span><br><span class="line">    <span class="comment">% 点运算</span></span><br><span class="line">        <span class="comment">% a.*b , a./b , a.\b , a.^b  对应元素的*,/,\,^运算</span></span><br><span class="line">        a.*a</span><br><span class="line">    <span class="comment">% 逆矩阵</span></span><br><span class="line">        pinv(a)  <span class="comment">% 伪逆矩阵，当a不是方阵，求广义逆矩阵；当a是可逆方阵，结果与逆矩阵相同</span></span><br><span class="line">    <span class="comment">% 特征值，特征向量</span></span><br><span class="line">        [v,D] = eig(a);  <span class="comment">% 输出v为特征向量，D为特征值对角阵</span></span><br><span class="line">    <span class="comment">% *行列式</span></span><br><span class="line">        det(a)</span><br><span class="line">    <span class="comment">% *秩</span></span><br><span class="line">        rank(a)</span><br><span class="line">    <span class="comment">% *伴随</span></span><br><span class="line">        <span class="built_in">compan</span>(b)</span><br><span class="line">        </span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">% 矩阵的修改</span></span><br><span class="line">    <span class="comment">%部分替换</span></span><br><span class="line">        chg_a = a;</span><br><span class="line">        chg_a(<span class="number">2</span>,<span class="number">3</span>) = <span class="number">4</span>;  <span class="comment">% (行，列)元素替换</span></span><br><span class="line">        chg_a(<span class="number">1</span>,:) = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>];  <span class="comment">% (行,:)替换行，为[]删除该行</span></span><br><span class="line">        chg_a(:,<span class="number">1</span>) = [];  <span class="comment">% (:,列)替换列，为[]删除该列</span></span><br><span class="line">    <span class="comment">% 转置</span></span><br><span class="line">        T_a = a&#x27;;</span><br><span class="line">    <span class="comment">% 指定维数拼接</span></span><br><span class="line">        c1_a = <span class="built_in">cat</span>(<span class="number">1</span>,a,a);  <span class="comment">% 垂直拼接</span></span><br><span class="line">        c2_a = <span class="built_in">cat</span>(<span class="number">2</span>,a,a);  <span class="comment">% 水平拼接</span></span><br><span class="line">    <span class="comment">% *变维</span></span><br><span class="line">        rs_a = <span class="built_in">reshape</span>(a,<span class="number">1</span>,<span class="number">9</span>);  <span class="comment">% 元素个数不变，矩阵变为m*n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">% 信息获取</span></span><br><span class="line">    <span class="comment">% 矩阵的行列数</span></span><br><span class="line">        [row_a, col_a] = <span class="built_in">size</span>(a);  <span class="comment">% [行数，列数]</span></span><br><span class="line">    <span class="comment">% 行列中最大的</span></span><br><span class="line">        len_a = <span class="built_in">length</span>(a);</span><br><span class="line">        </span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">% 多维数组</span></span><br><span class="line">    <span class="comment">% 创建</span></span><br><span class="line">        <span class="comment">% 直接法</span></span><br><span class="line">            mul_1(:,:,<span class="number">1</span>) = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">            mul_1(:,:,<span class="number">2</span>) = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">        <span class="comment">% *扩展法</span></span><br><span class="line">            mul_2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">            mul_2(:,:,<span class="number">2</span>) = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];  <span class="comment">% 若不赋值第一页，第一页全为0</span></span><br><span class="line">        <span class="comment">% cat法</span></span><br><span class="line">            mul_31 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">            mul_32 = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">            mul_3 = <span class="built_in">cat</span>(<span class="number">3</span>,mul_31,mul_32);  <span class="comment">% 把a1a2按照“3”维连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">% *字符串</span></span><br><span class="line">    <span class="comment">% 创建</span></span><br><span class="line">        str0 = <span class="string">&#x27;hello world&#x27;</span>;  <span class="comment">% 单引号引起</span></span><br><span class="line">        str1 = <span class="string">&#x27;I&#x27;&#x27;m a student&#x27;</span>;  <span class="comment">% 字符串中单引号写两遍</span></span><br><span class="line">        str3 = [<span class="string">&#x27;I&#x27;&#x27;m&#x27;</span> <span class="string">&#x27;a&#x27;</span> <span class="string">&#x27;student&#x27;</span>];  <span class="comment">% 方括号链接多字符串</span></span><br><span class="line">        str4 = strcat(str0, str1);  <span class="comment">% strcat连接字符串函数</span></span><br><span class="line">        str5 = strvcat(str0, str1);  <span class="comment">% strvcat连接产生多行字符串</span></span><br><span class="line">        str6 = double(str0);  <span class="comment">% 取str0的ASCII值，也可用abs函数</span></span><br><span class="line">        str7 = char(str6);  <span class="comment">% 把ASCII转为字符串</span></span><br><span class="line">    <span class="comment">% 操作</span></span><br><span class="line">        <span class="comment">% 比较</span></span><br><span class="line">            strcmp(str0, str1);  <span class="comment">% 相等为1，不等为0</span></span><br><span class="line">            strncmp(str0, str1, <span class="number">3</span>);  <span class="comment">% 比较前3个是否相等(n)</span></span><br><span class="line">            strcmpi(str0, str1);  <span class="comment">% 忽略大小写比较(i)</span></span><br><span class="line">            strncmpi(str0, str1, <span class="number">3</span>);  <span class="comment">% 忽略大小写比较前3个是否相等</span></span><br><span class="line">        <span class="comment">% 查找替换</span></span><br><span class="line">            strfind(str0, str1);  <span class="comment">% 在str0找到str1的位置</span></span><br><span class="line">            strmatch(str1, str0);  <span class="comment">% 在str0字符串数组中找到str1开头的行数</span></span><br><span class="line">            strtok(str0);  <span class="comment">% 截取str0第一个分隔符（空格，tab，回车）前的部分</span></span><br><span class="line">            strrep(str0, str1, str2);  <span class="comment">% 在str0中用str2替换str1</span></span><br><span class="line">        <span class="comment">% 其他</span></span><br><span class="line">            upper(str0);  <span class="comment">% 转大写，lower转小写</span></span><br><span class="line">            strjust(str0, <span class="string">&#x27;right&#x27;</span>);  <span class="comment">% 将str0右对齐，left左对齐，center中间对齐</span></span><br><span class="line">            strtrim(str0);  <span class="comment">% 删除str0开头结尾空格</span></span><br><span class="line">            eval(str0);  <span class="comment">% 将str0作为代码执行</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%转换</span></span><br><span class="line">    <span class="comment">% ___2___  --&gt;  如num2str，将数字转字符串； dec2hex，将十进制转十六进制</span></span><br><span class="line">    str_b = num2str(b);</span><br><span class="line">    <span class="comment">% abs，double取ASCII码；char把ASCII转字符串</span></span><br><span class="line">    abs_str = <span class="built_in">abs</span>(<span class="string">&#x27;aAaA&#x27;</span>);  </span><br><span class="line"></span><br><span class="line">第<span class="number">4</span>部分：多项式</span><br><span class="line"></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%多项式</span></span><br><span class="line">    <span class="comment">%创建</span></span><br><span class="line">        p = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];  <span class="comment">% 系数向量，按x降幂排列，最右边是常数</span></span><br><span class="line">        f1 = poly2str(p, <span class="string">&#x27;x&#x27;</span>);  <span class="comment">% 生成好看的字符串 f1 = x^3 + 2 x^2 + 3 x + 4，不被认可的运算式</span></span><br><span class="line">        f2 = poly2sym(p);  <span class="comment">% 生成可用的符号函数 f2 = x^3 + 2*x^2 + 3*x + 4</span></span><br><span class="line">    <span class="comment">%求值</span></span><br><span class="line">        x = <span class="number">4</span>;</span><br><span class="line">        y1 = polyval(p, x);  <span class="comment">% 代入求值；若x1为矩阵，则对每个值单独求值</span></span><br><span class="line">    <span class="comment">%求根</span></span><br><span class="line">        r = roots(p); <span class="comment">% p同上，由系数求根，结果为根植矩阵</span></span><br><span class="line">        p0 = poly(r);  <span class="comment">% 由根求系数，结果为系数矩阵</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%数据插值</span></span><br><span class="line">    <span class="comment">%一维插值</span></span><br><span class="line">        <span class="comment">%yi = interp1(X, Y, xi, &#x27;method&#x27;)</span></span><br><span class="line">        X = [<span class="number">-3</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line">        Y = [<span class="number">9</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>];  <span class="comment">% XY为已知点横纵坐标向量</span></span><br><span class="line">        y2 = interp1(X, Y, <span class="number">2</span>);  <span class="comment">% 差值预估在x=2的y的值，x不能超过已知范围(此处x&lt;3)</span></span><br><span class="line">        y2m = interp1(X, Y, <span class="number">2</span>, <span class="string">&#x27;spline&#x27;</span>);  <span class="comment">% 用spline方法(三次样条)差值预估在x=2的y的值</span></span><br><span class="line">    <span class="comment">%二维插值</span></span><br><span class="line">        <span class="comment">%zi = interp1(X, Y, Z, xi, yi, &#x27;method&#x27;)</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">%%</span></span><br><span class="line">X = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>];</span><br><span class="line">A = [<span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>; <span class="number">9</span>, <span class="number">5</span>, <span class="number">3</span>; <span class="number">8</span>, <span class="number">4</span> ,<span class="number">6</span>];</span><br><span class="line">B = [<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>; <span class="number">9</span>, <span class="number">5</span>, <span class="number">3</span>; <span class="number">8</span>, <span class="number">4</span> ,<span class="number">6</span>];</span><br><span class="line"><span class="comment">%数据统计</span></span><br><span class="line">    <span class="comment">%矩阵最大最小值</span></span><br><span class="line">        y = <span class="built_in">max</span>(X);  <span class="comment">% 求矩阵X的最大值，min最小值</span></span><br><span class="line">        [y, k] = <span class="built_in">max</span>(X);  <span class="comment">% 求最大值，k为该值的角标</span></span><br><span class="line">        [y, k] = <span class="built_in">max</span>(A, [], <span class="number">2</span>);  <span class="comment">% A是矩阵，&#x27;2&#x27;时返回y每一行最大元素构成的列向量，k元素所在列；&#x27;1&#x27;时与上述相同</span></span><br><span class="line">    <span class="comment">%均值和中值</span></span><br><span class="line">        y = <span class="built_in">mean</span>(X);  <span class="comment">% 均值</span></span><br><span class="line">        y = median(X);  <span class="comment">% 中值</span></span><br><span class="line">        y = <span class="built_in">mean</span>(A, <span class="number">2</span>);  <span class="comment">% &#x27;2&#x27;时返回y每一行均值构成的列向量；&#x27;1&#x27;时与上述相同</span></span><br><span class="line">        y = median(A, <span class="number">2</span>);  <span class="comment">% &#x27;2&#x27;时返回y每一行中值构成的列向量；&#x27;1&#x27;时与上述相同</span></span><br><span class="line">    <span class="comment">%排序</span></span><br><span class="line">        Y = <span class="built_in">sort</span>(A, <span class="number">1</span>, <span class="string">&#x27;ascend&#x27;</span>);  <span class="comment">% sort(矩阵, dim, &#x27;method&#x27;)dim为1按列排序，2按行排序；ascend升序，descend降序</span></span><br><span class="line">        [Y, I] = <span class="built_in">sort</span>(A, <span class="number">1</span>, <span class="string">&#x27;ascend&#x27;</span>);  <span class="comment">% I保留了元素之前在A的位置</span></span><br><span class="line">    <span class="comment">%求和求积累加累乘</span></span><br><span class="line">        y = sum(X);  <span class="comment">% 求和</span></span><br><span class="line">        y = prod(X);  <span class="comment">% 求积</span></span><br><span class="line">        y = cumsum(X);  <span class="comment">% 累加</span></span><br><span class="line">        y = cumprod(X);  <span class="comment">% 累乘</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%*数值计算</span></span><br><span class="line">    <span class="comment">%最(极)值</span></span><br><span class="line">        <span class="comment">%多元函数在给定初值附近找最小值点</span></span><br><span class="line">        x = fminsearch(fun, x0);</span><br><span class="line">    <span class="comment">%函数零点</span></span><br><span class="line">        x = fzero(fun, x0);  <span class="comment">% 在给定初值x0附近找零点</span></span><br></pre></td></tr></table></figure><h1 id="二、程序结构"><a href="#二、程序结构" class="headerlink" title=".二、程序结构"></a>.二、程序结构</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%%</span></span><br><span class="line">a = <span class="number">5</span>;</span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>]; y =[<span class="number">3</span>, <span class="number">4</span>];</span><br></pre></td></tr></table></figure><h2 id="1-选择结构"><a href="#1-选择结构" class="headerlink" title="1. 选择结构"></a>1. 选择结构</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%if-elseif-else-end</span></span><br><span class="line">        <span class="keyword">if</span> a&gt;<span class="number">0</span></span><br><span class="line">            <span class="built_in">disp</span>(x);</span><br><span class="line">        <span class="keyword">elseif</span> a==<span class="number">0</span></span><br><span class="line">            <span class="built_in">disp</span>(a);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">disp</span>(a<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">%switch-case-otherwise-end</span></span><br><span class="line">        <span class="keyword">switch</span> a</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span></span><br><span class="line">                <span class="built_in">disp</span>(a);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span></span><br><span class="line">                <span class="built_in">disp</span>(a+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">otherwise</span></span><br><span class="line">                <span class="built_in">disp</span>(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">%try-catch</span></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">            z = x*y;</span><br><span class="line">        <span class="keyword">catch</span></span><br><span class="line">            z = x.*y;  <span class="comment">% 若try出错，则执行</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="built_in">disp</span>(z);</span><br></pre></td></tr></table></figure><h2 id="2-循环结构"><a href="#2-循环结构" class="headerlink" title="2.循环结构"></a>2.循环结构</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">% 循环结构</span></span><br><span class="line"><span class="comment">% for 循环变量=初值:步长:终值 - end</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">0</span>:<span class="number">1</span>:<span class="number">10</span>  <span class="comment">% 步长为负，则初值大于终值</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="built_in">i</span>);  <span class="comment">% 循环体内不可对循环变量做修改</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">% while-end</span></span><br><span class="line">    <span class="keyword">while</span> a&gt;<span class="number">2</span></span><br><span class="line">        <span class="built_in">disp</span>(a);</span><br><span class="line">        a = a<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%程序控制</span></span><br><span class="line">    <span class="comment">%continue 跳过当次循环剩下语句，进入下一循环</span></span><br><span class="line">    <span class="comment">%break 跳出当前循环</span></span><br><span class="line">    <span class="comment">%return 跳出程序并返回</span></span><br></pre></td></tr></table></figure><h2 id="3-脚本"><a href="#3-脚本" class="headerlink" title="3.脚本"></a>3.脚本</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%脚本文件：没有输入输出参数，执行后变量结果返回工作空间，可直接运行</span></span><br><span class="line">        <span class="comment">%以下是脚本文件，文件名假设为exp.m</span></span><br><span class="line">        <span class="comment">%**********************************************</span></span><br><span class="line">            clear</span><br><span class="line">            r = <span class="number">5</span>;</span><br><span class="line">            s = <span class="built_in">pi</span>*r*r;</span><br><span class="line">            p = <span class="number">2</span>*<span class="built_in">pi</span>*r;</span><br><span class="line">            <span class="built_in">disp</span>(s)</span><br><span class="line">            <span class="built_in">disp</span>(p)</span><br><span class="line">        <span class="comment">%**********************************************</span></span><br><span class="line">        <span class="comment">%以下是调用</span></span><br><span class="line">        <span class="comment">%**********************************************</span></span><br><span class="line">            <span class="built_in">exp</span></span><br><span class="line">        <span class="comment">%**********************************************</span></span><br></pre></td></tr></table></figure><h2 id="4-函数"><a href="#4-函数" class="headerlink" title="4.函数"></a>4.函数</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%函数文件：以function开头，有输入输出，变量为局部变量不返回工作空间，需要调用</span></span><br><span class="line">        <span class="comment">%以下是函数文件</span></span><br><span class="line">        <span class="comment">%**********************************************</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="params">[s, p]</span> = <span class="title">circ</span><span class="params">(r)</span>  % 文件命名应与函数名一致，系统找文件名<span class="title">circ</span>.<span class="title">m</span></span></span><br><span class="line">            <span class="comment">%CIRC 计算圆面积和周长  % 简单说明</span></span><br><span class="line">            <span class="comment">%参数：输入参数r:圆半径；输出参数s:圆面积，p:周长  % 详细说明</span></span><br><span class="line">                s = <span class="built_in">pi</span>*r*r;</span><br><span class="line">                p = <span class="number">2</span>*<span class="built_in">pi</span>*r;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="comment">%**********************************************</span></span><br><span class="line">        <span class="comment">%以下是调用</span></span><br><span class="line">        <span class="comment">%**********************************************</span></span><br><span class="line">            [a, b] = circ(<span class="number">5</span>);  <span class="comment">% 返回为多个参数时，若写a = circ(5)则保留第一个返回值</span></span><br><span class="line">        <span class="comment">%**********************************************</span></span><br><span class="line">        <span class="comment">%*以下是带子函数的函数文件</span></span><br><span class="line">        <span class="comment">%**********************************************</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">y</span> = <span class="title">key</span><span class="params">(w)</span>  % 主函数放第一个，函数名为<span class="title">key</span></span></span><br><span class="line">            <span class="keyword">if</span> w==<span class="number">0</span></span><br><span class="line">                y = type0(w);  <span class="comment">% 调用子函数type0</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                y = type1(w);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">y0</span> = <span class="title">type0</span><span class="params">(a)</span>  % 子函数，各子函数之间顺序无所谓</span></span><br><span class="line">            y0 = a+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">y1</span> = <span class="title">type1</span><span class="params">(a)</span></span></span><br><span class="line">            y1 = a+<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="comment">%**********************************************</span></span><br><span class="line">        <span class="comment">%*函数输入输出参数可以不定</span></span><br><span class="line">        <span class="comment">%nargin：输入参数个数，nargout：输出参数个数</span></span><br><span class="line">        <span class="comment">%varargin：输入参数内容的元胞数组，varargout：输出参数</span></span><br><span class="line">        <span class="comment">%以下是函数文件</span></span><br><span class="line">        <span class="comment">%**********************************************</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">varargout</span> = <span class="title">idk</span><span class="params">(varargin)</span></span></span><br><span class="line">            x = <span class="built_in">length</span>(varargin);</span><br><span class="line">            varargout&#123;<span class="number">1</span>&#125; = x;</span><br><span class="line">            varargout&#123;<span class="number">2</span>&#125; = x+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="comment">%**********************************************  </span></span><br></pre></td></tr></table></figure><h1 id="三、图像绘制"><a href="#三、图像绘制" class="headerlink" title="三、图像绘制"></a>三、图像绘制</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = 0:0.1:2*pi;</span><br><span class="line">y1 = sin(x);</span><br><span class="line">y2 = cos(x);</span><br></pre></td></tr></table></figure><h2 id="1-二维曲线绘制"><a href="#1-二维曲线绘制" class="headerlink" title="1.二维曲线绘制"></a>1.二维曲线绘制</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">% 二维曲线绘制</span></span><br><span class="line">    <span class="comment">% 基本函数</span></span><br><span class="line">        <span class="comment">% plot(y)</span></span><br><span class="line">            <span class="comment">% y为向量</span></span><br><span class="line">                <span class="built_in">plot</span>(y1);  <span class="comment">% 纵坐标为y的值；横坐标自动为元素序号(角标+1)，此处为1~9</span></span><br><span class="line">            <span class="comment">% y为矩阵</span></span><br><span class="line">                <span class="built_in">figure</span>;  <span class="comment">% 开启新绘图窗口，下一次绘图在新窗口</span></span><br><span class="line">                y = [y1&#x27;, y2&#x27;];</span><br><span class="line">                <span class="built_in">plot</span>(y);  <span class="comment">% 当y为矩阵，按每一列画出曲线，颜色自动区分</span></span><br><span class="line">        <span class="comment">% plot(x, y)</span></span><br><span class="line">            <span class="comment">% xy为向量</span></span><br><span class="line">                <span class="built_in">plot</span>(x, y1);  <span class="comment">% 先绘制曲线</span></span><br><span class="line">        <span class="comment">% plot(x1, y1, x2, y2...)</span></span><br><span class="line">            <span class="built_in">plot</span>(x, y1, x, y2);  <span class="comment">% 在同一个窗口同一坐标轴绘制多条曲线</span></span><br><span class="line">    <span class="comment">% 线性图形格式设置</span></span><br><span class="line">        <span class="comment">% 线形颜色数据点</span></span><br><span class="line">            <span class="built_in">plot</span>(x, y1, <span class="string">&#x27;b:o&#x27;</span>);  <span class="comment">% 蓝色 点线 圆圈</span></span><br><span class="line">            <span class="comment">% b蓝 g绿 r红 c青 m紫 y黄 k黑 w白</span></span><br><span class="line">            <span class="comment">% -实线 :点线 --虚线 -.点画线</span></span><br><span class="line">            <span class="comment">% .实点 o圆圈 x叉 +十字 *星号 s方块 d钻石 v下三角 ^上三角 &lt;左三角 &gt;右三角 p五角星 h六角星</span></span><br><span class="line">        <span class="comment">% 坐标轴</span></span><br><span class="line">            <span class="built_in">plot</span>(x, y1);</span><br><span class="line">            axis([<span class="number">-1</span>*<span class="built_in">pi</span>, <span class="number">3</span>*<span class="built_in">pi</span>, <span class="number">-1.5</span>, <span class="number">1.5</span>]);  <span class="comment">% 规定横纵坐标范围</span></span><br><span class="line">    <span class="comment">% 图形修饰</span></span><br><span class="line">        <span class="comment">% 标题标签</span></span><br><span class="line">            title(<span class="string">&#x27;a title&#x27;</span>);  <span class="comment">% 图像标题</span></span><br><span class="line">            xlabel(<span class="string">&#x27;this is x&#x27;</span>);  <span class="comment">% x轴标记，同理还有ylabel，zlabel</span></span><br><span class="line">        <span class="comment">%图例设置</span></span><br><span class="line">            <span class="built_in">legend</span>(<span class="string">&#x27;hahaha&#x27;</span>, <span class="string">&#x27;location&#x27;</span>, <span class="string">&#x27;best&#x27;</span>);  <span class="comment">% str的顺序与绘图顺序一致; &#x27;best&#x27;指图例位置最佳化，还有其他位置</span></span><br><span class="line">        <span class="comment">%图形保持</span></span><br><span class="line">            <span class="built_in">plot</span>(x, y1);</span><br><span class="line">            <span class="built_in">hold</span> on;  <span class="comment">% 在原有窗口y1曲线上增加绘制下一个图形</span></span><br><span class="line">            <span class="built_in">plot</span>(x, y2);  <span class="comment">% y2在同一窗口内被绘制</span></span><br><span class="line">            <span class="built_in">hold</span> off;</span><br><span class="line">        <span class="comment">%分割绘制</span></span><br><span class="line">            subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>);  <span class="comment">% 分割成2x2区域，在第一块区域绘制下一个图形</span></span><br><span class="line">            <span class="built_in">plot</span>(x, y1);  <span class="comment">% y1被绘制在4块区域的第一块</span></span><br><span class="line">            subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>);  <span class="comment">% 分割方法相同，区域改变</span></span><br><span class="line">            <span class="built_in">plot</span>(x, y2);  <span class="comment">% y2在第二块区域</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-统计图"><a href="#2-统计图" class="headerlink" title="2.统计图"></a>2.统计图</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%*二维特殊图形绘制</span></span><br><span class="line">    <span class="comment">%柱状图</span></span><br><span class="line">        bar(x, y, width, <span class="string">&#x27;参数&#x27;</span>);  <span class="comment">% x横坐标向量，m个元素; y为向量时，每个x画一竖条共m条，矩阵mxn时，每个x画n条;</span></span><br><span class="line">                                   <span class="comment">% width宽度默认0.8，超过1各条会重叠;</span></span><br><span class="line">                                   <span class="comment">% 参数有grouped分组式，stacked堆栈式; 默认grouped</span></span><br><span class="line">                                   <span class="comment">% bar垂直柱状图,barh水平柱状图,bar3三维柱状图,barh3水平三维柱状图(三维多一个参数detached, 且为默认)</span></span><br><span class="line">    <span class="comment">%饼形图</span></span><br><span class="line">        pie(x, explode, <span class="string">&#x27;lable&#x27;</span>);  <span class="comment">% x为向量显示每个元素占总和百分比, 为矩阵显示每个元素占所有总和百分比</span></span><br><span class="line">                                   <span class="comment">% explode向量与x同长度，为1表示该元素被分离突出显示，默认全0不分离</span></span><br><span class="line">                                   <span class="comment">% pie3绘制三维饼图</span></span><br><span class="line">    <span class="comment">%直方图</span></span><br><span class="line">        hist(y, n);  <span class="comment">% y为向量，把横坐标分为n段绘制</span></span><br><span class="line">        hist(y, x);  <span class="comment">% x为向量，用于指定每段中间值, 若取N = hist(y, x), N为每段元素个数</span></span><br><span class="line">    <span class="comment">%离散数据图</span></span><br><span class="line">        stairs(x, y, <span class="string">&#x27;b-o&#x27;</span>);  <span class="comment">% 阶梯图，参数同plot</span></span><br><span class="line">        stem(x, y, <span class="string">&#x27;fill&#x27;</span>);  <span class="comment">% 火柴杆图，参数fill是填充火柴杆，或定义线形</span></span><br><span class="line">        candle(HI, LO, CL, OP);  <span class="comment">% 蜡烛图:HI为最高价格向量,LO为最低价格向量,CL为收盘价格向量,OP为开盘价格向量</span></span><br><span class="line">    <span class="comment">%向量图</span></span><br><span class="line">        compass(u, v, <span class="string">&#x27;b-o&#x27;</span>);  <span class="comment">% 罗盘图横坐标u纵坐标v</span></span><br><span class="line">        compass(Z, <span class="string">&#x27;b-o&#x27;</span>);  <span class="comment">% 罗盘图复向量Z</span></span><br><span class="line">        feather(u, v, <span class="string">&#x27;b-o&#x27;</span>);  <span class="comment">% 羽毛图横坐标u纵坐标v</span></span><br><span class="line">        feather(Z, <span class="string">&#x27;b-o&#x27;</span>);  <span class="comment">% 羽毛图复向量Z</span></span><br><span class="line">        quiver(x, y, u, v);  <span class="comment">% 以(x, y)为起点(u, v)为终点向量场图</span></span><br><span class="line">    <span class="comment">%极坐标图</span></span><br><span class="line">        <span class="comment">% polar(theta, rho, &#x27;b-o&#x27;);  % 极角theta, 半径rho</span></span><br><span class="line">        theta = -<span class="built_in">pi</span>:<span class="number">0.01</span>:<span class="built_in">pi</span>;</span><br><span class="line">        rho = <span class="built_in">sin</span>(theta);</span><br><span class="line">        polar(theta, rho, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    <span class="comment">%对数坐标图</span></span><br><span class="line">        semilogx(x1, y1, <span class="string">&#x27;b-o&#x27;</span>);  <span class="comment">% 把x轴对数刻度表示, semilogy是y轴对数刻度表示，loglog是两个坐标都用对数表示</span></span><br><span class="line">    <span class="comment">%双纵坐标</span></span><br><span class="line">        plotyy(x1, y1, x2, y2, <span class="string">&#x27;fun1&#x27;</span>, <span class="string">&#x27;fun2&#x27;</span>);  <span class="comment">% fun规定了两条条线的绘制方式，如plot,semilogx,semilogy,loglog,stem等</span></span><br><span class="line">    <span class="comment">%函数绘图</span></span><br><span class="line">        f = <span class="string">&#x27;sin(2*x)&#x27;</span>;</span><br><span class="line">        ezplot(f, [<span class="number">0</span>, <span class="number">2</span>*<span class="built_in">pi</span>]);  <span class="comment">% 绘制f并规定横坐标范围，也有[xmin, xmax, ymin, ymax]</span></span><br><span class="line">        x = <span class="string">&#x27;2*cos(t)&#x27;</span>;</span><br><span class="line">        y = <span class="string">&#x27;4*sin(t)&#x27;</span>;</span><br><span class="line">        ezplot(x, y);  <span class="comment">% 绘制x(t),y(t)在[0, 2*pi]图像, 也可以在最后用[tmin, tmax]规定t的范围</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-三维曲线曲面绘制"><a href="#3-三维曲线曲面绘制" class="headerlink" title="3.三维曲线曲面绘制"></a>3.三维曲线曲面绘制</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%%</span></span><br><span class="line">   <span class="comment">%三维曲线</span></span><br><span class="line">        x = <span class="number">0</span>:<span class="number">0.1</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">        y = <span class="built_in">sin</span>(x); z = <span class="built_in">cos</span>(x);</span><br><span class="line">        <span class="built_in">plot3</span>(x, y, z, <span class="string">&#x27;b-*&#x27;</span>);</span><br><span class="line">   <span class="comment">%三维曲面</span></span><br><span class="line">      <span class="comment">%三维网格</span></span><br><span class="line">            x = <span class="number">-5</span>:<span class="number">0.1</span>:<span class="number">5</span>;  <span class="comment">% 规定了x轴采样点，也规定了x轴范围</span></span><br><span class="line">            y = <span class="number">-4</span>:<span class="number">0.1</span>:<span class="number">4</span>;  <span class="comment">% 规定了y轴采样点，也规定了y轴范围</span></span><br><span class="line">            [X, Y] = <span class="built_in">meshgrid</span>(x, y);  <span class="comment">% 得到了xoy面网格点</span></span><br><span class="line">            Z = X.^<span class="number">2</span>+Y.^<span class="number">2</span>;</span><br><span class="line">            mesh(X, Y, Z)  <span class="comment">% XY是meshgrid得到的网格点，Z是网格顶点，c是用色矩阵可省略</span></span><br><span class="line">    <span class="comment">%三维表面图</span></span><br><span class="line">            x = <span class="number">-5</span>:<span class="number">0.1</span>:<span class="number">5</span>;  </span><br><span class="line">            y = <span class="number">-4</span>:<span class="number">0.1</span>:<span class="number">4</span>;</span><br><span class="line">            [X, Y] = <span class="built_in">meshgrid</span>(x, y);</span><br><span class="line">            Z = X.^<span class="number">2</span>+Y.^<span class="number">2</span>;  <span class="comment">% 以上部分同上</span></span><br><span class="line">            surf(X, Y, Z)  <span class="comment">% 与上一个类似</span></span><br></pre></td></tr></table></figure><h1 id="四、多项式"><a href="#四、多项式" class="headerlink" title="四、多项式"></a>四、多项式</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%多项式</span></span><br><span class="line">    <span class="comment">%创建</span></span><br><span class="line">        p = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];  <span class="comment">% 系数向量，按x降幂排列，最右边是常数</span></span><br><span class="line">        f1 = poly2str(p, <span class="string">&#x27;x&#x27;</span>);  <span class="comment">% 生成好看的字符串 f1 = x^3 + 2 x^2 + 3 x + 4，不被认可的运算式</span></span><br><span class="line">        f2 = poly2sym(p);  <span class="comment">% 生成可用的符号函数 f2 = x^3 + 2*x^2 + 3*x + 4</span></span><br><span class="line">    <span class="comment">%求值</span></span><br><span class="line">        x = <span class="number">4</span>;</span><br><span class="line">        y1 = polyval(p, x);  <span class="comment">% 代入求值；若x1为矩阵，则对每个值单独求值</span></span><br><span class="line">    <span class="comment">%求根</span></span><br><span class="line">        r = roots(p); <span class="comment">% p同上，由系数求根，结果为根植矩阵</span></span><br><span class="line">        p0 = poly(r);  <span class="comment">% 由根求系数，结果为系数矩阵</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%数据插值</span></span><br><span class="line">    <span class="comment">%一维插值</span></span><br><span class="line">        <span class="comment">%yi = interp1(X, Y, xi, &#x27;method&#x27;)</span></span><br><span class="line">        X = [<span class="number">-3</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line">        Y = [<span class="number">9</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>];  <span class="comment">% XY为已知点横纵坐标向量</span></span><br><span class="line">        y2 = interp1(X, Y, <span class="number">2</span>);  <span class="comment">% 差值预估在x=2的y的值，x不能超过已知范围(此处x&lt;3)</span></span><br><span class="line">        y2m = interp1(X, Y, <span class="number">2</span>, <span class="string">&#x27;spline&#x27;</span>);  <span class="comment">% 用spline方法(三次样条)差值预估在x=2的y的值</span></span><br><span class="line">    <span class="comment">%二维插值</span></span><br><span class="line">        <span class="comment">%zi = interp1(X, Y, Z, xi, yi, &#x27;method&#x27;)</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">%%</span></span><br><span class="line">X = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>];</span><br><span class="line">A = [<span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>; <span class="number">9</span>, <span class="number">5</span>, <span class="number">3</span>; <span class="number">8</span>, <span class="number">4</span> ,<span class="number">6</span>];</span><br><span class="line">B = [<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>; <span class="number">9</span>, <span class="number">5</span>, <span class="number">3</span>; <span class="number">8</span>, <span class="number">4</span> ,<span class="number">6</span>];</span><br><span class="line"><span class="comment">%数据统计</span></span><br><span class="line">    <span class="comment">%矩阵最大最小值</span></span><br><span class="line">        y = <span class="built_in">max</span>(X);  <span class="comment">% 求矩阵X的最大值，min最小值</span></span><br><span class="line">        [y, k] = <span class="built_in">max</span>(X);  <span class="comment">% 求最大值，k为该值的角标</span></span><br><span class="line">        [y, k] = <span class="built_in">max</span>(A, [], <span class="number">2</span>);  <span class="comment">% A是矩阵，&#x27;2&#x27;时返回y每一行最大元素构成的列向量，k元素所在列；&#x27;1&#x27;时与上述相同</span></span><br><span class="line">    <span class="comment">%均值和中值</span></span><br><span class="line">        y = <span class="built_in">mean</span>(X);  <span class="comment">% 均值</span></span><br><span class="line">        y = median(X);  <span class="comment">% 中值</span></span><br><span class="line">        y = <span class="built_in">mean</span>(A, <span class="number">2</span>);  <span class="comment">% &#x27;2&#x27;时返回y每一行均值构成的列向量；&#x27;1&#x27;时与上述相同</span></span><br><span class="line">        y = median(A, <span class="number">2</span>);  <span class="comment">% &#x27;2&#x27;时返回y每一行中值构成的列向量；&#x27;1&#x27;时与上述相同</span></span><br><span class="line">    <span class="comment">%排序</span></span><br><span class="line">        Y = <span class="built_in">sort</span>(A, <span class="number">1</span>, <span class="string">&#x27;ascend&#x27;</span>);  <span class="comment">% sort(矩阵, dim, &#x27;method&#x27;)dim为1按列排序，2按行排序；ascend升序，descend降序</span></span><br><span class="line">        [Y, I] = <span class="built_in">sort</span>(A, <span class="number">1</span>, <span class="string">&#x27;ascend&#x27;</span>);  <span class="comment">% I保留了元素之前在A的位置</span></span><br><span class="line">    <span class="comment">%求和求积累加累乘</span></span><br><span class="line">        y = sum(X);  <span class="comment">% 求和</span></span><br><span class="line">        y = prod(X);  <span class="comment">% 求积</span></span><br><span class="line">        y = cumsum(X);  <span class="comment">% 累加</span></span><br><span class="line">        y = cumprod(X);  <span class="comment">% 累乘</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%*数值计算</span></span><br><span class="line">    <span class="comment">%最(极)值</span></span><br><span class="line">        <span class="comment">%多元函数在给定初值附近找最小值点</span></span><br><span class="line">        x = fminsearch(fun, x0);</span><br><span class="line">    <span class="comment">%函数零点</span></span><br><span class="line">        x = fzero(fun, x0);  <span class="comment">% 在给定初值x0附近找零点</span></span><br></pre></td></tr></table></figure><h1 id="五、符号函数"><a href="#五、符号函数" class="headerlink" title="五、符号函数"></a>五、符号函数</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%符号对象创建</span></span><br><span class="line">    <span class="comment">%sym函数</span></span><br><span class="line">        p = <span class="built_in">sin</span>(<span class="built_in">pi</span>/<span class="number">3</span>);</span><br><span class="line">        P = sym(p, <span class="string">&#x27;r&#x27;</span>);  <span class="comment">% 用数值p创建符号常量P；&#x27;d&#x27;浮点数&#x27;f&#x27;有理分式的浮点数&#x27;e&#x27;有理数和误差&#x27;r&#x27;有理数</span></span><br><span class="line">    <span class="comment">%syms函数</span></span><br><span class="line">        syms x;  <span class="comment">% 声明符号变量</span></span><br><span class="line">        f = <span class="number">7</span>*x^<span class="number">2</span> + <span class="number">2</span>*x+<span class="number">9</span>;  <span class="comment">% 创建符号函数</span></span><br><span class="line">    <span class="comment">%符号运算</span></span><br><span class="line">        <span class="comment">% 加减乘除外</span></span><br><span class="line">        <span class="comment">% &#x27;转置 ； ==相等 ； ~=不等</span></span><br><span class="line">        <span class="comment">% sin, cos, tan; asin, acos, atan 三角反三角</span></span><br><span class="line">        <span class="comment">% sinh, cosh, tanh; asinh, acosh, atanh 双曲反双曲</span></span><br><span class="line">        <span class="comment">% conj复数共轭；real复数实部；imag复数虚部；abs复数模；angle复数幅角</span></span><br><span class="line">        <span class="comment">% diag矩阵对角；triu矩阵上三角；tril矩阵下三角；inv逆矩阵；det行列式；rank秩；poly特征多项式；</span></span><br><span class="line">        <span class="comment">% |----expm矩阵指数函数；eig矩阵特征值和特征向量；svd奇异值分解；</span></span><br><span class="line">    <span class="comment">%符号对象精度转换</span></span><br><span class="line">        digits;  <span class="comment">% 显示当前用于计算的精度</span></span><br><span class="line">        digits(<span class="number">16</span>);  <span class="comment">% 将计算精度改为16位，降低精度有时可以加快程序运算速度或减少空间占用</span></span><br><span class="line">        a16 = vpa(<span class="built_in">sqrt</span>(<span class="number">2</span>));  <span class="comment">% vpa括起的运算使sqrt(2)运算按照规定的精度执行</span></span><br><span class="line">        a8 = vpa(<span class="built_in">sqrt</span>(<span class="number">2</span>), <span class="number">8</span>);  <span class="comment">% 在vpa内控制精度，离开这一步精度恢复</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%符号多项式函数运算</span></span><br><span class="line">    <span class="comment">%*符号表达形式与相互转化</span></span><br><span class="line">        <span class="comment">%多项式展开整理</span></span><br><span class="line">            g = expand(f);  <span class="comment">% 展开</span></span><br><span class="line">            h = collect(g);  <span class="comment">% 整理(默认按x整理)</span></span><br><span class="line">            h1 = collect(f, x);  <span class="comment">% 按x整理（降幂排列）</span></span><br><span class="line">        <span class="comment">%因式分解展开质因数</span></span><br><span class="line">            fac = <span class="built_in">factor</span>(h);  <span class="comment">% 因式分解</span></span><br><span class="line">            <span class="built_in">factor</span>(<span class="number">12</span>);  <span class="comment">% 对12分解质因数</span></span><br><span class="line">    <span class="comment">%符号多项式向量形式与计算</span></span><br><span class="line">        syms a b c;</span><br><span class="line">        n = [a, b, c];</span><br><span class="line">        roots(n);  <span class="comment">% 求符号多项式ax^2+bx+c的根</span></span><br><span class="line">        n = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">        roots(n);  <span class="comment">% 求符号多项式带入a=1, b=2, c=3的根</span></span><br><span class="line">    <span class="comment">%*反函数</span></span><br><span class="line">        fi = finverse(f, x);  <span class="comment">% 对f中的变量x求反函数</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%符号微积分</span></span><br><span class="line">    <span class="comment">%函数的极限和级数运算</span></span><br><span class="line">        <span class="comment">% 常量a，b</span></span><br><span class="line">        <span class="comment">%极限</span></span><br><span class="line">            limit(f, x, <span class="number">4</span>);  <span class="comment">% 求f(x), x-&gt;4</span></span><br><span class="line">            limit(f, <span class="number">4</span>);  <span class="comment">% 默认变量-&gt;4</span></span><br><span class="line">            limit(f);  <span class="comment">% 默认变量-&gt;0</span></span><br><span class="line">            limit(f, x, <span class="number">4</span>, <span class="string">&#x27;right&#x27;</span>);  <span class="comment">% 求f(x), x-&gt;4+, &#x27;left&#x27; x-&gt;4-</span></span><br><span class="line">        <span class="comment">%*基本级数运算</span></span><br><span class="line">            <span class="comment">%求和</span></span><br><span class="line">                symsum(s, x, <span class="number">3</span>, <span class="number">5</span>);  <span class="comment">% 计算表达式s变量x从3到5的级数和，或symsum(s, x, [a b])或symsum(s, x, [a;b])</span></span><br><span class="line">                symsum(s, <span class="number">3</span>, <span class="number">5</span>);  <span class="comment">% 计算s默认变量从3到5的级数和</span></span><br><span class="line">                symsum(s);  <span class="comment">% 计算s默认变量从0到n-1的级数和</span></span><br><span class="line">            <span class="comment">%一维泰勒展开</span></span><br><span class="line">                taylor(f, x, <span class="number">4</span>);  <span class="comment">% f在x=4处展开为五阶泰勒级数</span></span><br><span class="line">                taylor(f, x);  <span class="comment">% f在x=0处展开为五阶泰勒级数</span></span><br><span class="line">                taylor(f);  <span class="comment">% f在默认变量=0处展开为五阶泰勒级数</span></span><br><span class="line">    <span class="comment">%符号微分</span></span><br><span class="line">        <span class="comment">%单变量求导（单变量偏导）</span></span><br><span class="line">            n = <span class="number">1</span>;  <span class="comment">% 常量n</span></span><br><span class="line">            fn = diff(f, x, n);  <span class="comment">% f对x的n阶导</span></span><br><span class="line">            f1 = diff(f, x);  <span class="comment">% f对x的1阶导</span></span><br><span class="line">            diff(f, n);  <span class="comment">% f对默认变量的n阶导</span></span><br><span class="line">            diff(f);  <span class="comment">% 默认变量1阶导</span></span><br><span class="line">        <span class="comment">%多元偏导</span></span><br><span class="line">            fxy = diff(f, x, y);  <span class="comment">% 先求x偏导，再求y偏导</span></span><br><span class="line">            fxyz = diff(f, x, y, z);  <span class="comment">% 先求x偏导，再求y偏导,再求z偏导</span></span><br><span class="line">    <span class="comment">%符号积分</span></span><br><span class="line">        <span class="comment">%积分命令</span></span><br><span class="line">            int(f, x, <span class="number">1</span>, <span class="number">2</span>);  <span class="comment">% 函数f变量x在1~2区间定积分</span></span><br><span class="line">            int(f, <span class="number">1</span>, <span class="number">2</span>);  <span class="comment">% 函数f默认变量在ab区间定积分</span></span><br><span class="line">            int(f, x);  <span class="comment">% 函数f变量x不定积分</span></span><br><span class="line">            int(f);  <span class="comment">% 函数f默认变量不定积分</span></span><br><span class="line">            <span class="comment">% 傅里叶，拉普拉斯，Z变换</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%*符号方程求解</span></span><br><span class="line">    <span class="comment">%符号代数方程</span></span><br><span class="line">        <span class="comment">%一元方程</span></span><br><span class="line">            eqn1 = a*x==b;</span><br><span class="line">            S = solve(eqn1);  <span class="comment">% 返回eqn符号解</span></span><br><span class="line">        <span class="comment">%多元方程组</span></span><br><span class="line">            eqn21 = x-y==a;</span><br><span class="line">            eqn22 = <span class="number">2</span>*x+y==b;</span><br><span class="line">            [Sx, Sy] = solve(eqn21, eqn22, x, y);  <span class="comment">% [Svar1,...SvarN]=solve(eqn1,...eqnM, var1,...varN),MN不一定相等</span></span><br><span class="line">            [Sxn, Syn] = solve(eqn21, eqn22, x, y, <span class="string">&#x27;ReturnCondition&#x27;</span>, <span class="built_in">true</span>);  <span class="comment">% 加上参数ReturnCondition可返回通解及解的条件</span></span><br><span class="line">            <span class="comment">% 其他参数(参数加上true生效)</span></span><br><span class="line">                <span class="comment">% IgnoreProperty，忽略变量定义时一些假设</span></span><br><span class="line">                <span class="comment">% IgnoreAnalyticConstraints，忽略分析限制；</span></span><br><span class="line">                <span class="comment">% MaxDegree，大于3解显性解；</span></span><br><span class="line">                <span class="comment">% PrincipleValue，仅主值</span></span><br><span class="line">                <span class="comment">% Real，仅实数解</span></span><br><span class="line">        <span class="comment">%非线性fsolve</span></span><br><span class="line">            X = fsolve(fun, X0, optimset(option));  <span class="comment">% fun函数.m文件名；X0求根初值；option选项如(&#x27;Display&#x27;,&#x27;off&#x27;)不显示中间结果等 </span></span><br></pre></td></tr></table></figure><p>参考资料:    </p><p><a href="https://ww2.mathworks.cn/help/matlab/">Matlab官方教程</a></p><p><a href="https://www.bilibili.com/video/BV1hE411Q7T4/?spm_id_from=333.337.search-card.all.click&amp;vd_source=15aaf2f3032abe28c98a76535d8c050b">1小时Matlab速成教程_bilibili</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SE代码</title>
      <link href="/2023/08/10/SE%E4%BB%A3%E7%A0%81/"/>
      <url>/2023/08/10/SE%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="一、DNN"><a href="#一、DNN" class="headerlink" title="一、DNN"></a>一、DNN</h1>]]></content>
      
      
      <categories>
          
          <category> 语音 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数模算法python模板</title>
      <link href="/2023/08/10/%E6%95%B0%E6%A8%A1%E7%AE%97%E6%B3%95python%E6%A8%A1%E6%9D%BF/"/>
      <url>/2023/08/10/%E6%95%B0%E6%A8%A1%E7%AE%97%E6%B3%95python%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="一、规划问题"><a href="#一、规划问题" class="headerlink" title="一、规划问题"></a>一、规划问题</h1><h2 id="1-线性规划"><a href="#1-线性规划" class="headerlink" title="(1)线性规划"></a>(1)线性规划</h2><ol><li>pulp解决简单线性规划问题</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pulp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.定义一个规划问题</span></span><br><span class="line">MyProbLP = pulp.LpProblem(<span class="string">&quot;LPProbDemo1&quot;</span>, sense=pulp.LpMaximize)<span class="comment">#LpMinimize/LpMaximize</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.定义决策变量</span></span><br><span class="line">x1 = pulp.LpVariable(<span class="string">&#x27;x1&#x27;</span>, lowBound=<span class="number">0</span>, upBound=<span class="number">7</span>, cat=<span class="string">&#x27;Continuous&#x27;</span>)<span class="comment">#Integer/Binary/Continuous</span></span><br><span class="line">x2 = pulp.LpVariable(<span class="string">&#x27;x2&#x27;</span>, lowBound=<span class="number">0</span>, upBound=<span class="number">7</span>, cat=<span class="string">&#x27;Continuous&#x27;</span>)</span><br><span class="line">x3 = pulp.LpVariable(<span class="string">&#x27;x3&#x27;</span>, lowBound=<span class="number">0</span>, upBound=<span class="number">7</span>, cat=<span class="string">&#x27;Continuous&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.设置目标函数</span></span><br><span class="line">MyProbLP += <span class="number">2</span> * x1 + <span class="number">3</span> * x2 - <span class="number">5</span> * x3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.添加约束条件</span></span><br><span class="line">MyProbLP += (<span class="number">2</span> * x1 - <span class="number">5</span> * x2 + x3 &gt;= <span class="number">10</span>)  <span class="comment"># 不等式约束</span></span><br><span class="line">MyProbLP += (x1 + <span class="number">3</span> * x2 + x3 &lt;= <span class="number">12</span>)  <span class="comment"># 不等式约束</span></span><br><span class="line">MyProbLP += (x1 + x2 + x3 == <span class="number">7</span>)  <span class="comment"># 等式约束</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.求解</span></span><br><span class="line">MyProbLP.solve()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Status:&quot;</span>, pulp.LpStatus[MyProbLP.status])  <span class="comment"># 输出求解状态</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> MyProbLP.variables():</span><br><span class="line">    <span class="built_in">print</span>(v.name, <span class="string">&quot;=&quot;</span>, v.varValue)  <span class="comment"># 输出每个变量的最优值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;F(x) = &quot;</span>, pulp.value(MyProbLP.objective))  <span class="comment"># 输出最优解的目标函数值</span></span><br></pre></td></tr></table></figure><ol><li><p>scipy求解</p><p>A，Aeq是二维数组，其他是一维数组。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> optimi ze</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">c=np.array([<span class="number">2</span>,<span class="number">3</span>,-<span class="number">5</span>])</span><br><span class="line">A=np.array([[-<span class="number">2</span>,<span class="number">5</span>,-<span class="number">1</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>]])</span><br><span class="line">B=np.array([-<span class="number">10</span>,<span class="number">12</span>])</span><br><span class="line">Aeq=np.array([[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]])</span><br><span class="line">Beq=np.array([<span class="number">7</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#求解函数</span></span><br><span class="line">res =optimize.linprog (C, A,b, Aeq, beq, LB, UB, X0, OPTIONS)</span><br><span class="line"><span class="built_in">print</span> (res)</span><br></pre></td></tr></table></figure><p>摘录：</p><p><a href="https://blog.csdn.net/m0_46692607/article/details/126784109">线性规划和例题</a></p><h1 id="二、相关性分析"><a href="#二、相关性分析" class="headerlink" title="二、相关性分析"></a>二、相关性分析</h1><p>其实用Excel也能做:</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=PEARSON(A2:A33)</span><br></pre></td></tr></table></figure><p>用python生成热力图:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">df=pd.read_excel(<span class="string">&#x27;附件1&#x27;</span>)</span><br><span class="line">df</span><br><span class="line">df.corr(<span class="string">&quot;pearson&quot;</span>)</span><br><span class="line">df.corr(<span class="string">&quot;spearman&quot;</span>)</span><br><span class="line">df.corr(<span class="string">&quot;kendall&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=<span class="string">&#x27;Simhei&#x27;</span><span class="comment">#修改字体</span></span><br><span class="line">ax=sns.heatmap(</span><br><span class="line">  df.corr(<span class="string">&quot;pearson&quot;</span>),</span><br><span class="line">  annot=<span class="literal">True</span>,</span><br><span class="line">  cmap=<span class="string">&quot;coolwarm&quot;</span>,</span><br><span class="line">  fmt=<span class="string">&#x27;.2f&#x27;</span></span><br><span class="line">)</span><br><span class="line">bottom,top=ax.get_ylim()</span><br><span class="line">ax.set_ylim(bottom+<span class="number">0.5</span>,top-<span class="number">0.5</span>)</span><br><span class="line">plt.savfig()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> spearmanr</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置中文字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据加载</span></span><br><span class="line">data = pd.read_excel(<span class="string">&#x27;use_for_py.xlsx&#x27;</span>)</span><br><span class="line">data_analysis = data.head(<span class="number">391</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算相关系数矩阵</span></span><br><span class="line">correlation_matrix = data_analysis.corr(method=<span class="string">&#x27;spearman&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制热力图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">8</span>))</span><br><span class="line">sns.heatmap(correlation_matrix, annot=<span class="literal">True</span>, cmap=<span class="string">&#x27;coolwarm&#x27;</span>, linewidths=<span class="number">0.5</span>, fmt=<span class="string">&quot;.2f&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Spearman Correlation Heatmap&#x27;</span>)</span><br><span class="line">plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line">plt.yticks(rotation=<span class="number">0</span>)</span><br><span class="line">plt.savefig(<span class="string">&#x27;Corr_heat.png&#x27;</span>, dpi=<span class="number">300</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>Pearson相关分析:（p∈[-1,1]）</p><p>$\rho<em>{X, Y} = \frac{\operatorname{cov}(X, Y)}{\sigma</em>{X} \sigma<em>{Y}} = \frac{E\left(\left(X-\mu</em>{X}\right)\left(Y-\mu<em>{Y}\right)\right)}{\sigma</em>{X} \sigma<em>{Y}} = \frac{E(X Y)-E(X) E(Y)}{\sqrt{E\left(X^{2}\right)-E^{2}(X)} \sqrt{E\left(Y^{2}\right)-E^{2}(Y)}} \\rho</em>{X, Y} = \frac{N \sum X Y-\sum X \sum Y}{\sqrt{N \sum X^{2}-\left(\sum X\right)^{2}} \sqrt{N \sum Y^{2}-\left(\sum Y\right)^{2}}} \\rho_{X, Y} = \frac{\sum X Y-\frac{\sum X \sum Y}{N}}{\sqrt{\left(\sum X^{2}-\frac{\left(\sum X\right)^{2}}{N}\right)\left(\sum Y^{2}-\frac{\left(\sum Y\right)^{2}}{N}\right)}}$</p><h2 id="t-检验：检验两个变量是否存在差异"><a href="#t-检验：检验两个变量是否存在差异" class="headerlink" title="t-检验：检验两个变量是否存在差异"></a>t-检验：检验两个变量是否存在差异</h2><p>如果满足两个假设：</p><p>​    ①正态分布：</p><p>​        被测量的变量需要在总体和样本中呈现正态分布；    </p><p>​        即使不满足，根据中心极限定理，若每组样本大于30时，均值分布趋近于正态分布。</p><p>​    ②方差齐性：</p><p>​        需要两样本之间的方差不能差太多。</p><p>可以用T检验(t-test)，计算T值，若大于临界值，则能说明有差异性。</p><p>此外，还可以考虑用 配对样本t检验(Dependent t-test for paired samples) 和 单样本t检验(One-sample t-test)。</p><p>摘录</p><p><a href="https://www.bilibili.com/video/BV13h411872K/?spm_id_from=333.337.search-card.all.click&amp;vd_source=15aaf2f3032abe28c98a76535d8c050b">相关性分析-简单讲解</a></p><p><a href="https://www.bilibili.com/video/BV1eg411a7eh/?spm_id_from=333.788&amp;vd_source=15aaf2f3032abe28c98a76535d8c050b">T-检验等统计方法速览</a></p><p><a href="https://www.bilibili.com/video/BV14Y4y1t7Yj/?spm_id_from=333.337.search-card.all.click&amp;vd_source=15aaf2f3032abe28c98a76535d8c050b">spsspro相关性分析</a></p><h1 id="三、数据处理和机器学习"><a href="#三、数据处理和机器学习" class="headerlink" title="三、数据处理和机器学习"></a>三、数据处理和机器学习</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> read_csv</span><br><span class="line"><span class="keyword">from</span> pandas.plotting <span class="keyword">import</span> scatter_matrix</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.discriminant_analysis <span class="keyword">import</span> LinearDiscriminantAnalysis</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"></span><br><span class="line"><span class="comment">#导入数据集</span></span><br><span class="line">filename = <span class="string">&#x27;C:/Users/Lenovo/Desktop/上课/python机器学习课程/5.13/iris.data.csv&#x27;</span></span><br><span class="line">names = [<span class="string">&#x27;separ-length&#x27;</span>, <span class="string">&#x27;separ-width&#x27;</span>, <span class="string">&#x27;petal-length&#x27;</span>, <span class="string">&#x27;patal-width&#x27;</span>, <span class="string">&#x27;class&#x27;</span>]</span><br><span class="line">dateset = read_csv(filename, names=names)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;数据维度：行 %s, 列 %s&#x27;</span> % dateset.shape)<span class="comment">#行&amp;列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看一下数据集</span></span><br><span class="line"><span class="built_in">print</span>(dateset.head(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#描述性统计</span></span><br><span class="line"><span class="built_in">print</span>(dateset.describe())</span><br><span class="line"><span class="comment">#数据分布情况</span></span><br><span class="line"><span class="built_in">print</span>(dateset.groupby(<span class="string">&#x27;class&#x27;</span>).size())</span><br><span class="line"></span><br><span class="line"><span class="comment">#数据可视化</span></span><br><span class="line">dateset.plot(kind=<span class="string">&#x27;box&#x27;</span>, subplots=<span class="literal">True</span>, layout=(<span class="number">2</span>,<span class="number">2</span>), sharex=<span class="literal">False</span>, sharey=<span class="literal">False</span>)</span><br><span class="line">pyplot.show()<span class="comment">#箱型图</span></span><br><span class="line"></span><br><span class="line">dateset.hist()</span><br><span class="line">pyplot.show()<span class="comment">#直方图</span></span><br><span class="line"></span><br><span class="line">scatter_matrix(dateset)</span><br><span class="line">pyplot.show()<span class="comment">#散点矩阵图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#分离数据集</span></span><br><span class="line">array = dateset.values</span><br><span class="line">X = array[:, <span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">Y = array[:, <span class="number">4</span>]</span><br><span class="line">validation_size = <span class="number">0.2</span></span><br><span class="line">seed = <span class="number">7</span></span><br><span class="line">X_train, X_validation, Y_train, Y_validation = train_test_split(X, Y, test_size=validation_size, random_state=seed, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#算法</span></span><br><span class="line">models = &#123;&#125;</span><br><span class="line">models[<span class="string">&#x27;LR&#x27;</span>] = LogisticRegression()</span><br><span class="line">models[<span class="string">&#x27;KNN&#x27;</span>] = KNeighborsClassifier()</span><br><span class="line">models[<span class="string">&#x27;LDA&#x27;</span>] = LinearDiscriminantAnalysis()</span><br><span class="line">models[<span class="string">&#x27;CART&#x27;</span>] = DecisionTreeClassifier()</span><br><span class="line">models[<span class="string">&#x27;SVM&#x27;</span>] = SVC()</span><br><span class="line">models[<span class="string">&#x27;NB&#x27;</span>] = GaussianNB()</span><br><span class="line"></span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> models:</span><br><span class="line">    kflod = KFold(n_splits=<span class="number">10</span>, random_state=seed, shuffle=<span class="literal">True</span>)</span><br><span class="line">    cv_results = cross_val_score(models[key], X_train, Y_train, cv=kflod, scoring=<span class="string">&#x27;accuracy&#x27;</span>)</span><br><span class="line">    results.append(cv_results)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s: %f (%f)&#x27;</span> %(key, cv_results.mean(), cv_results.std()))</span><br><span class="line"></span><br><span class="line">svm = SVC()</span><br><span class="line">svm.fit(X=X_train, y=Y_train)</span><br><span class="line">predictions = svm.predict(X_validation)</span><br><span class="line"><span class="built_in">print</span>(accuracy_score(Y_validation, predictions))</span><br><span class="line"><span class="built_in">print</span>(confusion_matrix(Y_validation, predictions))</span><br><span class="line"><span class="built_in">print</span>(classification_report(Y_validation, predictions))</span><br></pre></td></tr></table></figure><h2 id="数据导入-三种方式"><a href="#数据导入-三种方式" class="headerlink" title="数据导入#三种方式"></a>数据导入#三种方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#csv特征：，分隔 文件头：字段属性</span></span><br><span class="line"><span class="keyword">from</span> csv <span class="keyword">import</span> reader</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">filename = <span class="string">&#x27;pima_data.csv&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rt&#x27;</span>) <span class="keyword">as</span> raw_data:</span><br><span class="line">    readers = reader(raw_data, delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    x = <span class="built_in">list</span>(readers)</span><br><span class="line">    data = np.array(x).astype(<span class="string">&#x27;float&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Pandas导入</span></span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> read_csv</span><br><span class="line">filename = <span class="string">&#x27;pima_data.csv&#x27;</span></span><br><span class="line">names = [<span class="string">&#x27;preg&#x27;</span>, <span class="string">&#x27;plas&#x27;</span>, <span class="string">&#x27;pres&#x27;</span>, <span class="string">&#x27;skin&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;mass&#x27;</span>, <span class="string">&#x27;pedi&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;class&#x27;</span>]</span><br><span class="line">data = read_csv(filename, names=names)</span><br><span class="line"><span class="built_in">print</span>(data.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment">#numpy导入</span></span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> loadtxt</span><br><span class="line">filename = <span class="string">&#x27;pima_data.csv&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rt&#x27;</span>) <span class="keyword">as</span> raw_data:</span><br><span class="line">    data = loadtxt(raw_data, delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.shape)</span><br></pre></td></tr></table></figure><h2 id="数据理解"><a href="#数据理解" class="headerlink" title="数据理解"></a>数据理解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(data,head(<span class="number">10</span>))</span><br><span class="line"><span class="comment">#维度</span></span><br><span class="line"><span class="built_in">print</span>(data.shape)</span><br><span class="line"><span class="comment">#属性和类型</span></span><br><span class="line"><span class="built_in">print</span>(data.dtypes)</span><br><span class="line"><span class="comment">#描述统计，放入论文</span></span><br><span class="line"><span class="built_in">print</span>(data.describe())</span><br><span class="line"><span class="comment">#分布,用于分类算法</span></span><br><span class="line"><span class="built_in">print</span>(data.groupby(<span class="string">&#x27;class&#x27;</span>).size())</span><br><span class="line"><span class="comment">#相关性:&#x27;pearson&#x27; &#x27;spearman&#x27; &#x27;kendall&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(data.corr(method=<span class="string">&#x27;pearson&#x27;</span>))</span><br><span class="line"><span class="comment">#高斯分布</span></span><br><span class="line"><span class="built_in">print</span>(data.skew())</span><br></pre></td></tr></table></figure><h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">data.hist()<span class="comment">#直方图</span></span><br><span class="line">data.plot(kind=<span class="string">&#x27;desnity&#x27;</span>, subplots=<span class="literal">True</span>, layout(<span class="number">3</span>,<span class="number">3</span>), shareX=<span class="literal">False</span>)<span class="comment">#密度图</span></span><br><span class="line">data.plot(kind=<span class="string">&#x27;box&#x27;</span>, subplots=<span class="literal">True</span>, layout(<span class="number">3</span>,<span class="number">3</span>), shareX=<span class="literal">False</span>)<span class="comment">#箱型图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#散点矩阵图</span></span><br><span class="line">correlations = data.corr()</span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">cax = ax.matshow(correlations, vmin=-<span class="number">1</span>, vmax=<span class="number">1</span>)</span><br><span class="line">fig.colorbar(cax)</span><br><span class="line">ticks = np.arange(<span class="number">0</span>,<span class="number">9</span>,<span class="number">1</span>)</span><br><span class="line">ax.set_xticks(ticks)</span><br><span class="line">ax.set_yticks(ticks)</span><br><span class="line">ax.set_xticklabels(names)</span><br><span class="line">ax.set_yticklabels(names)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#散点图</span></span><br><span class="line">data = read_csv(filename, names=names)</span><br><span class="line">scatter_matrix(data)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="数据预处理-将数据转换到-0-1"><a href="#数据预处理-将数据转换到-0-1" class="headerlink" title="数据预处理:将数据转换到[0,1]."></a>数据预处理:将数据转换到[0,1].</h2><h3 id="①数据缩放（-MinMaxScaler-）"><a href="#①数据缩放（-MinMaxScaler-）" class="headerlink" title="①数据缩放（ MinMaxScaler ）"></a>①数据缩放（ MinMaxScaler ）</h3><p>​    使用算法： K近邻算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> set_printoptions</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> read_csv</span><br><span class="line"></span><br><span class="line">data = read_csv(filename, names=names)</span><br><span class="line">array = data.values</span><br><span class="line">X = array[:, <span class="number">0</span>:<span class="number">8</span>]</span><br><span class="line">Y = array[:, <span class="number">8</span>]</span><br><span class="line">transformer = MinMaxScaler(feature_range=(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">newX = transformer.fit_transform(X)</span><br><span class="line">set_printoptions(precision=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(newX)</span><br></pre></td></tr></table></figure><h3 id="②正态化数据（StandardScaler）"><a href="#②正态化数据（StandardScaler）" class="headerlink" title="②正态化数据（StandardScaler）"></a>②正态化数据（StandardScaler）</h3><p>​     使用算法：线性回归、逻辑回归、判别分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line">transformer = StandardScaler().fit(X)</span><br><span class="line">newX = transformer.transform(X)</span><br><span class="line">set_printoptions(precision=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(newX)</span><br></pre></td></tr></table></figure><h3 id="③标准化数据（Normalizer）常用"><a href="#③标准化数据（Normalizer）常用" class="headerlink" title="③标准化数据（Normalizer）常用"></a>③标准化数据（Normalizer）<strong>常用</strong></h3><p>​    使用模型：神经网络、K近邻算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> Normalizer</span><br><span class="line"></span><br><span class="line">transformer = Normalizer().fit(X)</span><br><span class="line">newX = transformer.transform(X)</span><br><span class="line">set_printoptions(precision=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(newX)</span><br></pre></td></tr></table></figure><h3 id="④二值数据（Binarizer）"><a href="#④二值数据（Binarizer）" class="headerlink" title="④二值数据（Binarizer）"></a>④二值数据（Binarizer）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> Binarizer</span><br><span class="line"></span><br><span class="line">transformer = Binarizer(threshold=<span class="number">0.0</span>).fit(X)</span><br><span class="line">newX = transformer.transform(X)</span><br><span class="line">set_printoptions(precision=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(newX)</span><br></pre></td></tr></table></figure><h2 id="数据特征选定"><a href="#数据特征选定" class="headerlink" title="数据特征选定"></a>数据特征选定</h2><h3 id="①单变量特征选定-SelectKBest类"><a href="#①单变量特征选定-SelectKBest类" class="headerlink" title="①单变量特征选定(SelectKBest类)"></a>①单变量特征选定(SelectKBest类)</h3><p>​    理论：经典的卡方检验是检验定性自变量对定性自变量的相关性的方法。</p><p>​    多用于检验</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> set_printoptions</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> SelectKBest</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> chi2</span><br><span class="line"></span><br><span class="line">test = SelectKBest(score_func=chi2, k=<span class="number">4</span>)</span><br><span class="line">fit = test.fit(X, Y)</span><br><span class="line">set_printoptions(precision=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(fit.scores_)</span><br><span class="line">features = fit.transform(X)</span><br><span class="line"><span class="built_in">print</span>(features)</span><br></pre></td></tr></table></figure><h3 id="②递归特征消除-常用"><a href="#②递归特征消除-常用" class="headerlink" title="②递归特征消除    常用"></a>②递归特征消除    <strong>常用</strong></h3><p>​    理论：用基模型筛选特征</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#逻辑回归为例</span></span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> RFE</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line">model = LogisticRegression()</span><br><span class="line">rfe = RFE(model, n_features_to_select=<span class="number">3</span>)</span><br><span class="line">fit = rfe.fit(X,Y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;特征个数:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(fit.n_features_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;被选特个数:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(fit.support_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;特征排名:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(fit.ranking_)</span><br></pre></td></tr></table></figure><h3 id="③主成分分析"><a href="#③主成分分析" class="headerlink" title="③主成分分析"></a>③主成分分析</h3><p>​    理论：主成分分析(PCA) 是使用线性代数来转换压缩数据，通常被称作数据降维，常见的数据降维方法除了PCA(无监督的降维方法)，还有LDA (线性判别分析,有监督的降维方法)，它本身也是一个分类模型。</p><p>​    谨慎使用，合并后的新特征需要解释其意义。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"></span><br><span class="line">pca = PCA(n_components=<span class="number">3</span>)</span><br><span class="line">fit = pca.fit(X)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;解释方差:%s&#x27;</span> % fit.explained_variance_ratio_)</span><br><span class="line"><span class="built_in">print</span>(fit.components_)</span><br></pre></td></tr></table></figure><h3 id="④特征重要性"><a href="#④特征重要性" class="headerlink" title="④特征重要性"></a>④特征重要性</h3><p>​    理论：袋装随机树、随机森林、极端随机算法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> ExtraTreesClassifier</span><br><span class="line"></span><br><span class="line">model = ExtraTreesClassifier()</span><br><span class="line">fit = model.fit(X, Y)</span><br><span class="line"><span class="built_in">print</span>(fit.feature_importances_)</span><br></pre></td></tr></table></figure><h1 id="四、模型"><a href="#四、模型" class="headerlink" title="四、模型"></a>四、模型</h1><p>​    机器学习的解题步骤：</p><pre><code>定义问题：类库导入、数据导入；理解数据：描述性统计、数据可视化；数据准备：数据清洗、特征选取、数据转换；评估算法：分离数据、定义模型评估标准、算法审查、算法比较；优化模型：调参、集合算法；结果部署：验证、生成。</code></pre><h2 id="1-评估算法"><a href="#1-评估算法" class="headerlink" title="(1)评估算法"></a>(1)评估算法</h2><h3 id="①分离数据集和评估数据集"><a href="#①分离数据集和评估数据集" class="headerlink" title="①分离数据集和评估数据集"></a>①分离数据集和评估数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line">test_size = <span class="number">0.33</span></span><br><span class="line">seed = <span class="number">4</span></span><br><span class="line">X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=test_size,</span><br><span class="line">                                                    random_state=seed)</span><br><span class="line">model = LogisticRegression()</span><br><span class="line">model.fit(X_train, Y_train)</span><br><span class="line">result = model.score(X_test, Y_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;算法评估结果： %.3f %%&#x27;</span> % (result * <span class="number">100</span>) )</span><br></pre></td></tr></table></figure><h3 id="②k折交叉验证分离"><a href="#②k折交叉验证分离" class="headerlink" title="②k折交叉验证分离"></a>②k折交叉验证分离</h3><p>​    为了提高模型准确率。</p><p>​    K折交叉验证是将原始数据分成K组（一般是均分），将每个子集数据分别做一次验证集，其余的K-1组子集数 据作为训练集，这样会得到K个模型，再用这K个模型最终的验证集的分类准确率的平均数， 作为此K折交叉验证下分类器的性能指标。K一般大于等于2，实际操作时一般从3开始取值， 只有在原始数据集和数据量小的时候才会尝试取2。K折交叉验证可以有效地避免过学习及欠学习状态的发生，最后得到的结果也比较具有说服力。通常情况下，K的取值为3、5、10.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"></span><br><span class="line">num_fold = <span class="number">10</span></span><br><span class="line">seed = <span class="number">7</span></span><br><span class="line">kfold = KFold(n_splits=num_fold, random_state=seed, shuffle=<span class="literal">True</span>)</span><br><span class="line">model = LogisticRegression(multi_class=<span class="string">&#x27;multinomial&#x27;</span>, max_iter=<span class="number">3000</span>)</span><br><span class="line">result = cross_val_score(model, X, Y, cv=kfold)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;算法结果： %.3f%% (%.3f%%)&quot;</span> % (result.mean() *<span class="number">100</span>, result.std() *<span class="number">100</span>))</span><br></pre></td></tr></table></figure><h3 id="③弃一交叉验证分离"><a href="#③弃一交叉验证分离" class="headerlink" title="③弃一交叉验证分离."></a>③弃一交叉验证分离.</h3><p>​    准确率高，但计算成本高。</p><p>​     如果原始数据有N个样本，那么弃一交叉验证就是N-1个交叉验证，即每个样本单独作为验证 集，其余的N-1个样本作为训练集，所以弃一交叉验证会得到N个模型，用这N个模型最终的 验证集的分类准确率的平均数作为此次弃一交叉验证分类器的性能指标。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> LeaveOneOut</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"></span><br><span class="line">loocv = LeaveOneOut()</span><br><span class="line">model = LogisticRegression(multi_class=<span class="string">&#x27;multinomial&#x27;</span>, max_iter=<span class="number">1100</span>)</span><br><span class="line">result = cross_val_score(model, X, Y, cv=loocv)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;算法评估：%.3f%% (%.3f%%)&quot;</span> % (result.mean()*<span class="number">100</span>, result.std()*<span class="number">100</span>))</span><br></pre></td></tr></table></figure><h3 id="④重复随机评估、训练数据集分离。"><a href="#④重复随机评估、训练数据集分离。" class="headerlink" title="④重复随机评估、训练数据集分离。"></a>④重复随机评估、训练数据集分离。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> ShuffleSplit</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"></span><br><span class="line">n_splits = <span class="number">10</span></span><br><span class="line">test_size = <span class="number">0.33</span></span><br><span class="line">seed = <span class="number">7</span></span><br><span class="line">kfold = ShuffleSplit(n_splits=n_splits, test_size=test_size, random_state=seed)</span><br><span class="line">model = LogisticRegression(multi_class=<span class="string">&#x27;multinomial&#x27;</span>, max_iter=<span class="number">1100</span>)</span><br><span class="line">result = cross_val_score(model, X, Y, cv=kfold)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;算法评估：%.3f%% (%.3f%%)&quot;</span> % (result.mean()*<span class="number">100</span>, result.std()*<span class="number">100</span>))</span><br></pre></td></tr></table></figure><h2 id="2-算法评估"><a href="#2-算法评估" class="headerlink" title="(2)算法评估"></a>(2)算法评估</h2><p>​        寻找最佳的子集算法。重点工作在评估算法和准备数据上，要找到3-5种准确度足够的算法。</p><h3 id="①分类准确度"><a href="#①分类准确度" class="headerlink" title="①分类准确度"></a>①分类准确度</h3><p>​            分类准确度就是算法自动分类正确的样本数除以所有的样本数得出的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = cross_val_score(model, X, Y, cv=kfold)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;算法评估：%.3f%% (%.3f%%)&quot;</span> % (result.mean()*<span class="number">100</span>, result.std()*<span class="number">100</span>))</span><br></pre></td></tr></table></figure><h3 id="②对数损失函数"><a href="#②对数损失函数" class="headerlink" title="②对数损失函数"></a>②对数损失函数</h3><p>​            分类准确度就是算法自动分类正确的样本数除以所有的样本数得出的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num_flods = <span class="number">10</span></span><br><span class="line">seed = <span class="number">7</span></span><br><span class="line">kfold = KFold(n_splits=num_flods, random_state=seed, shuffle=<span class="literal">True</span>)</span><br><span class="line">model = LogisticRegression(multi_class=<span class="string">&#x27;multinomial&#x27;</span>, max_iter=<span class="number">1100</span>)</span><br><span class="line"></span><br><span class="line">Scoring = <span class="string">&#x27;neg_log_loss&#x27;</span></span><br><span class="line">result = cross_val_score(model, X, Y, cv=kfold, scoring=Scoring)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;LogLoss: %.3f (%.3f) &#x27;</span> % (result.mean(), result.std()))</span><br></pre></td></tr></table></figure><h3 id="④AUC图"><a href="#④AUC图" class="headerlink" title="④AUC图"></a>④AUC图</h3><p>​            ROC和AUC是评价分类器的指标。ROC是受试者工作特征曲线(Receiver  OperatingCharacteristic Curve)的简写，又称为感受性曲线(Sensitivity Curve)。得此名的原 因在于曲线上各点反映相同的感受性，它们都是对同一信号刺激的反应，只不过是在几种不 同的判定标准下所得的结果而已。ROC是反映敏感性和特异性连续变量的综合指标，用构图 法揭示敏感性和特异性的相互关系，通过将连续变量设定出多个不同的临界值计算出一系列 敏感性和特异性，再以敏感性为纵坐标、(1-特异性)为横坐标绘制成曲线。AUC是ROC曲线 下的面积(Area Under ROC Curve)的简称，顾名思义，AUC的值就是处于ROC Curve下方的 那部分面积的大小。通常，AUC的值介于0.5到1.0之间，AUC的值越大，诊断准确性越高。 在ROC曲线上，靠近坐标图左上方的点为敏感性和特异性均较高的临界值。</p><p>​    召回率=TP/(TP+FN)，召回率（Recall）又叫敏感性（sensitivity）</p><p>​    特异度（Specificity） = TN/(FP+TN)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"></span><br><span class="line">scoring = <span class="string">&#x27;roc_auc&#x27;</span></span><br><span class="line">result = cross_val_score(model, X, Y, cv=kfold, scoring=scoring)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;AUC %.3f (%.3f)&#x27;</span> %(result.mean(), result.std()))</span><br></pre></td></tr></table></figure><h3 id="⑤混淆矩阵"><a href="#⑤混淆矩阵" class="headerlink" title="⑤混淆矩阵"></a>⑤混淆矩阵</h3><p>​            混淆矩阵的每一列代表了预测类别，每一列的总数表示预测为该类别的数据的数目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line"></span><br><span class="line">test_size = <span class="number">0.33</span></span><br><span class="line">seed = <span class="number">4</span></span><br><span class="line">X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=test_size, random_state=seed)</span><br><span class="line">model = LogisticRegression(multi_class=<span class="string">&#x27;multinomial&#x27;</span>, max_iter=<span class="number">1100</span>)</span><br><span class="line"></span><br><span class="line">model.fit(X_train, Y_train)</span><br><span class="line">predicted = model.predict(X_test)</span><br><span class="line">matrix = confusion_matrix(Y_test, predicted)</span><br><span class="line">classes = [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>]</span><br><span class="line">dataframe = pd.DataFrame(data=matrix, index=classes, columns=classes)</span><br><span class="line"><span class="built_in">print</span>(dataframe)</span><br></pre></td></tr></table></figure><h3 id="⑥结果报告"><a href="#⑥结果报告" class="headerlink" title="⑥结果报告"></a>⑥结果报告</h3><p>​            精确率(precison)： P = TP / (TP + FP) </p><p>​            召回率(recall)： P = TP / (TP + FN) </p><p>​            F1值：同时兼顾了分类模型的精确率和召回率， F1分数可以看作是模型准确率和召 回率的一种加权平均，它的最大值是1，最小值是0，值越大意味着模型越好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"></span><br><span class="line">predicted = model.predict(X_test)</span><br><span class="line">report = classification_report(Y_test, predicted)</span><br><span class="line"><span class="built_in">print</span>(report)</span><br></pre></td></tr></table></figure><h3 id="⑦绝对均值误差"><a href="#⑦绝对均值误差" class="headerlink" title="⑦绝对均值误差"></a>⑦绝对均值误差</h3><p>​            </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scoring = <span class="string">&#x27;neg_mean_absolute_error&#x27;</span></span><br><span class="line">result = cross_val_score(model, X, Y, cv=kfold, scoring=scoring)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;MAE: %.3f (%.3f)&#x27;</span> %(result.mean(), result.std()))</span><br></pre></td></tr></table></figure><h3 id="⑧决定系数（-𝑅-2-）"><a href="#⑧决定系数（-𝑅-2-）" class="headerlink" title="⑧决定系数（$𝑅^2$）"></a>⑧决定系数（$𝑅^2$）</h3><p>​    决定系数（$𝑅^2$） 决定系数，反映因变量的全部变异能通过回归关系被自变量解释的比例。拟合优度越大，自变 量对因变量的解释程度越高，自变量引起的变动占总变动的百分比越高，观察点在回归直线附 近越密集。如𝑅𝑅2为0.8，则表示回归关系可以解释因变量80%的变异。换句话说，如果我们能 控制自变量不变，则因变量的变异程度会减少80%。 决定系数（ 𝑅𝑅2 )的特点： 可决系数是非负的统计量。 可决系数的取值范围：0≤ 𝑅𝑅2 ≤1 可决系数是样本观测值的函数，是因随机抽样而变动的随机变量。为此，对可决系数的统计的 可靠性也应进行检验。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## (3)算法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 分类算法：</span></span><br><span class="line"></span><br><span class="line">● 线性算法 </span><br><span class="line"></span><br><span class="line">​逻辑回归 ```LogisticRegression(multi_class=<span class="string">&#x27;multinomial&#x27;</span>, max_iter=<span class="number">3000</span>)```</span><br><span class="line"></span><br><span class="line">​线性判别分析```LinearDiscriminantAnalysis```</span><br><span class="line"></span><br><span class="line">​ ● 非线性算法 </span><br><span class="line"></span><br><span class="line">​K近邻 ```KNeighborsClassifier```</span><br><span class="line"></span><br><span class="line">​贝叶斯分类器 ```GaussianNB```</span><br><span class="line"></span><br><span class="line">​分类与回归树 ```DecisionTreeClassifier```</span><br><span class="line"></span><br><span class="line">​支持向量```SVC```</span><br><span class="line"></span><br><span class="line"><span class="comment">### 回归算法：</span></span><br><span class="line"></span><br><span class="line">​● 线性回归``` LinearRegression```</span><br><span class="line"></span><br><span class="line">​● 岭回归</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## (4)优化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### ①装袋(Bagging)算法</span></span><br><span class="line"></span><br><span class="line">​先将训练集分离成多个子集，然后通过各个子集训练多个模型。装袋算法是一种提高分类准确率的算法，通过给定组合投票的方式获得最优解。</span><br><span class="line"></span><br><span class="line">​**<span class="number">1.</span> 装袋决策树(Bagged Decision Trees)** </span><br><span class="line"></span><br><span class="line">​装袋决策树装袋算法在**数据具有很大的方差**时非常有效，最常见的例子就是决策树的装袋算法。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> BaggingClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"></span><br><span class="line">num_folds = <span class="number">10</span></span><br><span class="line">seed = <span class="number">7</span></span><br><span class="line">kfold = KFold(n_splits=num_folds, random_state=seed, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">cart = DecisionTreeClassifier()</span><br><span class="line">num_tree = <span class="number">100</span></span><br><span class="line">model = BaggingClassifier(base_estimator=cart, n_estimators=num_tree, random_state=seed)</span><br><span class="line"></span><br><span class="line">result = cross_val_score(model, X, Y, cv=kfold)</span><br><span class="line"><span class="built_in">print</span>(result.mean())</span><br></pre></td></tr></table></figure><p>​    <strong>2. 随机森林(Random Forest)</strong></p><p>​    我的理解：每一棵决策树就是一个精通某一个领域的专家，这样在随机森林中就有了很多个 精通不同领域的专家，对于一个新的问题（新的输入数据)，可以从不同的角度去看待它，最 终由各个专家投票得到结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"></span><br><span class="line">num_tree = <span class="number">100</span></span><br><span class="line">max_features = <span class="number">3</span></span><br><span class="line">model = RandomForestClassifier(n_estimators=num_tree, random_state=seed, max_features=max_features)</span><br></pre></td></tr></table></figure><p>​    <strong>3. 极端随机树(Extra Trees)</strong></p><p>​    随机森林应用的是Bagging模型，而极端随机树是使用所有的训练样本得到每棵决策 树，也就是每棵决策树应用的是相同的全部训练样本。</p><p>​    随机森林应用的是Bagging模型，而极端随机树是使用所有的训练样本得到每棵决策 树，也就是每棵决策树应用的是相同的全部训练样本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> ExtraTreesClassifier</span><br><span class="line"></span><br><span class="line">num_tree = <span class="number">100</span></span><br><span class="line">max_features = <span class="number">7</span></span><br><span class="line">model = ExtraTreesClassifier(n_estimators=num_tree, random_state=seed, max_features=max_features)</span><br></pre></td></tr></table></figure><h3 id="②提升-Boosting-算法"><a href="#②提升-Boosting-算法" class="headerlink" title="②提升(Boosting)算法"></a>②提升(Boosting)算法</h3><p>​    提升算法是一种用来提高弱分类(分类不明显)算法准确度的方法，这种方法先构造一个预测函数系列， 然后以一定的方式将它们组合成一个预测函数。</p><p>​    <strong>1.AdaBoost</strong></p><p>​        一种迭代算法，其核心思想是针对同一个训练集训练不同的分类器 （弱分类器)，然后把这些弱分类器集合起来，构成一个更强的最终分类器（强分类器）.其算法本身是通过改变数据分布来实现的，它根据每次训练集中每个样本的分类是否正 确，以及上次的总体分类的准确率，来确定每个样本的权值。它将修改过权值的新数据集送给下层分类器进行训练，再将每次训练得到的分类器融合 起来，作为最后的决策分类器。使用AdaBoost分类器可以排除一些不必要的训练数据特征，并放在关键的训练数据上面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> AdaBoostClassifier</span><br><span class="line"></span><br><span class="line">num_tree = <span class="number">30</span></span><br><span class="line">model = AdaBoostClassifier(n_estimators=num_tree, random_state=seed)</span><br></pre></td></tr></table></figure><p>​    <strong>2. 随机梯度提升(Stochastic Gradient Boosting)</strong></p><p>​            要找到某个函数的最大值，最好的办法就是沿着该函数的梯度方向探寻。 梯度算子总是指向函数值增长最快的方向。由于梯度提升算法在每次更新数据集时都需要遍历整个数据集，计算复杂度较高，于是 有了一个改进算法一随机梯度提升算法，该算法一次只用一个样本点来更新回归系数， 极大地改善了算法的计算复杂度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> GradientBoostingClassifier</span><br><span class="line"></span><br><span class="line">num_tree = <span class="number">100</span></span><br><span class="line">model = GradientBoostingClassifier(n_estimators=num_tree, random_state=seed)</span><br></pre></td></tr></table></figure><h3 id="③投票-Voting-算法"><a href="#③投票-Voting-算法" class="headerlink" title="③投票(Voting)算法"></a>③投票(Voting)算法</h3><p>​        是一个非常简单的多个机器学习算法的集成算法。投票算法是通过创建两个或多个算法模型，利用投票算法将这些算法包装起来，计算各 个子模型的平均预测状况。在实际的应用中，可以对每个子模型的预测结果增加权重，以提高算法的准确度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> read_csv</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> VotingClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line">cart = DecisionTreeClassifier()</span><br><span class="line">models = []</span><br><span class="line">model_logistic = LogisticRegression()</span><br><span class="line">models.append((<span class="string">&#x27;logistic&#x27;</span>, model_logistic))</span><br><span class="line">model_cart = DecisionTreeClassifier()</span><br><span class="line">models.append((<span class="string">&#x27;cart&#x27;</span>, model_cart))</span><br><span class="line">model_svc = SVC()</span><br><span class="line">models.append((<span class="string">&#x27;svm&#x27;</span>, model_svc))</span><br><span class="line">ensemble_model = VotingClassifier(estimators=models)</span><br><span class="line">result = cross_val_score(ensemble_model, X, Y , cv=kfold)</span><br><span class="line"><span class="built_in">print</span>(result.mean())</span><br></pre></td></tr></table></figure><h2 id="5-调参"><a href="#5-调参" class="headerlink" title="(5)调参"></a>(5)调参</h2><p>​        目的：提高稳定性，减小偏差和方差。</p><p>​        参数有两类：准确度&amp;防止过拟合。</p><h3 id="①网络搜索优化调参"><a href="#①网络搜索优化调参" class="headerlink" title="①网络搜索优化调参"></a>①网络搜索优化调参</h3><p>​        通过遍历已定义参数的列表，来评 估算法的参数，从而找到最优参数。但是，只在自己设置的超参数里选取。一般用于参数&lt;3。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> read_csv</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Ridge</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"></span><br><span class="line">X = array[:, <span class="number">0</span>:<span class="number">8</span>]</span><br><span class="line">Y = array[:, <span class="number">8</span>]</span><br><span class="line">model = Ridge()</span><br><span class="line">param_grid = &#123;<span class="string">&#x27;alpha&#x27;</span> : [<span class="number">1</span>, <span class="number">0.1</span>, <span class="number">0.01</span>, <span class="number">0.001</span>, <span class="number">0</span>]&#125;<span class="comment">#设置遍历的参数</span></span><br><span class="line">grid = GridSearchCV(estimator=model, param_grid=param_grid)</span><br><span class="line">grid.fit(X, Y)</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;最高得分： %.3f&#x27;</span>  % grid.best_score_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;最优参数：%s&#x27;</span> % grid.best_estimator_.alpha)</span><br></pre></td></tr></table></figure><h3 id="②随机搜索优化调参"><a href="#②随机搜索优化调参" class="headerlink" title="②随机搜索优化调参"></a>②随机搜索优化调参</h3><p>​        通过固定次数的迭代，采用随机采样分布的方式搜索合适的参数。</p><p>​        与网格搜索优化参数相比，随机搜索优化参数提供了一种更高效的解决方法（特别是在 参数数量多的情况下），随机搜索优化参数为每个参数定义了一个分布函数，并在该空 间中采样。</p><p>​        一般用于参数&gt;3。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Ridge</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> RandomizedSearchCV</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> uniform</span><br><span class="line"></span><br><span class="line">model = Ridge()</span><br><span class="line">param_grid = &#123;<span class="string">&#x27;alpha&#x27;</span>: uniform()&#125;<span class="comment">#设置遍历的参数</span></span><br><span class="line">grid = RandomizedSearchCV(estimator=model, param_distributions=param_grid, n_iter=<span class="number">100</span>, random_state=<span class="number">7</span>)</span><br><span class="line">grid.fit(X, Y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;最高得分：%.3f&#x27;</span> % grid.best_score_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;最优参数：%s&#x27;</span> % grid.best_estimator_.alpha)</span><br></pre></td></tr></table></figure><h2 id="6-实战"><a href="#6-实战" class="headerlink" title="(6)实战"></a>(6)实战</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入类库</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> arange</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> read_csv</span><br><span class="line"><span class="keyword">from</span> pandas.plotting <span class="keyword">import</span> scatter_matrix</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Lasso</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> ElasticNet</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVR</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> GradientBoostingRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> ExtraTreesRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> AdaBoostRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"></span><br><span class="line"><span class="comment">#导入数据</span></span><br><span class="line">filename = <span class="string">&#x27;housing.csv&#x27;</span></span><br><span class="line">names = [<span class="string">&#x27;CRIM&#x27;</span>, <span class="string">&#x27;ZN&#x27;</span>, <span class="string">&#x27;INDUS&#x27;</span>, <span class="string">&#x27;CHAS&#x27;</span>, <span class="string">&#x27;NOX&#x27;</span>, <span class="string">&#x27;RM&#x27;</span>, <span class="string">&#x27;AGE&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;DIS&#x27;</span>,<span class="string">&#x27;RAD&#x27;</span>, <span class="string">&#x27;TAX&#x27;</span>, <span class="string">&#x27;PRTATIO&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;LSTAT&#x27;</span>, <span class="string">&#x27;MEDV&#x27;</span>]</span><br><span class="line">data = read_csv(filename, names=names, delim_whitespace=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(data.shape)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data.dtypes)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data.head(<span class="number">30</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data.describe())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data.corr(method=<span class="string">&#x27;pearson&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#数据的可视化</span></span><br><span class="line">data.hist(sharex=<span class="literal">False</span>, sharey=<span class="literal">False</span>, xlabelsize=<span class="number">1</span>, ylabelsize=<span class="number">1</span>)</span><br><span class="line">pyplot.show()</span><br><span class="line">data.plot(kind=<span class="string">&#x27;density&#x27;</span>, subplots=<span class="literal">True</span>, layout=(<span class="number">4</span>, <span class="number">4</span>), sharex=<span class="literal">False</span>, fontsize=<span class="number">1</span>)</span><br><span class="line">pyplot.show()</span><br><span class="line"></span><br><span class="line">data.plot(kind=<span class="string">&#x27;box&#x27;</span>, subplots=<span class="literal">True</span>, layout=(<span class="number">4</span>, <span class="number">4</span>),</span><br><span class="line">          sharex=<span class="literal">False</span>, sharey=<span class="literal">False</span>, fontsize=<span class="number">8</span>)</span><br><span class="line">pyplot.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#散点图</span></span><br><span class="line">scatter_matrix(data)</span><br><span class="line">pyplot.show()</span><br><span class="line"><span class="comment"># 矩阵图</span></span><br><span class="line">fig = pyplot.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">cax = ax.matshow(data.corr(), vmin=-<span class="number">1</span>, vmax=<span class="number">1</span>, interpolation=<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">fig.colorbar(cax)</span><br><span class="line">ticks = np.arange(<span class="number">0</span>, <span class="number">14</span>, <span class="number">1</span>)</span><br><span class="line">ax.set_xticks(ticks)</span><br><span class="line">ax.set_yticks(ticks)</span><br><span class="line">ax.set_xticklabels(names)</span><br><span class="line">ax.set_yticklabels(names)</span><br><span class="line">pyplot.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#特征选择， 标准化数据， 正太化数据</span></span><br><span class="line"><span class="comment">#数据分离</span></span><br><span class="line">array = data.values</span><br><span class="line">X =  array[:, <span class="number">0</span>:<span class="number">13</span>]</span><br><span class="line">Y = array[:, <span class="number">13</span>]</span><br><span class="line">validation_size = <span class="number">0.2</span></span><br><span class="line">seed = <span class="number">7</span></span><br><span class="line">num_folds = <span class="number">10</span></span><br><span class="line">scoring = <span class="string">&#x27;neg_mean_squared_error&#x27;</span></span><br><span class="line">X_train, X_validation, Y_train, Y_validation =train_test_split(X, Y,</span><br><span class="line">                                                               test_size=validation_size,</span><br><span class="line">                                                               random_state=seed)</span><br><span class="line"></span><br><span class="line"><span class="comment">#评估算法</span></span><br><span class="line">num_folds = <span class="number">10</span></span><br><span class="line">seed = <span class="number">7</span></span><br><span class="line">scoring = <span class="string">&#x27;neg_mean_squared_error&#x27;</span></span><br><span class="line">models = &#123;&#125;</span><br><span class="line">models[<span class="string">&#x27;LR&#x27;</span>] = LinearRegression()</span><br><span class="line">models[<span class="string">&#x27;LASSO&#x27;</span>] = Lasso()</span><br><span class="line">models[<span class="string">&#x27;EN&#x27;</span>] = ElasticNet()</span><br><span class="line">models[<span class="string">&#x27;KNN&#x27;</span>] = KNeighborsRegressor()</span><br><span class="line">models[<span class="string">&#x27;CART&#x27;</span>] = DecisionTreeRegressor()</span><br><span class="line">models[<span class="string">&#x27;SVM&#x27;</span>] = SVR()</span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> models:</span><br><span class="line">    kfold = KFold(n_splits=num_folds, random_state=seed, shuffle=<span class="literal">True</span>)</span><br><span class="line">    cv_result = cross_val_score(models[key], X_train, Y_train, cv=kfold, scoring=scoring)</span><br><span class="line">    results.append(cv_result)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s: %f(%f)&#x27;</span> %(key, cv_result.mean(), cv_result.std()))</span><br><span class="line"></span><br><span class="line">fig = pyplot.figure()</span><br><span class="line">fig.suptitle(<span class="string">&#x27;Algorithm Comparision&#x27;</span>)</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">pyplot.boxplot(results)</span><br><span class="line">ax.set_xticklabels(models.keys())</span><br><span class="line">pyplot.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 评估算法 - 正态化数据</span></span><br><span class="line">pipelines = &#123;&#125;</span><br><span class="line">pipelines[<span class="string">&#x27;ScalerLR&#x27;</span>] = Pipeline([(<span class="string">&#x27;Scaler&#x27;</span>, StandardScaler()), (<span class="string">&#x27;LR&#x27;</span>, LinearRegression())])</span><br><span class="line">pipelines[<span class="string">&#x27;ScalerLASSO&#x27;</span>] = Pipeline([(<span class="string">&#x27;Scaler&#x27;</span>, StandardScaler()), (<span class="string">&#x27;LASSO&#x27;</span>, Lasso())])</span><br><span class="line">pipelines[<span class="string">&#x27;ScalerEN&#x27;</span>] = Pipeline([(<span class="string">&#x27;Scaler&#x27;</span>, StandardScaler()), (<span class="string">&#x27;EN&#x27;</span>, ElasticNet())])</span><br><span class="line">pipelines[<span class="string">&#x27;ScalerKNN&#x27;</span>] = Pipeline([(<span class="string">&#x27;Scaler&#x27;</span>, StandardScaler()), (<span class="string">&#x27;KNN&#x27;</span>, KNeighborsRegressor())])</span><br><span class="line">pipelines[<span class="string">&#x27;ScalerCART&#x27;</span>] = Pipeline([(<span class="string">&#x27;Scaler&#x27;</span>, StandardScaler()), (<span class="string">&#x27;CART&#x27;</span>, DecisionTreeRegressor())])</span><br><span class="line">pipelines[<span class="string">&#x27;ScalerSVM&#x27;</span>] = Pipeline([(<span class="string">&#x27;Scaler&#x27;</span>, StandardScaler()), (<span class="string">&#x27;SVM&#x27;</span>, SVR())])</span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> pipelines:</span><br><span class="line">    kfold = KFold(n_splits=num_folds, random_state=seed, shuffle=<span class="literal">True</span>)</span><br><span class="line">    cv_result = cross_val_score(pipelines[key], X_train, Y_train, cv=kfold, scoring=scoring)</span><br><span class="line">    results.append(cv_result)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s: %f (%f)&#x27;</span> % (key, cv_result.mean(), cv_result.std()))</span><br><span class="line"><span class="comment">#评估算法 - 箱线图</span></span><br><span class="line">fig = pyplot.figure()</span><br><span class="line">fig.suptitle(<span class="string">&#x27;Algorithm Comparison&#x27;</span>)</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">pyplot.boxplot(results)</span><br><span class="line">ax.set_xticklabels(pipelines.keys())</span><br><span class="line">pyplot.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#调参</span></span><br><span class="line">scaler = StandardScaler().fit(X_train)</span><br><span class="line">rescalerX = scaler.transform(X_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># rescaler = StandardScaler().fit_transform(X_train)</span></span><br><span class="line">para_grid = &#123;<span class="string">&#x27;n_neighbores&#x27;</span>: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">21</span>]&#125;</span><br><span class="line"></span><br><span class="line">model = KNeighborsRegressor()</span><br><span class="line">kfold = KFold(n_splits=num_folds, random_state=seed, shuffle=<span class="literal">True</span>)</span><br><span class="line">grid = GridSearchCV(estimator=model, param_grid=para_grid, scoring=scoring, cv=kfold)</span><br><span class="line">grid_result = grid.fit(X=rescalerX, y=Y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;最优： %s 使用%s&#x27;</span> %(grid_result.best_score_, grid_result.best_params_))</span><br><span class="line">cv_results = <span class="built_in">zip</span>(grid_result.cv_results_[<span class="string">&#x27;mean_test_score&#x27;</span>],</span><br><span class="line">                 grid_result.cv_results_[<span class="string">&#x27;std_test_score&#x27;</span>],</span><br><span class="line">                 grid_result.cv_results_[<span class="string">&#x27;params&#x27;</span>])</span><br><span class="line"><span class="keyword">for</span> mean, std, param <span class="keyword">in</span> cv_results:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%f(%f) with %r&#x27;</span> %(mean, std, param))</span><br><span class="line"></span><br><span class="line">scaler = StandardScaler().fit(X_train)</span><br><span class="line">rescaledX = scaler.transform(X_train)</span><br><span class="line">param_grid = &#123;<span class="string">&#x27;n_neighbors&#x27;</span>: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">21</span>]&#125;</span><br><span class="line">model = KNeighborsRegressor()</span><br><span class="line">kfold = KFold(n_splits=num_folds, random_state=seed, shuffle=<span class="literal">True</span>)</span><br><span class="line">grid = GridSearchCV(estimator=model, param_grid=param_grid, scoring=scoring, cv=kfold)</span><br><span class="line">grid_result = grid.fit(X=rescaledX, y=Y_train)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;最优：%s 使用%s&#x27;</span> % (grid_result.best_score_, grid_result.best_params_))</span><br><span class="line">cv_results = <span class="built_in">zip</span>(grid_result.cv_results_[<span class="string">&#x27;mean_test_score&#x27;</span>],</span><br><span class="line">                 grid_result.cv_results_[<span class="string">&#x27;std_test_score&#x27;</span>],</span><br><span class="line">                 grid_result.cv_results_[<span class="string">&#x27;params&#x27;</span>])</span><br><span class="line"><span class="keyword">for</span> mean, std, param <span class="keyword">in</span> cv_results:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%f (%f) with %r&#x27;</span> % (mean, std, param))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#集成算法</span></span><br><span class="line">ensembles = &#123;&#125;</span><br><span class="line">ensembles[<span class="string">&#x27;ScaledAB&#x27;</span>] = Pipeline([(<span class="string">&#x27;Scaler&#x27;</span>, StandardScaler()), (<span class="string">&#x27;AB&#x27;</span>, AdaBoostRegressor())])</span><br><span class="line">ensembles[<span class="string">&#x27;ScaledAB-KNN&#x27;</span>] = Pipeline([(<span class="string">&#x27;Scaler&#x27;</span>, StandardScaler()),</span><br><span class="line">                                      (<span class="string">&#x27;ABKNN&#x27;</span>, AdaBoostRegressor(base_estimator=KNeighborsRegressor(n_neighbors=<span class="number">1</span>)))])</span><br><span class="line">ensembles[<span class="string">&#x27;ScaledAB-LR&#x27;</span>] = Pipeline([(<span class="string">&#x27;Scaler&#x27;</span>, StandardScaler()),</span><br><span class="line">                                     (<span class="string">&#x27;ABLR&#x27;</span>, AdaBoostRegressor(LinearRegression()))])</span><br><span class="line">ensembles[<span class="string">&#x27;ScaledRFR&#x27;</span>] = Pipeline([(<span class="string">&#x27;Scaler&#x27;</span>, StandardScaler()),</span><br><span class="line">                                   (<span class="string">&#x27;RFR&#x27;</span>, RandomForestRegressor())])</span><br><span class="line">ensembles[<span class="string">&#x27;ScaledETR&#x27;</span>] = Pipeline([(<span class="string">&#x27;Scaler&#x27;</span>, StandardScaler()),</span><br><span class="line">                                   (<span class="string">&#x27;ETR&#x27;</span>, ExtraTreesRegressor())])</span><br><span class="line">ensembles[<span class="string">&#x27;ScaledGBR&#x27;</span>] = Pipeline([(<span class="string">&#x27;Scaler&#x27;</span>, StandardScaler()),</span><br><span class="line">                                  (<span class="string">&#x27;RBR&#x27;</span>, GradientBoostingRegressor())])</span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> ensembles:</span><br><span class="line">    kfold = KFold(n_splits=num_folds, random_state=seed, shuffle=<span class="literal">True</span>)</span><br><span class="line">    cv_result = cross_val_score(ensembles[key], X_train, Y_train, cv=kfold, scoring=scoring)</span><br><span class="line">    results.append(cv_result)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s: %f (%f)&#x27;</span> % (key, cv_result.mean(), cv_result.std()))</span><br><span class="line"></span><br><span class="line"><span class="comment">#集成算法——箱线图</span></span><br><span class="line">fig = pyplot.figure()</span><br><span class="line">fig.suptitle(<span class="string">&#x27;Comparison&#x27;</span>)</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">pyplot.boxplot(results)</span><br><span class="line">ax.set_xticklabels(ensembles.keys())</span><br><span class="line">pyplot.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#集成算法调参 n_estimators</span></span><br><span class="line">caler = StandardScaler().fit(X_train)</span><br><span class="line">rescaledX = scaler.transform(X_train)</span><br><span class="line">param_grid = &#123;<span class="string">&#x27;n_estimators&#x27;</span>:[<span class="number">10</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>, <span class="number">600</span>,</span><br><span class="line">                              <span class="number">700</span>, <span class="number">800</span>, <span class="number">900</span>, <span class="number">950</span>]&#125;</span><br><span class="line">model = GradientBoostingRegressor()</span><br><span class="line">kfold = KFold(n_splits=num_folds, random_state=seed, shuffle=<span class="literal">True</span>)</span><br><span class="line">grid = GridSearchCV(estimator=model, param_grid=param_grid, scoring=scoring, cv=kfold)</span><br><span class="line">grid_result = grid.fit(X=rescaledX, y=Y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;最优： %s 使用 %s&#x27;</span> % (grid_result.best_score_, grid_result.best_params_))</span><br><span class="line"></span><br><span class="line"><span class="comment">#集成算法——ET调参</span></span><br><span class="line">scaler = StandardScaler().fit(X_train)</span><br><span class="line">rescaledX = scaler.transform(X_train)</span><br><span class="line">param_grid = &#123;<span class="string">&#x27;n_estimators&#x27;</span>:[<span class="number">10</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>, <span class="number">600</span>,</span><br><span class="line">                              <span class="number">700</span>, <span class="number">800</span>, <span class="number">900</span>, <span class="number">950</span>]&#125;</span><br><span class="line">model = ExtraTreesRegressor()</span><br><span class="line">kfold = KFold(n_splits=num_folds, random_state=seed, shuffle=<span class="literal">True</span>)</span><br><span class="line">grid = GridSearchCV(estimator=model, param_grid=param_grid, scoring=scoring, cv=kfold)</span><br><span class="line">grid_result = grid.fit(X=rescaledX, y=Y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;最优： %s 使用 %s&#x27;</span> % (grid_result.best_score_, grid_result.best_params_))</span><br><span class="line"></span><br><span class="line"><span class="comment">#模型的确立</span></span><br><span class="line">caler = StandardScaler().fit(X_train)</span><br><span class="line">rescaledX = scaler.transform(X_train)</span><br><span class="line">gbr = ExtraTreesRegressor(n_estimators=<span class="number">600</span>)</span><br><span class="line">gbr.fit(X=rescaledX, y=Y_train)</span><br><span class="line"><span class="comment">#评估算法</span></span><br><span class="line">rescaledX_validation = scaler.transform(X_validation)</span><br><span class="line">predictions = gbr.predict(rescaledX_validation)</span><br><span class="line"><span class="built_in">print</span>(mean_squared_error(Y_validation, predictions))</span><br><span class="line">x_new =[<span class="number">1</span>, <span class="number">2</span>, ]</span><br></pre></td></tr></table></figure><p>参考资料：</p><p><a href="https://www.bilibili.com/video/BV1Hh4y1w7fZ/?spm_id_from=333.999.0.0&amp;vd_source=15aaf2f3032abe28c98a76535d8c050b">Python数学建模与分析：基础入门、数据处理、算法编程、高级绘图、建模实战！bilibili</a></p><h1 id="五、绘图"><a href="#五、绘图" class="headerlink" title="五、绘图"></a>五、绘图</h1><h2 id="1-箱型图"><a href="#1-箱型图" class="headerlink" title="(1)箱型图"></a>(1)箱型图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">data = pandas.read_excel(<span class="string">&#x27;time.xlsx&#x27;</span> , index_col=<span class="string">&#x27;日期&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data.boxplot()<span class="comment">#简单方式</span></span><br><span class="line"></span><br><span class="line">data.boxplot(sym=<span class="string">&#x27;r*&#x27;</span>,vert=<span class="literal">False</span>,patch_artist=<span class="literal">True</span>,meanline=<span class="literal">False</span>,showmeans=<span class="literal">True</span>)<span class="comment">#横着</span></span><br><span class="line"></span><br><span class="line">plt.boxplot(x = data, <span class="comment"># 指定绘制箱线图的数据</span></span><br><span class="line">         whis = <span class="number">1.5</span>, <span class="comment"># 指定1.5倍的四分位差</span></span><br><span class="line">         widths = <span class="number">0.7</span>, <span class="comment"># 指定箱线图的宽度为0.8</span></span><br><span class="line">         patch_artist = <span class="literal">True</span>, <span class="comment"># 指定需要填充箱体颜色</span></span><br><span class="line">         showmeans = <span class="literal">True</span>, <span class="comment"># 指定需要显示均值</span></span><br><span class="line">         boxprops = &#123;<span class="string">&#x27;facecolor&#x27;</span>:<span class="string">&#x27;steelblue&#x27;</span>&#125;, <span class="comment"># 指定箱体的填充色为铁蓝色</span></span><br><span class="line">        <span class="comment"># 指定异常点的填充色、边框色和大小</span></span><br><span class="line">         flierprops = &#123;<span class="string">&#x27;markerfacecolor&#x27;</span>:<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;markeredgecolor&#x27;</span>:<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;markersize&#x27;</span>:<span class="number">4</span>&#125;, </span><br><span class="line">         <span class="comment"># 指定均值点的标记符号（菱形）、填充色和大小</span></span><br><span class="line">        meanprops = &#123;<span class="string">&#x27;marker&#x27;</span>:<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;markerfacecolor&#x27;</span>:<span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;markersize&#x27;</span>:<span class="number">4</span>&#125;, </span><br><span class="line">         medianprops = &#123;<span class="string">&#x27;linestyle&#x27;</span>:<span class="string">&#x27;--&#x27;</span>,<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;orange&#x27;</span>&#125;, <span class="comment"># 指定中位数的标记符号（虚线）和颜色</span></span><br><span class="line">         labels = [<span class="string">&#x27;&#x27;</span>] <span class="comment"># 去除箱线图的x轴刻度值</span></span><br><span class="line">         )</span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除异常值</span></span><br><span class="line"><span class="comment"># 计算下四分位数和上四分位</span></span><br><span class="line">Q1 = data[<span class="string">&#x27;销量&#x27;</span>].quantile(q = <span class="number">0.25</span>)</span><br><span class="line">Q3 = data[<span class="string">&#x27;销量&#x27;</span>].quantile(q = <span class="number">0.75</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于1.5倍的四分位差计算上下须对应的值</span></span><br><span class="line">low_whisker = Q1 - <span class="number">1.5</span>*(Q3 - Q1)</span><br><span class="line">up_whisker = Q3 + <span class="number">1.5</span>*(Q3 - Q1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 寻找异常点</span></span><br><span class="line">data[<span class="string">&#x27;销量&#x27;</span>][(data[<span class="string">&#x27;销量&#x27;</span>] &gt; up_whisker) | (data[<span class="string">&#x27;销量&#x27;</span>] &lt; low_whisker)]</span><br></pre></td></tr></table></figure><h2 id="2-正太分布图"><a href="#2-正太分布图" class="headerlink" title="(2)正太分布图"></a>(2)正太分布图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入外部数据</span></span><br><span class="line">pay_ratio = pd.read_excel(<span class="string">r&#x27;time.xlsx&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">35</span>, <span class="number">6</span>))</span><br><span class="line"><span class="comment"># 绘制单条折线图，并在折线图的基础上添加点图</span></span><br><span class="line">plt.plot(pay_ratio[<span class="string">&#x27;日期&#x27;</span>], pay_ratio[<span class="string">&#x27;销量&#x27;</span>],</span><br><span class="line">         linestyle=<span class="string">&#x27;-&#x27;</span>, linewidth=<span class="number">2</span>, color=<span class="string">&#x27;steelblue&#x27;</span>,</span><br><span class="line">         marker=<span class="string">&#x27;o&#x27;</span>, markersize=<span class="number">4</span>, markeredgecolor=<span class="string">&#x27;black&#x27;</span>, markerfacecolor=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加上下界的水平参考线</span></span><br><span class="line">plt.axhline(y=pay_ratio[<span class="string">&#x27;销量&#x27;</span>].mean() - <span class="number">2</span> * pay_ratio[<span class="string">&#x27;销量&#x27;</span>].std(), linestyle=<span class="string">&#x27;--&#x27;</span>, color=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.axhline(y=pay_ratio[<span class="string">&#x27;销量&#x27;</span>].mean() + <span class="number">2</span> * pay_ratio[<span class="string">&#x27;销量&#x27;</span>].std(), linestyle=<span class="string">&#x27;--&#x27;</span>, color=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日期的显示格式</span></span><br><span class="line">date_format = mpl.dates.DateFormatter(<span class="string">&quot;%m-%d&quot;</span>)</span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.xaxis.set_major_formatter(date_format)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置x轴每个刻度的间隔天数</span></span><br><span class="line">xlocator = mpl.ticker.MultipleLocator(<span class="number">7</span>)</span><br><span class="line">ax.xaxis.set_major_locator(xlocator)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了避免x轴刻度标签的紧凑，将刻度标签旋转45度</span></span><br><span class="line">plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>筛异常点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算判断异常点和极端异常点的临界值</span></span><br><span class="line">outlier_ll = pay_ratio[<span class="string">&#x27;销量&#x27;</span>].mean() - <span class="number">2</span> * pay_ratio[<span class="string">&#x27;销量&#x27;</span>].std()</span><br><span class="line">outlier_ul = pay_ratio[<span class="string">&#x27;销量&#x27;</span>].mean() + <span class="number">2</span> * pay_ratio[<span class="string">&#x27;销量&#x27;</span>].std()</span><br><span class="line"></span><br><span class="line">extreme_outlier_ll = pay_ratio[<span class="string">&#x27;销量&#x27;</span>].mean() - <span class="number">3</span> * pay_ratio[<span class="string">&#x27;销量&#x27;</span>].std()</span><br><span class="line">extreme_outlier_ul = pay_ratio[<span class="string">&#x27;销量&#x27;</span>].mean() + <span class="number">3</span> * pay_ratio[<span class="string">&#x27;销量&#x27;</span>].std()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 寻找异常点</span></span><br><span class="line">pay_ratio.loc[(pay_ratio[<span class="string">&#x27;销量&#x27;</span>] &gt; outlier_ul) | (pay_ratio[<span class="string">&#x27;销量&#x27;</span>] &lt; outlier_ll), [<span class="string">&#x27;日期&#x27;</span>, <span class="string">&#x27;销量&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 寻找极端异常点</span></span><br><span class="line">pay_ratio.loc[(pay_ratio[<span class="string">&#x27;销量&#x27;</span>] &gt; extreme_outlier_ul) | (pay_ratio[<span class="string">&#x27;销量&#x27;</span>] &lt; extreme_outlier_ll), [<span class="string">&#x27;日期&#x27;</span>, <span class="string">&#x27;销量&#x27;</span>]]</span><br></pre></td></tr></table></figure><h1 id="六、聚类分析-无监督分析"><a href="#六、聚类分析-无监督分析" class="headerlink" title="六、聚类分析(无监督分析)"></a>六、聚类分析(无监督分析)</h1><h2 id="1-k-means"><a href="#1-k-means" class="headerlink" title="(1)k-means"></a>(1)k-means</h2><p>​        如果K值未知，可采用肘部法选择K值（假设最大分类数为9类，分别计算分类结果为1-9类的平均离差，离差的提升变化下降最抖时的值为最优聚类数K）</p><p>​    //纯数组X作为输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">1.4889993</span>  <span class="number">4.18741329</span>]</span><br><span class="line"> [<span class="number">3.95221785</span> <span class="number">3.76674812</span>]</span><br><span class="line"> [<span class="number">4.09826192</span> <span class="number">3.95063903</span>]</span><br><span class="line"> [<span class="number">3.65208848</span> <span class="number">4.44383585</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"><span class="keyword">from</span> scipy.spatial.distance <span class="keyword">import</span> cdist</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"> </span><br><span class="line">data=pd.read_excel(<span class="string">&#x27;data.xlsx&#x27;</span>,header=<span class="number">0</span>).iloc[:<span class="number">501</span>,<span class="number">3</span>:<span class="number">5</span>]</span><br><span class="line">X=np.array(data)</span><br><span class="line"> </span><br><span class="line">K=<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">meanDispersions=[]</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> K:</span><br><span class="line">    kemans=KMeans(n_clusters=k)</span><br><span class="line">    kemans.fit(X)</span><br><span class="line">    meanDispersions.append(<span class="built_in">sum</span>(np.<span class="built_in">min</span>(cdist(X,kemans.cluster_centers_,<span class="string">&#x27;euclidean&#x27;</span>),axis=<span class="number">1</span>))/X.shape[<span class="number">0</span>])</span><br><span class="line"> </span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = [<span class="string">&#x27;sans-serif&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.plot(K,meanDispersions,<span class="string">&#x27;bx-&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;平均离差&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;用肘部方法选择K值&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体聚类过程</span></span><br><span class="line">kmeans=KMeans(n_clusters=<span class="number">3</span>)</span><br><span class="line">result=kmeans.fit_predict(X)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">x=[i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> X]</span><br><span class="line">y=[i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> X]</span><br><span class="line">plt.scatter(x,y,c=result,marker=<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;聚类标签&#x27;</span>, kmeans.labels_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;聚类中心&#x27;</span>,kmeans.cluster_centers_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;聚类准则总和&#x27;</span>,kmeans.inertia_)</span><br></pre></td></tr></table></figure><p>​        聚类有效性评价: Rand指数、轮廓系数（Silhouette Coefficient）、Calinski-Harabaz .</p><p>​        轮廓系数∈[-1,1]，越大表示簇间相似度高而不同簇相似度低，即聚类效果越好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> silhouette_samples </span><br><span class="line">  </span><br><span class="line">y=[]</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">23</span>):</span><br><span class="line">    kmeans=KMeans(n_clusters=n)</span><br><span class="line">    kmeans.fit(data)</span><br><span class="line">    label=kmeans.labels_</span><br><span class="line">    lkxs=silhouette_samples(data,label,metric=<span class="string">&#x27;euclidean&#x27;</span>)</span><br><span class="line">    means=np.mean(lkxs)</span><br><span class="line">    y.append(means)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://blog.csdn.net/TSzero/article/details/116265151">用python实现聚类分析<em>聚类分析python代码</em>米法·的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/lk_mm_love/article/details/127040710">十种常用聚类算法（python完整代码演示）<em>python 聚类</em>小刘研CV的博客-CSDN博客</a></p><h1 id="七、评价模型"><a href="#七、评价模型" class="headerlink" title="七、评价模型"></a>七、评价模型</h1><h2 id="1-Topsis"><a href="#1-Topsis" class="headerlink" title="(1)Topsis"></a>(1)Topsis</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">file</span>):</span><br><span class="line">    wb = xlrd.open_workbook(filename=file)<span class="comment">#打开文件</span></span><br><span class="line">    sheet = wb.sheet_by_index(<span class="number">0</span>)<span class="comment">#通过索引获取表格</span></span><br><span class="line">    rows = sheet.nrows <span class="comment"># 获取行数</span></span><br><span class="line">    all_content = []        <span class="comment">#存放读取的数据</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):       <span class="comment">#取第1~第4列对的数据</span></span><br><span class="line">        temp = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,rows) :</span><br><span class="line">            cell = sheet.cell_value(i, j)   <span class="comment">#获取数据 </span></span><br><span class="line">            temp.append(cell)           </span><br><span class="line">        all_content.append(temp)    <span class="comment">#按列添加到结果集中</span></span><br><span class="line">        temp = []</span><br><span class="line">    <span class="keyword">return</span> np.array(all_content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#极小型指标 -&gt; 极大型指标</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dataDirection_1</span>(<span class="params">datas</span>):         </span><br><span class="line"><span class="keyword">return</span> np.<span class="built_in">max</span>(datas)-datas     <span class="comment">#套公式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#中间型指标 -&gt; 极大型指标</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dataDirection_2</span>(<span class="params">datas, x_best</span>):</span><br><span class="line">    temp_datas = datas - x_best</span><br><span class="line">    M = np.<span class="built_in">max</span>(<span class="built_in">abs</span>(temp_datas))</span><br><span class="line">    answer_datas = <span class="number">1</span> - <span class="built_in">abs</span>(datas - x_best) / M     <span class="comment">#套公式</span></span><br><span class="line">    <span class="keyword">return</span> answer_datas</span><br><span class="line">    </span><br><span class="line"><span class="comment">#区间型指标 -&gt; 极大型指标</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dataDirection_3</span>(<span class="params">datas, x_min, x_max</span>):</span><br><span class="line">    M = <span class="built_in">max</span>(x_min - np.<span class="built_in">min</span>(datas), np.<span class="built_in">max</span>(datas) - x_max)</span><br><span class="line">    answer_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> datas:</span><br><span class="line">        <span class="keyword">if</span>(i &lt; x_min):</span><br><span class="line">            answer_list.append(<span class="number">1</span> - (x_min-i) /M)      <span class="comment">#套公式</span></span><br><span class="line">        <span class="keyword">elif</span>( x_min &lt;= i &lt;= x_max):</span><br><span class="line">            answer_list.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            answer_list.append(<span class="number">1</span> - (i - x_max)/M)</span><br><span class="line">    <span class="keyword">return</span> np.array(answer_list)   </span><br><span class="line"> </span><br><span class="line"><span class="comment">#正向化矩阵标准化</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">temp2</span>(<span class="params">datas</span>):</span><br><span class="line">    K = np.power(np.<span class="built_in">sum</span>(<span class="built_in">pow</span>(datas,<span class="number">2</span>),axis =<span class="number">1</span>),<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,K.size):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,datas[i].size):</span><br><span class="line">            datas[i,j] = datas[i,j] / K[i]      <span class="comment">#套用矩阵标准化的公式</span></span><br><span class="line">    <span class="keyword">return</span> datas</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算得分并归一化</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">temp3</span>(<span class="params">answer2</span>):</span><br><span class="line">    list_max = np.array([np.<span class="built_in">max</span>(answer2[<span class="number">0</span>,:]),np.<span class="built_in">max</span>(answer2[<span class="number">1</span>,:]),np.<span class="built_in">max</span>(answer2[<span class="number">2</span>,:]),np.<span class="built_in">max</span>(answer2[<span class="number">3</span>,:])])  <span class="comment">#获取每一列的最大值</span></span><br><span class="line">    list_min = np.array([np.<span class="built_in">min</span>(answer2[<span class="number">0</span>,:]),np.<span class="built_in">min</span>(answer2[<span class="number">1</span>,:]),np.<span class="built_in">min</span>(answer2[<span class="number">2</span>,:]),np.<span class="built_in">min</span>(answer2[<span class="number">3</span>,:])])  <span class="comment">#获取每一列的最小值</span></span><br><span class="line">    max_list = []       <span class="comment">#存放第i个评价对象与最大值的距离</span></span><br><span class="line">    min_list = []       <span class="comment">#存放第i个评价对象与最小值的距离</span></span><br><span class="line">    answer_list=[]      <span class="comment">#存放评价对象的未归一化得分</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,np.size(answer2,axis = <span class="number">1</span>)):        <span class="comment">#遍历每一列数据</span></span><br><span class="line">        max_sum = <span class="number">0</span></span><br><span class="line">        min_sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> q <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>):                                <span class="comment">#有四个指标</span></span><br><span class="line">            max_sum += np.power(answer2[q,k]-list_max[q],<span class="number">2</span>)     <span class="comment">#按每一列计算Di+</span></span><br><span class="line">            min_sum += np.power(answer2[q,k]-list_min[q],<span class="number">2</span>)     <span class="comment">#按每一列计算Di-</span></span><br><span class="line">        max_list.append(<span class="built_in">pow</span>(max_sum,<span class="number">0.5</span>))</span><br><span class="line">        min_list.append(<span class="built_in">pow</span>(min_sum,<span class="number">0.5</span>))</span><br><span class="line">        answer_list.append(min_list[k]/ (min_list[k] + max_list[k]))    <span class="comment">#套用计算得分的公式 Si = (Di-) / ((Di+) +(Di-))</span></span><br><span class="line">        max_sum = <span class="number">0</span></span><br><span class="line">        min_sum = <span class="number">0</span></span><br><span class="line">    answer = np.array(answer_list)      <span class="comment">#得分归一化</span></span><br><span class="line">    <span class="keyword">return</span> (answer / np.<span class="built_in">sum</span>(answer))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    file = <span class="string">&#x27;C:\\Users\\lenovo\Desktop\\数学建模\\TOPSIS法\\第2讲.TOPSIS法（优劣解距离法）7.17\\代码和例题数据\\20条河流的水质情况数据.xlsx&#x27;</span></span><br><span class="line">    answer1 = read(file)        <span class="comment">#读取文件</span></span><br><span class="line">    answer2 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):       <span class="comment">#按照不同的列，根据不同的指标转换为极大型指标，因为只有四列</span></span><br><span class="line">        answer = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>):             <span class="comment">#本来就是极大型指标，不用转换</span></span><br><span class="line">            answer = answer1[<span class="number">0</span>]             </span><br><span class="line">        <span class="keyword">elif</span>(i == <span class="number">1</span>):                   <span class="comment">#中间型指标</span></span><br><span class="line">            answer = dataDirection_2(answer1[<span class="number">1</span>],<span class="number">7</span>)</span><br><span class="line">        <span class="keyword">elif</span>(i==<span class="number">2</span>):                     <span class="comment">#极小型指标</span></span><br><span class="line">            answer = dataDirection_1(answer1[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">else</span>:                           <span class="comment">#范围型指标</span></span><br><span class="line">            answer = dataDirection_3(answer1[<span class="number">3</span>],<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line">        answer2.append(answer)</span><br><span class="line">    answer2 = np.array(answer2)         <span class="comment">#将list转换为numpy数组</span></span><br><span class="line">    answer3 = temp2(answer2)            <span class="comment">#数组正向化</span></span><br><span class="line">    answer4 = temp3(answer3)            <span class="comment">#标准化处理去钢</span></span><br><span class="line">    data = pd.DataFrame(answer4)        <span class="comment">#计算得分</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#将得分输出到excel表格中</span></span><br><span class="line">    writer = pd.ExcelWriter(<span class="string">&#x27;A.xlsx&#x27;</span>)<span class="comment"># 写入Excel文件</span></span><br><span class="line">    data.to_excel(writer, <span class="string">&#x27;page_1&#x27;</span>, float_format=<span class="string">&#x27;%.5f&#x27;</span>)<span class="comment"># ‘page_1’是写入excel的sheet名</span></span><br><span class="line">    writer.save()</span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://blog.csdn.net/weixin_41799019/article/details/97611462">Python实现TOPSIS分析法（优劣解距离法）_phythontopsis分析_XHHP的博客-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/37738503">TOPSIS法(优劣解距离法)介绍及 python3 实现 - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据预处理</title>
      <link href="/2023/08/03/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/"/>
      <url>/2023/08/03/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="一、数据预处理"><a href="#一、数据预处理" class="headerlink" title="一、数据预处理"></a>一、数据预处理</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df=pd.read_csv(<span class="string">&#x27;file_name.csv&#x27;</span>)<span class="comment">#读取文件</span></span><br><span class="line">df=pd.read_excel(<span class="string">&#x27;path&#x27;</span>, sheetname = <span class="string">&#x27;sheet1&#x27;</span>, header = <span class="number">0</span>, names = [<span class="string">&#x27;第一列&#x27;</span>,<span class="string">&#x27;第二列&#x27;</span>,<span class="string">&#x27;第三列&#x27;</span>])</span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;path&#x27;</span>,sep = <span class="string">&#x27;,&#x27;</span>, header = <span class="number">0</span>, names = [<span class="string">&#x27;第一列&#x27;</span>,<span class="string">&#x27;第二列&#x27;</span>,<span class="string">&#x27;第三列&#x27;</span>], encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">data = pd.read_table(<span class="string">&#x27;path&#x27;</span>, sep = <span class="string">&#x27;\t&#x27;</span>, header = <span class="literal">None</span>, names = [<span class="string">&#x27;第一列&#x27;</span>,<span class="string">&#x27;第二列&#x27;</span>,<span class="string">&#x27;第三列&#x27;</span>])<span class="comment">#txt文件</span></span><br></pre></td></tr></table></figure><h1 id="数据清洗："><a href="#数据清洗：" class="headerlink" title="数据清洗："></a>数据清洗：</h1><h3 id="删除重复"><a href="#删除重复" class="headerlink" title="删除重复:"></a>删除重复:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df=df.drop_duplicates()<span class="comment">#删除重复行</span></span><br><span class="line">df=df.dropna()<span class="comment">#删除丢失值的行</span></span><br><span class="line">df=df.dropna(axis=<span class="number">1</span>)<span class="comment">#删除丢失值的列</span></span><br></pre></td></tr></table></figure><h3 id="填充丢失值"><a href="#填充丢失值" class="headerlink" title="填充丢失值:"></a>填充丢失值:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df=df.fillna(df.mean())<span class="comment">#平均值填充丢失值</span></span><br><span class="line">df=df.fillna(df.median())<span class="comment">#中位数填充丢失值</span></span><br><span class="line">df=df.fillna(df.mode().iloc[<span class="number">0</span>])<span class="comment">#众数填充丢失值</span></span><br><span class="line">df=df.fillna(method=<span class="string">&#x27;ffill&#x27;</span>)<span class="comment">#前一个值填充丢失值</span></span><br><span class="line">df=df.fillna(method=<span class="string">&#x27;bfill&#x27;</span>)<span class="comment">#后一个值填充丢失值</span></span><br></pre></td></tr></table></figure><h1 id="数据转换："><a href="#数据转换：" class="headerlink" title="数据转换："></a>数据转换：</h1><h2 id="归一化-amp-标准化"><a href="#归一化-amp-标准化" class="headerlink" title="归一化&amp;标准化:"></a>归一化&amp;标准化:</h2><p>调整特征的数值范围[0,1]，或者正态分布(均值0，标准差1)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler, StandardScaler</span><br><span class="line"></span><br><span class="line">data=&#123;<span class="string">&#x27;ages&#x27;</span>=[<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>]&#125;</span><br><span class="line">df=pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line">min_max_scaler=MinMaxScaler()<span class="comment">#创建对象</span></span><br><span class="line">standard_sacler=StandardScaler()</span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;ages_normalized&#x27;</span>]=min_max_scaler.fit_transformer(df[[<span class="string">&#x27;ages&#x27;</span>]])</span><br><span class="line">df[<span class="string">&#x27;ages_standardized&#x27;</span>]=standard_sacler.fit_transformer(df[[<span class="string">&#x27;ages&#x27;</span>]])</span><br></pre></td></tr></table></figure><h1 id="独热编码："><a href="#独热编码：" class="headerlink" title="独热编码："></a>独热编码：</h1><p>分类变量→数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data=&#123;<span class="string">&#x27;颜色&#x27;</span>:[<span class="string">&#x27;红色&#x27;</span>,<span class="string">&#x27;绿色&#x27;</span>,<span class="string">&#x27;蓝色&#x27;</span>，<span class="string">&#x27;红色&#x27;</span>,<span class="string">&#x27;绿色&#x27;</span>,<span class="string">&#x27;蓝色&#x27;</span>]&#125;</span><br><span class="line">df=pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line">df=pd.get_dummies(df,columns=[<span class="string">&#x27;颜色&#x27;</span>])<span class="comment">#使用get_dummies()</span></span><br></pre></td></tr></table></figure><h1 id="读取文件目录："><a href="#读取文件目录：" class="headerlink" title="读取文件目录："></a>读取文件目录：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#base_path=&quot;TIMI/TRAIN/&quot;</span></span><br><span class="line"><span class="comment">#with open(&quot;train.scp&quot;,&#x27;wt&#x27;,encoding=&#x27;utf-8&#x27;) as f:</span></span><br><span class="line">  </span><br><span class="line">base_path=<span class="string">&quot;TIMI/TEST/&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.scp&quot;</span>,<span class="string">&#x27;wt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  <span class="keyword">for</span> root,dirs,files <span class="keyword">in</span> os.walk(base_path):</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">      file_name=os.path.join(root,file)</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> file_name.endswitch(<span class="string">&quot;.WAV&quot;</span>):</span><br><span class="line">        <span class="built_in">print</span>(file_name)</span><br><span class="line">        f.write(<span class="string">&quot;%s\n&quot;</span>%file_name)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数模五一B</title>
      <link href="/2023/08/01/%E6%95%B0%E6%A8%A1%E4%BA%94%E4%B8%80B/"/>
      <url>/2023/08/01/%E6%95%B0%E6%A8%A1%E4%BA%94%E4%B8%80B/</url>
      
        <content type="html"><![CDATA[<h1 id="Analysis："><a href="#Analysis：" class="headerlink" title="Analysis："></a>Analysis：</h1><h2 id="一：评价类，topsis模型"><a href="#一：评价类，topsis模型" class="headerlink" title="一：评价类，topsis模型"></a>一：评价类，topsis模型</h2><p>参考资料：</p><p><a href="https://www.bilibili.com/video/BV1R94y1m7jK/?spm_id_from=333.788.top_right_bar_window_history.content.click">小白快速上手熵权Topsis（原理+实战）_哔哩哔哩_bilibili</a></p><p><a href="https://zhuanlan.zhihu.com/p/564302492">数学建模——常考评价类模型介绍 - 知乎 (zhihu.com)</a></p><h2 id="二、三：预测类问题，ARIMA时间序列分析"><a href="#二、三：预测类问题，ARIMA时间序列分析" class="headerlink" title="二、三：预测类问题，ARIMA时间序列分析"></a>二、三：预测类问题，ARIMA时间序列分析</h2><p>参考资料：</p><p><a href="https://zhuanlan.zhihu.com/p/60648709">时间序列分析（2） ARIMA 模型 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/43771241">用ARIMA构建时间序列模型（附Python 和R代码） - 知乎 (zhihu.com)</a></p><p><a href="https://www.bilibili.com/video/BV1c5411971t/?spm_id_from=333.999.0.0&amp;vd_source=15aaf2f3032abe28c98a76535d8c050b">小白快速上手时间序列ARIMA（原理+实战）_哔哩哔哩_bilibili</a></p><h6 id="Q-LSTM也可用？是否鸡肋？"><a href="#Q-LSTM也可用？是否鸡肋？" class="headerlink" title="Q: LSTM也可用？是否鸡肋？"></a>Q: <em>LSTM也可用？是否鸡肋？</em></h6><p>A: <a href="https://zhuanlan.zhihu.com/p/455008183">ARIMA时间序列与LSTM神经网络的对比 - 知乎 (zhihu.com)</a></p><h2 id="四：图论，最短路算法"><a href="#四：图论，最短路算法" class="headerlink" title="四：图论，最短路算法"></a>四：图论，最短路算法</h2><p>本题中，传统最短路算法即可求解。因为图已经给出，边的权值也可以计算。</p><p>（进阶：<strong>最小费用最大流</strong>）</p><h6 id="软件？——Graphi"><a href="#软件？——Graphi" class="headerlink" title="软件？——Graphi"></a><em>软件？</em>——Graphi</h6><h2 id="五：数学统计问题"><a href="#五：数学统计问题" class="headerlink" title="五：数学统计问题"></a>五：数学统计问题</h2><p>固定需求常数：（均值-标准差）/2；决策树？</p><h6 id="如何验证该常数的准确性？"><a href="#如何验证该常数的准确性？" class="headerlink" title="如何验证该常数的准确性？"></a><em>如何验证该常数的准确性？</em></h6><p>非固定需求常数：实际运输量-固定需求常数。</p><h6 id="如何理解非固定需求概率分布估计方法？"><a href="#如何理解非固定需求概率分布估计方法？" class="headerlink" title="如何理解非固定需求概率分布估计方法？"></a><em>如何理解非固定需求概率分布估计方法？</em></h6><h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions:"></a>Questions:</h2><ol><li>归一化处理的注意事项，尤其是评价类问题；</li><li>模型评价和验证；</li><li>规划类问题还没有遇到。</li></ol><p><img src="https://pic.imgdb.cn/item/64c8a7761ddac507cca7a647.webp" alt="数模模型总结"></p><h1 id="Request："><a href="#Request：" class="headerlink" title="Request："></a>Request：</h1><ol><li><p>每类问题至少拿得出手一个模型。</p></li><li><p>名表模型的优缺点，该舍舍，该用用。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何拿到导师的超算（4090）</title>
      <link href="/2023/07/01/%E5%A6%82%E4%BD%95%E6%8B%BF%E5%88%B0%E5%AF%BC%E5%B8%88%E7%9A%84%E8%B6%85%E7%AE%97%EF%BC%884090%EF%BC%89/"/>
      <url>/2023/07/01/%E5%A6%82%E4%BD%95%E6%8B%BF%E5%88%B0%E5%AF%BC%E5%B8%88%E7%9A%84%E8%B6%85%E7%AE%97%EF%BC%884090%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="如何拿到导师的超算-4090😂"><a href="#如何拿到导师的超算-4090😂" class="headerlink" title="如何拿到导师的超算(4090😂)"></a>如何拿到导师的超算(4090😂)</h1><h2 id="一、登录服务器及基础工作"><a href="#一、登录服务器及基础工作" class="headerlink" title="一、登录服务器及基础工作"></a>一、登录服务器及基础工作</h2><ol><li><p>登录：Vscode内安装Remote SSH拓展，在右侧远程资源管理器内的SSH下的主机内新建一个账户，账户写好端口、账号、密码，然后登录。一般情况下服务器内应该配好了Slurm。记得给自己空白的分区下安装拓展，直接用vscode就行。</p></li><li><p>修改密码：命令 <code>passwd 用户名</code> 修改。设密码是为了防挖矿。</p></li><li><p>上传文件：切到被上传文件的目录下，<code>scp -P XXX(你的端口号) -r XXX(文件名) XXX(用户名)@XXX(IP):~/</code>,装了Termius可以桌面式操作上。</p></li><li><p>配置环境：依照CUDA，先安装Anaconda，然后Pytorch</p><p><a href="https://zhuanlan.zhihu.com/p/115428789">PyTorch教程：如何使用Python开发深度学习模型（建议收藏） - 知乎 (zhihu.com)</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 基础学科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机试技巧与STL</title>
      <link href="/2023/05/20/%E6%9C%BA%E8%AF%95%E6%8A%80%E5%B7%A7%E4%B8%8ESTL/"/>
      <url>/2023/05/20/%E6%9C%BA%E8%AF%95%E6%8A%80%E5%B7%A7%E4%B8%8ESTL/</url>
      
        <content type="html"><![CDATA[<h1 id="机试技巧与STL"><a href="#机试技巧与STL" class="headerlink" title="机试技巧与STL"></a>机试技巧与STL</h1><p>[TOC]</p><h2 id="vs2018-快捷键"><a href="#vs2018-快捷键" class="headerlink" title="vs2018 快捷键"></a>vs2018 快捷键</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">CTRL + J                  列出成员 </span><br><span class="line">Ctrl+E,D                  格式化全部代码 </span><br><span class="line">Ctrl+K,F                  格式化选中的代码 </span><br><span class="line">CTRL + SHIFT + E          显示资源视图 </span><br><span class="line">F12                       转到定义 </span><br><span class="line">CTRL + F12                转到声明 </span><br><span class="line">CTRL + ALT + J            对象浏览 </span><br><span class="line">CTRL + ALT + F1           帮助目录 </span><br><span class="line">CTRL + F1                 动态帮助 </span><br><span class="line">CTRL + K, CTRL + C        注释选择的代码 </span><br><span class="line">CTRL + K, CTRL + U        取消对选择代码的注释 </span><br><span class="line">CTRL + U                  转小写 </span><br><span class="line">CTRL + SHIFT + U          转大写 </span><br><span class="line">F5                        运行调试 </span><br><span class="line">CTRL + F5                 运行不调试 </span><br><span class="line">F10                       跨过程序执行 </span><br><span class="line">F11                       单步逐句执行 </span><br></pre></td></tr></table></figure><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><h3 id="标准c库"><a href="#标准c库" class="headerlink" title="标准c库"></a>标准c库</h3><div class="table-container"><table><thead><tr><th>头文件</th><th>说明</th><th>头文件</th><th>说明</th><th>头文件</th><th>说明</th></tr></thead><tbody><tr><td>assert.h</td><td>断言相关</td><td>ctype.h</td><td>字符类型判断</td><td>errno.h</td><td>标准错误机制</td></tr><tr><td>float.h</td><td>浮点限制</td><td>limits.h</td><td>整形限制</td><td>locale.h</td><td>本地化接口</td></tr><tr><td>math.h</td><td>数学函数</td><td>setjmp.h</td><td>非本地跳转</td><td>signal.h</td><td>信号相关</td></tr><tr><td>stdarg.h</td><td>可变参数处理</td><td>stddef.h</td><td>宏和类型定义</td><td>stdio.h</td><td>标准I/O</td></tr><tr><td>stdlib.h</td><td>标准工具库</td><td>string.h</td><td>字符串和内存处理</td><td>time.h</td><td>时间相关</td></tr></tbody></table></div><h3 id="c-STL"><a href="#c-STL" class="headerlink" title="c++ STL"></a>c++ STL</h3><p><strong>using namespace std;</strong></p><div class="table-container"><table><thead><tr><th>头文件</th><th>说明</th><th>头文件</th><th>说明</th><th>头文件</th><th>说明</th></tr></thead><tbody><tr><td>algorithm</td><td>通用算法</td><td>deque</td><td>双端队列</td><td>vector</td><td>向量</td></tr><tr><td>iterator</td><td>迭代器</td><td>stack</td><td>栈</td><td>map</td><td>图（键值对）</td></tr><tr><td>list</td><td>列表</td><td>string</td><td>字符串</td><td>set</td><td>集合</td></tr><tr><td>queue</td><td>队列</td><td>bitset</td><td>bit类</td><td>numeric</td><td>数值算法</td></tr></tbody></table></div><h3 id="常用头"><a href="#常用头" class="headerlink" title="常用头"></a>常用头</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bitset&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;list&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure><h2 id="常用宏定义"><a href="#常用宏定义" class="headerlink" title="常用宏定义"></a>常用宏定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求最大值和最小值</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  MAX(x,y) (((x)&gt;(y)) ? (x) : (y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  MIN(x,y) (((x) &lt; (y)) ? (x) : (y))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//取余</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  mod(x) ((x)%MOD)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//for循环</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  FOR(i,f_start,f_end) for(int i=f_start;i&lt;=f_end;++i) </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回数组元素的个数</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  ARR_SIZE(a)  (sizeof((a))/sizeof((a[0])))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数组</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MT(x,i) memset(x,i,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MEM(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//符号重定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//常见常数</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> eps 1e-12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f <span class="comment">//int最大值</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF_INT = <span class="number">2147483647</span>;</span><br><span class="line"><span class="type">const</span> ll INF_LL = <span class="number">9223372036854775807LL</span>;</span><br><span class="line"><span class="type">const</span> ull INF_ULL = <span class="number">18446744073709551615Ull</span>;</span><br><span class="line"><span class="type">const</span> ll P = <span class="number">92540646808111039LL</span>;</span><br><span class="line"><span class="type">const</span> ll maxn = <span class="number">1e5</span> + <span class="number">10</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Move[<span class="number">4</span>][<span class="number">2</span>] = &#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Move_[<span class="number">8</span>][<span class="number">2</span>] = &#123;<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">InitMember</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> first；</span><br><span class="line">    <span class="type">double</span> second；</span><br><span class="line">    <span class="type">char</span>* third；</span><br><span class="line">    <span class="type">float</span> four;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><h4 id="方法一：定义时赋值"><a href="#方法一：定义时赋值" class="headerlink" title="方法一：定义时赋值"></a>方法一：定义时赋值</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">InitMember</span> test = &#123;<span class="number">-10</span>,<span class="number">3.141590</span>，<span class="string">&quot;method one&quot;</span>，<span class="number">0.25</span>&#125;；</span><br></pre></td></tr></table></figure><h4 id="方法二：定义后逐个赋值"><a href="#方法二：定义后逐个赋值" class="headerlink" title="方法二：定义后逐个赋值"></a>方法二：定义后逐个赋值</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">InitMember</span> test；</span><br><span class="line"></span><br><span class="line">test.first = <span class="number">-10</span>;</span><br><span class="line">test.second = <span class="number">3.141590</span>;</span><br><span class="line">test.third = <span class="string">&quot;method two&quot;</span>;</span><br><span class="line">test.four = <span class="number">0.25</span>;</span><br></pre></td></tr></table></figure><h4 id="方法三：定义时乱序赋值（C-风格）"><a href="#方法三：定义时乱序赋值（C-风格）" class="headerlink" title="方法三：定义时乱序赋值（C++风格）"></a>方法三：定义时乱序赋值（C++风格）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">InitMember</span> test = &#123;</span><br><span class="line">    second：<span class="number">3.141590</span>,</span><br><span class="line">    third：<span class="string">&quot;method three&quot;</span>,</span><br><span class="line">    first：<span class="number">-10</span>,</span><br><span class="line">    four：<span class="number">0.25</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="方法四：构造函数"><a href="#方法四：构造函数" class="headerlink" title="方法四：构造函数"></a>方法四：构造函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//定义图的定点</span><br><span class="line">typedef struct Vertex &#123;</span><br><span class="line">    int id,inDegree,outDegree;</span><br><span class="line">    vector&lt;int&gt; connectors;    //存储节点的后续连接顶点编号</span><br><span class="line">    Vertex() : id(-1),inDegree(0),outDegree(0) &#123;&#125;</span><br><span class="line">    Vertex(int nid) : id(nid),inDegree(0),outDegree(0) &#123;&#125;</span><br><span class="line">&#125; Vertex;</span><br><span class="line"> </span><br><span class="line">//定义Graph的邻接表表示</span><br><span class="line">typedef struct Graph &#123;</span><br><span class="line">    vector&lt;Vertex&gt; vertexs;   //存储定点信息</span><br><span class="line">    int nVertexs;      //计数：邻接数</span><br><span class="line">    bool isDAG;               //标志：是有向图吗</span><br><span class="line"> </span><br><span class="line">    Graph(int n, bool isDAG) : nVertexs(n), isDAG(isDAG) &#123; vertexs.resize(n); &#125;</span><br><span class="line">Graph() : nVertexs(1), isDAG(1) &#123; vertexs.resize(1); &#125;</span><br><span class="line">//向图中添加边</span><br><span class="line">    bool addEdge(int id1, int id2) &#123;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; Graph;</span><br><span class="line"></span><br><span class="line">Graph g(8, false);</span><br></pre></td></tr></table></figure><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;<span class="type">int</span> id;<span class="type">int</span> h;&#125; node;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> node&amp; a,<span class="type">const</span> node &amp; b)&#123;<span class="keyword">return</span> (a.h)&lt;(b.h);&#125;</span><br></pre></td></tr></table></figure><h2 id="c-new的使用"><a href="#c-new的使用" class="headerlink" title="c++new的使用"></a>c++new的使用</h2><h3 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *x = <span class="keyword">new</span> <span class="type">int</span>;       <span class="comment">//开辟一个存放整数的存储空间，返回一个指向该存储空间的地址(即指针)</span></span><br><span class="line"><span class="type">int</span> *a = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">100</span>);  <span class="comment">//开辟一个存放整数的空间，并指定该整数的初值为100，返回一个指向该存储空间的地址</span></span><br><span class="line"><span class="type">char</span> *b = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">10</span>]; <span class="comment">//开辟一个存放字符数组(包括10个元素)的空间，返回首元素的地址</span></span><br><span class="line"><span class="type">float</span> *p=<span class="keyword">new</span> <span class="built_in">float</span> (<span class="number">3.14159</span>);<span class="comment">//开辟一个存放单精度数的空间，并指定该实数的初值为//3.14159，将返回的该空间的地址赋给指针变量p</span></span><br></pre></td></tr></table></figure><h3 id="动态申请列大小固定的二维数组"><a href="#动态申请列大小固定的二维数组" class="headerlink" title="动态申请列大小固定的二维数组"></a>动态申请列大小固定的二维数组</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//列值固定</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXCOL = <span class="number">3</span>;</span><br><span class="line">cin&gt;&gt;row;</span><br><span class="line"><span class="comment">//申请一维数据并将其转成二维数组指针</span></span><br><span class="line"><span class="type">int</span> *pp_arr = <span class="keyword">new</span> <span class="type">int</span>[nRow * MAXCOL];</span><br><span class="line"><span class="built_in">int</span> (*p)[MAXCOL] = (<span class="built_in">int</span>(*)[MAXCOL])pp_arr;</span><br><span class="line"><span class="comment">//此时p[i][j]就可正常使用</span></span><br></pre></td></tr></table></figure><h3 id="动态申请大小不固定的二维数组"><a href="#动态申请大小不固定的二维数组" class="headerlink" title="动态申请大小不固定的二维数组"></a>动态申请大小不固定的二维数组</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cin&gt;&gt;row&gt;&gt;col;</span><br><span class="line"><span class="type">int</span> **p = <span class="keyword">new</span> <span class="type">int</span>*[row];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; row; i ++)</span><br><span class="line">&#123;</span><br><span class="line">    p[i] = <span class="keyword">new</span> <span class="type">int</span>[col];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用STL"><a href="#常用STL" class="headerlink" title="常用STL"></a>常用STL</h2><blockquote><p>参考：</p></blockquote><p><a href="https://blog.csdn.net/f_zyj/article/details/51594851">https://blog.csdn.net/f_zyj/article/details/51594851</a><br><a href="https://download.csdn.net/download/f_zyj/9988653">https://download.csdn.net/download/f_zyj/9988653</a></p><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><h4 id="STL底层说明"><a href="#STL底层说明" class="headerlink" title="STL底层说明"></a>STL底层说明</h4><p>C++ STL 的实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">1.vector      底层数据结构为数组 ，支持快速随机访问</span><br><span class="line"></span><br><span class="line">2.list            底层数据结构为双向链表，支持快速增删</span><br><span class="line"></span><br><span class="line">3.deque       底层数据结构为一个中央控制器和多个缓冲区，详细见STL源码剖析P146，支持首尾（中间不能）快速增删，也支持随机访问</span><br><span class="line">deque是一个双端队列(double-ended queue)，也是在堆中保存内容的.它的保存形式如下:</span><br><span class="line">[堆1] --&gt; [堆2] --&gt;[堆3] --&gt; ...</span><br><span class="line">每个堆保存好几个元素,然后堆和堆之间有指针指向,看起来像是list和vector的结合品.</span><br><span class="line"></span><br><span class="line">4.stack        底层一般用list或deque实现，封闭头部即可，不用vector的原因应该是容量大小有限制，扩容耗时</span><br><span class="line"></span><br><span class="line">5.queue     底层一般用list或deque实现，封闭头部即可，不用vector的原因应该是容量大小有限制，扩容耗时</span><br><span class="line"></span><br><span class="line">（stack和queue其实是适配器,而不叫容器，因为是对容器的再封装）</span><br><span class="line"></span><br><span class="line">6.priority_queue     的底层数据结构一般为vector为底层容器，堆heap为处理规则来管理底层容器实现</span><br><span class="line"></span><br><span class="line">7.set                   底层数据结构为红黑树，有序，不重复</span><br><span class="line"></span><br><span class="line">8.multiset         底层数据结构为红黑树，有序，可重复 </span><br><span class="line"></span><br><span class="line">9.map                底层数据结构为红黑树，有序，不重复</span><br><span class="line"></span><br><span class="line">10.multimap    底层数据结构为红黑树，有序，可重复</span><br><span class="line"></span><br><span class="line">11.hash_set     底层数据结构为hash表，无序，不重复</span><br><span class="line"></span><br><span class="line">12.hash_multiset 底层数据结构为hash表，无序，可重复 </span><br><span class="line"></span><br><span class="line">13.hash_map    底层数据结构为hash表，无序，不重复</span><br><span class="line"></span><br><span class="line">14.hash_multimap 底层数据结构为hash表，无序，可重复 </span><br></pre></td></tr></table></figure><h4 id="CCF-编译出错原因：-不允许C-STL容器嵌套（需要满足相应的格式）"><a href="#CCF-编译出错原因：-不允许C-STL容器嵌套（需要满足相应的格式）" class="headerlink" title="CCF 编译出错原因： 不允许C++STL容器嵌套（需要满足相应的格式）"></a>CCF 编译出错原因： 不允许C++STL容器嵌套（需要满足相应的格式）</h4><p>就是要在后面的“&gt;”之间，必须得有一个空格，如果有多层，那每层都得有一个空格。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map&lt;string,list&lt;string&gt; &gt; user;</span><br></pre></td></tr></table></figure><h3 id="algorithm"><a href="#algorithm" class="headerlink" title="algorithm"></a>algorithm</h3><p><strong>头文件：lgorithm</strong></p><p>函数参数，返回值以及具体的使用方法请自行去头文件找定义！！！</p><h4 id="不修改内容的序列操作"><a href="#不修改内容的序列操作" class="headerlink" title="不修改内容的序列操作"></a>不修改内容的序列操作</h4><div class="table-container"><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>adjacent_find</td><td>查找两个相邻（Adjacent）的等价（Identical）元素</td></tr><tr><td>all_ofC++11</td><td>检测在给定范围中是否所有元素都满足给定的条件</td></tr><tr><td>any_ofC++11</td><td>检测在给定范围中是否存在元素满足给定条件</td></tr><tr><td>count</td><td>返回值等价于给定值的元素的个数</td></tr><tr><td>count_if</td><td>返回值满足给定条件的元素的个数</td></tr><tr><td>equal</td><td>返回两个范围是否相等</td></tr><tr><td>find</td><td>返回第一个值等价于给定值的元素</td></tr><tr><td>find_end</td><td>查找范围<em>A</em>中与范围<em>B</em>等价的子范围最后出现的位置</td></tr><tr><td>find_first_of</td><td>查找范围<em>A</em>中第一个与范围<em>B</em>中任一元素等价的元素的位置</td></tr><tr><td>find_if</td><td>返回第一个值满足给定条件的元素</td></tr><tr><td>find_if_notC++11</td><td>返回第一个值不满足给定条件的元素</td></tr><tr><td>for_each</td><td>对范围中的每个元素调用指定函数</td></tr><tr><td>mismatch</td><td>返回两个范围中第一个元素不等价的位置</td></tr><tr><td>none_ofC++11</td><td>检测在给定范围中是否不存在元素满足给定的条件</td></tr><tr><td>search</td><td>在范围<em>A</em>中查找第一个与范围<em>B</em>等价的子范围的位置</td></tr><tr><td>search_n</td><td>在给定范围中查找第一个连续<em>n</em>个元素都等价于给定值的子范围的位置</td></tr></tbody></table></div><h4 id="修改内容的序列操作"><a href="#修改内容的序列操作" class="headerlink" title="修改内容的序列操作"></a>修改内容的序列操作</h4><div class="table-container"><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>copy</td><td>将一个范围中的元素拷贝到新的位置处</td></tr><tr><td>copy_backward</td><td>将一个范围中的元素按逆序拷贝到新的位置处</td></tr><tr><td>copy_ifC++11</td><td>将一个范围中满足给定条件的元素拷贝到新的位置处</td></tr><tr><td>copy_nC++11</td><td>拷贝 n 个元素到新的位置处</td></tr><tr><td>fill</td><td>将一个范围的元素赋值为给定值</td></tr><tr><td>fill_n</td><td>将某个位置开始的 n 个元素赋值为给定值</td></tr><tr><td>generate</td><td>将一个函数的执行结果保存到指定范围的元素中，用于批量赋值范围中的元素</td></tr><tr><td>generate_n</td><td>将一个函数的执行结果保存到指定位置开始的 n 个元素中</td></tr><tr><td>iter_swap</td><td>交换两个迭代器（Iterator）指向的元素</td></tr><tr><td>moveC++11</td><td>将一个范围中的元素移动到新的位置处</td></tr><tr><td>move_backwardC++11</td><td>将一个范围中的元素按逆序移动到新的位置处</td></tr><tr><td>random_shuffle</td><td>随机打乱指定范围中的元素的位置</td></tr><tr><td>remove</td><td>将一个范围中值等价于给定值的元素删除</td></tr><tr><td>remove_if</td><td>将一个范围中值满足给定条件的元素删除</td></tr><tr><td>remove_copy</td><td>拷贝一个范围的元素，将其中值等价于给定值的元素删除</td></tr><tr><td>remove_copy_if</td><td>拷贝一个范围的元素，将其中值满足给定条件的元素删除</td></tr><tr><td>replace</td><td>将一个范围中值等价于给定值的元素赋值为新的值</td></tr><tr><td>replace_copy</td><td>拷贝一个范围的元素，将其中值等价于给定值的元素赋值为新的值</td></tr><tr><td>replace_copy_if</td><td>拷贝一个范围的元素，将其中值满足给定条件的元素赋值为新的值</td></tr><tr><td>replace_if</td><td>将一个范围中值满足给定条件的元素赋值为新的值</td></tr><tr><td>reverse</td><td>反转排序指定范围中的元素</td></tr><tr><td>reverse_copy</td><td>拷贝指定范围的反转排序结果</td></tr><tr><td>rotate</td><td>循环移动指定范围中的元素</td></tr><tr><td>rotate_copy</td><td>拷贝指定范围的循环移动结果</td></tr><tr><td>shuffleC++11</td><td>用指定的随机数引擎随机打乱指定范围中的元素的位置</td></tr><tr><td>swap</td><td>交换两个对象的值</td></tr><tr><td>swap_ranges</td><td>交换两个范围的元素</td></tr><tr><td>transform</td><td>对指定范围中的每个元素调用某个函数以改变元素的值</td></tr><tr><td>unique</td><td>删除指定范围中的所有连续重复元素，仅仅留下每组等值元素中的第一个元素。</td></tr><tr><td>unique_copy</td><td>拷贝指定范围的唯一化（参考上述的 unique）结果</td></tr></tbody></table></div><h4 id="划分操作"><a href="#划分操作" class="headerlink" title="划分操作"></a>划分操作</h4><div class="table-container"><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>is_partitionedC++11</td><td>检测某个范围是否按指定谓词（Predicate）划分过</td></tr><tr><td>partition</td><td>将某个范围划分为两组</td></tr><tr><td>partition_copyC++11</td><td>拷贝指定范围的划分结果</td></tr><tr><td>partition_pointC++11</td><td>返回被划分范围的划分点</td></tr><tr><td>stable_partition</td><td>稳定划分，两组元素各维持相对顺序</td></tr></tbody></table></div><h4 id="排序操作"><a href="#排序操作" class="headerlink" title="排序操作"></a>排序操作</h4><div class="table-container"><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>is_sortedC++11</td><td>检测指定范围是否已排序</td></tr><tr><td>is_sorted_untilC++11</td><td>返回最大已排序子范围</td></tr><tr><td>nth_element 部份排序指定范围中的元素，使得范围按给定位置处的元素划分</td><td></td></tr><tr><td>partial_sort</td><td>部份排序</td></tr><tr><td>partial_sort_copy</td><td>拷贝部分排序的结果</td></tr><tr><td>sort</td><td>排序</td></tr><tr><td>stable_sort</td><td>稳定排序</td></tr></tbody></table></div><h4 id="二分法查找操作"><a href="#二分法查找操作" class="headerlink" title="二分法查找操作"></a>二分法查找操作</h4><div class="table-container"><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>binary_search</td><td>判断范围中是否存在值等价于给定值的元素</td></tr><tr><td>equal_range</td><td>返回范围中值等于给定值的元素组成的子范围</td></tr><tr><td>lower_bound</td><td>返回指向范围中第一个值大于或等于给定值的元素的迭代器</td></tr><tr><td>upper_bound</td><td>返回指向范围中第一个值大于给定值的元素的迭代器</td></tr></tbody></table></div><h4 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h4><div class="table-container"><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>includes</td><td>判断一个集合是否是另一个集合的子集</td></tr><tr><td>inplace_merge</td><td>就绪合并</td></tr><tr><td>merge   合并</td><td></td></tr><tr><td>set_difference</td><td>获得两个集合的差集</td></tr><tr><td>set_intersection</td><td>获得两个集合的交集</td></tr><tr><td>set_symmetric_difference</td><td>获得两个集合的对称差</td></tr><tr><td>set_union</td><td>获得两个集合的并集</td></tr></tbody></table></div><h4 id="堆操作"><a href="#堆操作" class="headerlink" title="堆操作"></a>堆操作</h4><div class="table-container"><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>is_heap</td><td>检测给定范围是否满足堆结构</td></tr><tr><td>is_heap_untilC++11</td><td>检测给定范围中满足堆结构的最大子范围</td></tr><tr><td>make_heap</td><td>用给定范围构造出一个堆</td></tr><tr><td>pop_heap</td><td>从一个堆中删除最大的元素</td></tr><tr><td>push_heap</td><td>向堆中增加一个元素</td></tr><tr><td>sort_heap</td><td>将满足堆结构的范围排序</td></tr></tbody></table></div><h4 id="最大-最小操作"><a href="#最大-最小操作" class="headerlink" title="最大/最小操作"></a>最大/最小操作</h4><div class="table-container"><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>is_permutationC++11</td><td>判断一个序列是否是另一个序列的一种排序</td></tr><tr><td>lexicographical_compare</td><td>比较两个序列的字典序</td></tr><tr><td>max</td><td>返回两个元素中值最大的元素</td></tr><tr><td>max_element</td><td>返回给定范围中值最大的元素</td></tr><tr><td>min</td><td>返回两个元素中值最小的元素</td></tr><tr><td>min_element</td><td>返回给定范围中值最小的元素</td></tr><tr><td>minmaxC++11</td><td>返回两个元素中值最大及最小的元素</td></tr><tr><td>minmax_elementC++11</td><td>返回给定范围中值最大及最小的元素</td></tr><tr><td>next_permutation</td><td>返回给定范围中的元素组成的下一个按字典序的排列</td></tr><tr><td>prev_permutation</td><td>返回给定范围中的元素组成的上一个按字典序的排列</td></tr></tbody></table></div><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><p><strong>头文件：vector</strong></p><p>在STL的vector头文件中定义了vector（向量容器模版类），vector容器以连续数组的方式存储元素序列，可以将vector看作是以顺序结构实现的线性表。当我们在程序中需要使用动态数组时，vector将会是理想的选择，vector可以在使用过程中动态地增长存储空间。<br>vector模版类需要两个模版参数，第一个参数是存储元素的数据类型，第二个参数是存储分配器的类型，其中第二个参数是可选的，如果不给出第二个参数，将使用默认的分配器</p><p>下面给出几个常用的定义vector向量对象的方法示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; s;      </span><br><span class="line"><span class="comment">//  定义一个空的vector对象，存储的是int类型的元素</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">s</span><span class="params">(n)</span></span>;   </span><br><span class="line"><span class="comment">//  定义一个含有n个int元素的vector对象</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">s</span><span class="params">(first, last)</span></span>; </span><br><span class="line"><span class="comment">//  定义一个vector对象，并从由迭代器first和last定义的序列[first, last)中复制初值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>vector的基本操作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">s[i]                <span class="comment">//  直接以下标方式访问容器中的元素</span></span><br><span class="line">s.<span class="built_in">front</span>()           <span class="comment">//  返回首元素</span></span><br><span class="line">s.<span class="built_in">back</span>()            <span class="comment">//  返回尾元素</span></span><br><span class="line">s.<span class="built_in">push_back</span>(x)      <span class="comment">//  向表尾插入元素x</span></span><br><span class="line">s.<span class="built_in">size</span>()            <span class="comment">//  返回表长</span></span><br><span class="line">s.<span class="built_in">empty</span>()           <span class="comment">//  表为空时，返回真，否则返回假</span></span><br><span class="line">s.<span class="built_in">pop_back</span>()        <span class="comment">//  删除表尾元素</span></span><br><span class="line">s.<span class="built_in">begin</span>()           <span class="comment">//  返回指向首元素的随机存取迭代器</span></span><br><span class="line">s.<span class="built_in">end</span>()             <span class="comment">//  返回指向尾元素的下一个位置的随机存取迭代器</span></span><br><span class="line">s.<span class="built_in">insert</span>(it, val)   <span class="comment">//  向迭代器it指向的元素前插入新元素val</span></span><br><span class="line">s.<span class="built_in">insert</span>(it, n, val)<span class="comment">//  向迭代器it指向的元素前插入n个新元素val</span></span><br><span class="line">s.<span class="built_in">insert</span>(it, first, last)   </span><br><span class="line"><span class="comment">//  将由迭代器first和last所指定的序列[first, last)插入到迭代器it指向的元素前面</span></span><br><span class="line">s.<span class="built_in">erase</span>(it)         <span class="comment">//  删除由迭代器it所指向的元素</span></span><br><span class="line">s.<span class="built_in">erase</span>(first, last)<span class="comment">//  删除由迭代器first和last所指定的序列[first, last)</span></span><br><span class="line">s.<span class="built_in">reserve</span>(n)        <span class="comment">//  预分配缓冲空间，使存储空间至少可容纳n个元素</span></span><br><span class="line">s.<span class="built_in">resize</span>(n)         <span class="comment">//  改变序列长度，超出的元素将会全部被删除，如果序列需要扩展（原空间小于n），元素默认值将填满扩展出的空间</span></span><br><span class="line">s.<span class="built_in">resize</span>(n, val)    <span class="comment">//  改变序列长度，超出的元素将会全部被删除，如果序列需要扩展（原空间小于n），val将填满扩展出的空间</span></span><br><span class="line">s.<span class="built_in">clear</span>()           <span class="comment">//  删除容器中的所有元素</span></span><br><span class="line">s.<span class="built_in">swap</span>(v)           <span class="comment">//  将s与另一个vector对象进行交换</span></span><br><span class="line">s.<span class="built_in">assign</span>(first, last)</span><br><span class="line"><span class="comment">//  将序列替换成由迭代器first和last所指定的序列[first, last)，[first, last)不能是原序列中的一部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  要注意的是，resize操作和clear操作都是对表的有效元素进行的操作，但并不一定会改变缓冲空间的大小</span></span><br><span class="line"><span class="comment">//  另外，vector还有其他的一些操作，如反转、取反等，不再一一列举</span></span><br><span class="line"><span class="comment">//  vector上还定义了序列之间的比较操作运算符（&gt;、&lt;、&gt;=、&lt;=、==、!=），可以按照字典序比较两个序列。</span></span><br><span class="line"><span class="comment">//  还是来看一些示例代码吧……</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 输入个数不定的一组整数，再将这组整数按倒序输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; L;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; x)</span><br><span class="line">    &#123;</span><br><span class="line">        L.<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = L.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; L[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p><strong>头文件：list</strong></p><p>下面给出几个常用的定义list对象的方法示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt;a&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">list&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(n)    <span class="comment">//声明一个n个元素的列表，每个元素都是0</span></span><br><span class="line">list&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(n, m)  <span class="comment">//声明一个n个元素的列表，每个元素都是m</span></span><br><span class="line">list&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(first, last)  <span class="comment">//声明一个列表，其元素的初始值来源于由区间所指定的序列中的元素，first和last是迭代器</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>list的基本操作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">a.<span class="built_in">begin</span>()           <span class="comment">//  返回指向首元素的随机存取迭代器</span></span><br><span class="line">a.<span class="built_in">end</span>()             <span class="comment">//  返回指向尾元素的下一个位置的随机存取迭代器</span></span><br><span class="line">a.<span class="built_in">push_front</span>(x)     <span class="comment">//  向表头插入元素x</span></span><br><span class="line">a.<span class="built_in">push_back</span>(x)      <span class="comment">//  向表尾插入元素x</span></span><br><span class="line">a.<span class="built_in">pop_back</span>()        <span class="comment">//  删除表尾元素</span></span><br><span class="line">a.<span class="built_in">pop_front</span>()       <span class="comment">//  删除表头元素</span></span><br><span class="line">a.<span class="built_in">size</span>()            <span class="comment">//  返回表长</span></span><br><span class="line">a.<span class="built_in">empty</span>()           <span class="comment">//  表为空时，返回真，否则返回假</span></span><br><span class="line">a.<span class="built_in">resize</span>(n)         <span class="comment">//  改变序列长度，超出的元素将会全部被删除，如果序列需要扩展（原空间小于n），元素默认值将填满扩展出的空间</span></span><br><span class="line">a.<span class="built_in">resize</span>(n, val)    <span class="comment">//  改变序列长度，超出的元素将会全部被删除，如果序列需要扩展（原空间小于n），val将填满扩展出的空间</span></span><br><span class="line">a.<span class="built_in">clear</span>()           <span class="comment">//  删除容器中的所有元素</span></span><br><span class="line">a.<span class="built_in">front</span>()           <span class="comment">//  返回首元素</span></span><br><span class="line">a.<span class="built_in">back</span>()            <span class="comment">//  返回尾元素</span></span><br><span class="line">a.<span class="built_in">swap</span>(v)           <span class="comment">//  将a与另一个list对象进行交换</span></span><br><span class="line">a.<span class="built_in">merge</span>(b)          <span class="comment">//  调用结束后b变为空，a中元素包含原来a和b的元素</span></span><br><span class="line">a.<span class="built_in">insert</span>(it, val)   <span class="comment">//  向迭代器it指向的元素前插入新元素val</span></span><br><span class="line">a.<span class="built_in">insert</span>(it, n, val)<span class="comment">//  向迭代器it指向的元素前插入n个新元素val</span></span><br><span class="line">a.<span class="built_in">insert</span>(it, first, last)   </span><br><span class="line"><span class="comment">//  将由迭代器first和last所指定的序列[first, last)插入到迭代器it指向的元素前面</span></span><br><span class="line">a.<span class="built_in">erase</span>(it)         <span class="comment">//  删除由迭代器it所指向的元素</span></span><br><span class="line">a.<span class="built_in">erase</span>(first, last)<span class="comment">//  删除由迭代器first和last所指定的序列[first, last)</span></span><br><span class="line">a.<span class="built_in">remove</span>(x)         <span class="comment">//  删除了a中所有值为x的元素</span></span><br><span class="line">a.<span class="built_in">assign</span>(n, val)    <span class="comment">// 将a中的所有元素替换成n个val元素</span></span><br><span class="line">a.<span class="built_in">assign</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>())</span><br><span class="line"><span class="comment">//将a变成b</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p><strong>头文件：string</strong></p><p>string是STL的字符串类型，通常用来表示字符串。而在使用string之前，字符串通常是用<code>char*</code>表示的。<br>string和<code>char*</code>的区别<br>string是一个类, <code>char*</code>是一个指向字符的指针。<br>string封装了<code>char*</code>，管理这个字符串，是一个<code>char*</code>型的容器。也就是说string是一个容器，里面元素的数据类型是<code>char*</code>。<br>string不用考虑内存释放和越界。<br>string管理<code>char*</code>所分配的内存。每一次string的复制，取值都由string类负责维护，不用担心复制越界和取值越界等。  string提供了一系列的字符串操作函数<br>查找find，拷贝copy，删除erase，替换replace，插入insert. </p><p>构造和析构函数:</p><div class="table-container"><table><thead><tr><th>表达式</th><th>效果</th></tr></thead><tbody><tr><td>string s</td><td>生成一个空字符串</td></tr><tr><td>string s(str)</td><td>copy构造函数，生成一个str的复制品</td></tr><tr><td>string s(str,idx)</td><td>将string内始于位置idx的部分当作字符串s的初值</td></tr><tr><td>string s(str,idx,len)</td><td>将string内始于位置idx且长度最多为len的部分当作字符串s的初值</td></tr><tr><td>string s(cstr)</td><td>以C-string字符串cstr作为字符串s的初值</td></tr><tr><td>string s(cstr，len)</td><td>以C-string字符串cstr的前len个字符作为字符串s的初值</td></tr><tr><td>string s(num，c)</td><td>生成一个字符串，包含num个字符c</td></tr><tr><td>string s(beg，end)</td><td>以区间[beg,end]内所有字符作为字符串s的初值</td></tr></tbody></table></div><p>操作函数:</p><div class="table-container"><table><thead><tr><th>操作函数</th><th>效果</th></tr></thead><tbody><tr><td>=，assign()</td><td>赋以新值</td></tr><tr><td>swap()</td><td>交换两个字符串的内容</td></tr><tr><td>+=, append(),push_back()</td><td>添加字符</td></tr><tr><td>insert()</td><td>插入字符</td></tr><tr><td>erase()</td><td>删除字符</td></tr><tr><td>clear()</td><td>移除全部字符</td></tr><tr><td>resize()</td><td>改变字符数量</td></tr><tr><td>replace()</td><td>替换字符</td></tr><tr><td>+</td><td>串联字符串</td></tr><tr><td>==，!=，&lt;，&lt;=，&gt;，&gt;=，compare()</td><td>比较字符串内容</td></tr><tr><td>size(),length()</td><td>返回字符数量,等效函数</td></tr><tr><td>max_size()</td><td>返回字符的最大可能个数</td></tr><tr><td>empty()</td><td>判断字符串是否为空</td></tr><tr><td>capacity()</td><td>返回重新分配之前的字符容量</td></tr><tr><td>reserve()</td><td>保留一定量内存以容纳一定数量的字符</td></tr><tr><td>[ ]，at()</td><td>存取单一字符</td></tr><tr><td>&gt;&gt;，getline()</td><td>从stream中读取某值</td></tr><tr><td>&lt;&lt;</td><td>将某值写入stream</td></tr><tr><td>copy()</td><td>将内容复制为一个C-string</td></tr><tr><td>c_str()</td><td>将内容以C-string形式返回</td></tr><tr><td>data()</td><td>将内容以字符数组形式返回</td></tr><tr><td>substr()</td><td>返回某个子字符串</td></tr><tr><td>begin()，end()</td><td>提供正常的迭代器支持</td></tr><tr><td>rbegin()，rend()</td><td>提供逆向迭代器支持</td></tr></tbody></table></div><h3 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h3><p><strong>头文件：utility</strong></p><p>STL的utility头文件中描述了一个看上去非常简单的模版类pair，用来表示一个二元组或元素对，并提供了按照字典序对元素对进行大小比较运算符模版函数。<br>Example，想要定义一个对象表示一个平面坐标点，则可以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;double, double&gt; p;</span><br><span class="line">cin &gt;&gt; p.first &gt;&gt; p.second;</span><br></pre></td></tr></table></figure><p>pair模版类需要两个参数：首元素的数据类型和尾元素的数据类型。pair模版类对象有两个成员：first和second，分别表示首元素和尾元素。<br>在其中已经定义了pair上的六个比较运算符：&lt;、&gt;、&lt;=、&gt;=、==、!=，其规则是先比较first，first相等时再比较second，这符合大多数应用的逻辑。当然，也可以通过重载这几个运算符来重新指定自己的比较逻辑。<br>除了直接定义一个pair对象外，如果需要即时生成一个pair对象，也可以调用在其中定义的一个模版函数：make_pair。make_pair需要两个参数，分别为元素对的首元素和尾元素。</p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p><strong>头文件：map</strong></p><p>在STL的头文件中map中定义了模版类map和multimap，用有序二叉树表存储类型为<code>pair&lt;const Key, T&gt;</code>的元素对序列。序列中的元素以const Key部分作为标识，map中所有元素的Key值必须是唯一的，multimap则允许有重复的Key值。</p><p>可以将map看作是由Key标识元素的元素集合，这类容器也被称为“关联容器”，可以通过一个Key值来快速决定一个元素，因此非常适合于需要按照Key值查找元素的容器。<br>map模版类需要四个模版参数，第一个是键值类型，第二个是元素类型，第三个是比较算子，第四个是分配器类型。其中键值类型和元素类型是必要的。</p><p>定义map对象的代码示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map&lt;string, <span class="type">int</span>&gt; m;</span><br></pre></td></tr></table></figure><p>map的基本操作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  向map中插入元素  */</span></span><br><span class="line">m[key] = value; <span class="comment">//  [key]操作是map很有特色的操作,如果在map中存在键值为key的元素对, 则返回该元素对的值域部分,否则将会创建一个键值为key的元素对,值域为默认值。所以可以用该操作向map中插入元素对或修改已经存在的元素对的值域部分。</span></span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(key, value));    <span class="comment">//  也可以直接调用insert方法插入元素对,insert操作会返回一个pair,当map中没有与key相匹配的键值时,其first是指向插入元素对的迭代器,其second为true;若map中已经存在与key相等的键值时,其first是指向该元素对的迭代器,second为false。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  查找元素  */</span></span><br><span class="line"><span class="type">int</span> i = m[key]; <span class="comment">//  要注意的是,当与该键值相匹配的元素对不存在时,会创建键值为key（当另一个元素是整形时，m[key]=0）的元素对。</span></span><br><span class="line">map&lt;string, <span class="type">int</span>&gt;::iterator it = m.<span class="built_in">find</span>(key);    <span class="comment">//  如果map中存在与key相匹配的键值时,find操作将返回指向该元素对的迭代器,否则,返回的迭代器等于map的end()(参见vector中提到的begin()和end()操作)。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  删除元素  */</span></span><br><span class="line">m.<span class="built_in">erase</span>(key);   <span class="comment">//  删除与指定key键值相匹配的元素对,并返回被删除的元素的个数。</span></span><br><span class="line">m.<span class="built_in">erase</span>(it);    <span class="comment">//  删除由迭代器it所指定的元素对,并返回指向下一个元素对的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  其他操作  */</span></span><br><span class="line">m.<span class="built_in">size</span>();       <span class="comment">//  返回元素个数</span></span><br><span class="line">m.<span class="built_in">empty</span>();      <span class="comment">//  判断是否为空</span></span><br><span class="line">m.<span class="built_in">clear</span>();      <span class="comment">//  清空所有元素</span></span><br></pre></td></tr></table></figure><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><p><strong>头文件：stack</strong></p><p>stack模版类的定义在stack头文件中。<br>stack模版类需要两个模版参数，一个是元素类型，另一个是容器类型，但是只有元素类型是必要的，在不指定容器类型时，默认容器的类型为deque。</p><p>定义stack对象的示例代码如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">stack&lt;string&gt; ss;</span><br></pre></td></tr></table></figure><p>stack的基本操作有：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">push</span>(x);  <span class="comment">//  入栈</span></span><br><span class="line">s.<span class="built_in">pop</span>();    <span class="comment">//  出栈</span></span><br><span class="line">s.<span class="built_in">top</span>();    <span class="comment">//  访问栈顶</span></span><br><span class="line">s.<span class="built_in">empty</span>();  <span class="comment">//  当栈空时，返回true</span></span><br><span class="line">s.<span class="built_in">size</span>();   <span class="comment">//  访问栈中元素个数</span></span><br></pre></td></tr></table></figure><h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><p><strong>头文件：queue</strong></p><p>queue模版类的定义在queue头文件中。<br>queue与stack相似，queue模版类也需要两个模版参数，一个元素类型，一个容器类型，元素类型时必须的，容器类型时可选的，默认为deque类型。</p><p>定义queue对象的示例代码必须如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">queue&lt;<span class="type">double</span>&gt; qq;</span><br></pre></td></tr></table></figure><p>queue的基本操作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">q.<span class="built_in">push</span>(x);  <span class="comment">//  入队列</span></span><br><span class="line">q.<span class="built_in">pop</span>();    <span class="comment">//  出队列</span></span><br><span class="line">q.<span class="built_in">front</span>();  <span class="comment">//  访问队首元素</span></span><br><span class="line">q.<span class="built_in">back</span>();   <span class="comment">//  访问队尾元素</span></span><br><span class="line">q.<span class="built_in">empty</span>();  <span class="comment">//  判断队列是否为空</span></span><br><span class="line">q.<span class="built_in">size</span>();   <span class="comment">//  访问队列中的元素个数</span></span><br></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p><strong>头文件：set</strong></p><p>set是与集合相关的容器，STL为我们提供了set的实现，在编程题中遇见集合问题直接调用是十分方便的。</p><p>定义set对象的示例代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">set&lt;<span class="type">double</span>&gt; ss;</span><br></pre></td></tr></table></figure><p>set的基本操作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">begin</span>()       <span class="comment">//  返回指向第一个元素的迭代器</span></span><br><span class="line">s.<span class="built_in">clear</span>()       <span class="comment">//  清除所有元素</span></span><br><span class="line">s.<span class="built_in">count</span>()       <span class="comment">//  返回某个值元素的个数</span></span><br><span class="line">s.<span class="built_in">empty</span>()       <span class="comment">//  如果集合为空，返回true(真）</span></span><br><span class="line">s.<span class="built_in">end</span>()         <span class="comment">//  返回指向最后一个元素之后的迭代器，不是最后一个元素</span></span><br><span class="line">s.<span class="built_in">equal_range</span>() <span class="comment">//  返回集合中与给定值相等的上下限的两个迭代器</span></span><br><span class="line">s.<span class="built_in">erase</span>()       <span class="comment">//  删除集合中的元素</span></span><br><span class="line">s.<span class="built_in">find</span>()        <span class="comment">//  返回一个指向被查找到元素的迭代器</span></span><br><span class="line">s.<span class="built_in">get_allocator</span>()   <span class="comment">//  返回集合的分配器</span></span><br><span class="line">s.<span class="built_in">insert</span>()      <span class="comment">//  在集合中插入元素</span></span><br><span class="line">s.<span class="built_in">lower_bound</span>() <span class="comment">//  返回指向大于（或等于）某值的第一个元素的迭代器</span></span><br><span class="line">s.<span class="built_in">key_comp</span>()    <span class="comment">//  返回一个用于元素间值比较的函数</span></span><br><span class="line">s.<span class="built_in">max_size</span>()    <span class="comment">//  返回集合能容纳的元素的最大限值</span></span><br><span class="line">s.<span class="built_in">rbegin</span>()      <span class="comment">//  返回指向集合中最后一个元素的反向迭代器</span></span><br><span class="line">s.<span class="built_in">rend</span>()        <span class="comment">//  返回指向集合中第一个元素的反向迭代器</span></span><br><span class="line">s.<span class="built_in">size</span>()        <span class="comment">//  集合中元素的数目</span></span><br><span class="line">s.<span class="built_in">swap</span>()        <span class="comment">//  交换两个集合变量</span></span><br><span class="line">s.<span class="built_in">upper_bound</span>() <span class="comment">//  返回大于某个值元素的迭代器</span></span><br><span class="line">s.<span class="built_in">value_comp</span>()  <span class="comment">//  返回一个用于比较元素间的值的函数</span></span><br></pre></td></tr></table></figure><h3 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h3><p><strong>头文件：set</strong></p><p>在set头文件中，还定义了另一个非常实用的模版类multiset（多重集合）。多重集合与集合的区别在于集合中不能存在相同元素，而多重集合中可以存在。</p><p>定义multiset对象的示例代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">multiset&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">multiset&lt;<span class="type">double</span>&gt; ss;</span><br></pre></td></tr></table></figure><p>multiset和set的基本操作相似，需要注意的是，集合的count()能返回0（无）或者1（有），而多重集合是有多少个返回多少个。</p><h3 id="bitset"><a href="#bitset" class="headerlink" title="bitset"></a>bitset</h3><p><strong>头文件：bitset</strong></p><p>在 STLSTL 的头文件中 bitset中定义了模版类 bitsetbitset，用来方便地管理一系列的 bitbit 位的类。bitsetbitset 除了可以访问指定下标的 bitbit 位以外，还可以把它们作为一个整数来进行某些统计。</p><p>bitsetbitset 模板类需要一个模版参数，用来明确指定含有多少位。</p><p>定义 bitsetbitset 对象的示例代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">32</span>;</span><br><span class="line">bitset&lt;MAXN&gt; bt;            <span class="comment">//  bt 包括 MAXN 位，下标 0 ~ MAXN - 1，默认初始化为 0</span></span><br><span class="line"><span class="function">bitset&lt;MAXN&gt; <span class="title">bt1</span><span class="params">(<span class="number">0xf</span>)</span></span>;      <span class="comment">//  0xf 表示十六进制数 f，对应二进制 1111，将 bt1 低 4 位初始化为 1</span></span><br><span class="line"><span class="function">bitset&lt;MAXN&gt; <span class="title">bt2</span><span class="params">(<span class="number">012</span>)</span></span>;      <span class="comment">//  012 表示八进制数 12，对应二进制 1010，即将 bt2 低 4 位初始化为 1010</span></span><br><span class="line"><span class="function">bitset&lt;MAXN&gt; <span class="title">bt3</span><span class="params">(<span class="string">&quot;1010&quot;</span>)</span></span>;   <span class="comment">//  将 bt3 低 4 位初始化为 1010</span></span><br><span class="line"><span class="function">bitset&lt;MAXN&gt; <span class="title">bt4</span><span class="params">(s, pos, n)</span></span>;<span class="comment">//  将 01 字符串 s 的 pos 位开始的 n 位初始化 bt4</span></span><br></pre></td></tr></table></figure><p>bitsetbitset 基本操作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">bt.<span class="built_in">any</span>()        <span class="comment">//  bt 中是否存在置为 1 的二进制位？</span></span><br><span class="line">bt.<span class="built_in">none</span>()       <span class="comment">//  bt 中不存在置为 1 的二进制位吗？</span></span><br><span class="line">bt.<span class="built_in">count</span>()      <span class="comment">//  bt 中置为 1 的二进制位的个数</span></span><br><span class="line">bt.<span class="built_in">size</span>()       <span class="comment">//  bt 中二进制位的个数</span></span><br><span class="line">bt[pos]         <span class="comment">//  访问 bt 中在 pos 处的二进制位</span></span><br><span class="line">bt.<span class="built_in">test</span>(pos)    <span class="comment">//  bt 中在 pos 处的二进制位是否为 1</span></span><br><span class="line">bt.<span class="built_in">set</span>()        <span class="comment">//  把 bt 中所有二进制位都置为 1</span></span><br><span class="line">bt.<span class="built_in">set</span>(pos)     <span class="comment">//  把 bt 中在 pos 处的二进制位置为 1</span></span><br><span class="line">bt.<span class="built_in">reset</span>()      <span class="comment">//  把 bt 中所有二进制位都置为 0</span></span><br><span class="line">bt.<span class="built_in">reset</span>(pos)   <span class="comment">//  把 bt 中在pos处的二进制位置为0</span></span><br><span class="line">bt.<span class="built_in">flip</span>()       <span class="comment">//  把 bt 中所有二进制位逐位取反</span></span><br><span class="line">bt.<span class="built_in">flip</span>(pos)    <span class="comment">//  把 bt 中在 pos 处的二进制位取反</span></span><br><span class="line">bt[pos].<span class="built_in">flip</span>()  <span class="comment">//  同上</span></span><br><span class="line">bt.<span class="built_in">to_ulong</span>()   <span class="comment">//  用 bt 中同样的二进制位返回一个 unsigned long 值</span></span><br><span class="line">os &lt;&lt; bt        <span class="comment">//  把 bt 中的位集输出到 os 流</span></span><br></pre></td></tr></table></figure><h2 id="图模板"><a href="#图模板" class="headerlink" title="图模板"></a>图模板</h2><h3 id="不带出入度的最简模板"><a href="#不带出入度的最简模板" class="headerlink" title="不带出入度的最简模板"></a>不带出入度的最简模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a, b) ((a) &gt; (b) ? (a) : (b) )</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//定义图的定点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Vertex</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; connectors;    <span class="comment">//存储节点的后续连接顶点编号</span></span><br><span class="line">    <span class="built_in">Vertex</span>() : <span class="built_in">id</span>(<span class="number">-1</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">Vertex</span>(<span class="type">int</span> nid) : <span class="built_in">id</span>(nid) &#123;&#125;</span><br><span class="line">&#125; Vertex;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//定义Graph的邻接表表示</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">    vector&lt;Vertex&gt; vertexs;   <span class="comment">//存储定点信息</span></span><br><span class="line">    <span class="type">int</span> nVertexs;      <span class="comment">//计数：邻接数</span></span><br><span class="line">    <span class="type">bool</span> isDAG;               <span class="comment">//标志：是有向图吗</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">Graph</span>(<span class="type">int</span> n, <span class="type">bool</span> isDAG) : <span class="built_in">nVertexs</span>(n), <span class="built_in">isDAG</span>(isDAG) &#123; vertexs.<span class="built_in">resize</span>(n); &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//向图中添加边</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> id1, <span class="type">int</span> id2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(<span class="built_in">MAX</span>(id1, id2) &lt; vertexs.<span class="built_in">size</span>())) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (isDAG) &#123;</span><br><span class="line">            vertexs[id1].connectors.<span class="built_in">push_back</span>(id2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            vertexs[id1].connectors.<span class="built_in">push_back</span>(id2);</span><br><span class="line">            vertexs[id2].connectors.<span class="built_in">push_back</span>(id1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//广度优先搜索</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">BFS</span><span class="params">(<span class="type">int</span> start)</span> </span>&#123;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; visited;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g, rst;</span><br><span class="line">g.<span class="built_in">push_back</span>(start);</span><br><span class="line">visited.<span class="built_in">insert</span>(start);</span><br><span class="line"><span class="keyword">while</span>(g.<span class="built_in">size</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="type">int</span> id = g[<span class="number">0</span>];</span><br><span class="line">g.<span class="built_in">erase</span>(g.<span class="built_in">begin</span>());</span><br><span class="line">rst.<span class="built_in">push_back</span>(id);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; vertexs[id].connectors.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="type">int</span> id1 = vertexs[id].connectors[i];</span><br><span class="line"><span class="keyword">if</span> (visited.<span class="built_in">count</span>(id1) == <span class="number">0</span>) &#123;</span><br><span class="line">g.<span class="built_in">push_back</span>(id1);</span><br><span class="line">visited.<span class="built_in">insert</span>(id1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rst;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//深度优先搜索</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">DFS</span><span class="params">(<span class="type">int</span> start)</span> </span>&#123;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; visited;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g, rst;</span><br><span class="line">g.<span class="built_in">push_back</span>(start);</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;push &quot; &lt;&lt; start &lt;&lt; &quot; &quot;;</span></span><br><span class="line">visited.<span class="built_in">insert</span>(start);</span><br><span class="line">rst.<span class="built_in">push_back</span>(start);</span><br><span class="line"><span class="type">bool</span> found;</span><br><span class="line"><span class="keyword">while</span>(g.<span class="built_in">size</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="type">int</span> id = g[g.<span class="built_in">size</span>()<span class="number">-1</span>];</span><br><span class="line">found = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; vertexs[id].connectors.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="type">int</span> id1 = vertexs[id].connectors[i];</span><br><span class="line"><span class="keyword">if</span> (visited.<span class="built_in">count</span>(id1) == <span class="number">0</span>) &#123;</span><br><span class="line">g.<span class="built_in">push_back</span>(id1);</span><br><span class="line">rst.<span class="built_in">push_back</span>(id1);</span><br><span class="line">visited.<span class="built_in">insert</span>(id1);</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;push &quot; &lt;&lt; id1 &lt;&lt; &quot; &quot;;</span></span><br><span class="line">found = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!found) &#123;</span><br><span class="line"><span class="type">int</span> id2 = g[g.<span class="built_in">size</span>()<span class="number">-1</span>];</span><br><span class="line">rst.<span class="built_in">push_back</span>(<span class="number">-1</span> * id2);</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;pop &quot; &lt;&lt; id2 &lt;&lt; &quot; &quot;;</span></span><br><span class="line">g.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">return</span> rst;</span><br><span class="line">&#125;</span><br><span class="line">&#125; Graph;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">Graph <span class="title">g</span><span class="params">(<span class="number">8</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">g.<span class="built_in">addEdge</span>(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">g.<span class="built_in">addEdge</span>(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">g.<span class="built_in">addEdge</span>(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">4</span>, <span class="number">6</span>);    </span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">g.<span class="built_in">addEdge</span>(<span class="number">5</span>, <span class="number">7</span>);    </span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; bv = g.<span class="built_in">BFS</span>(<span class="number">0</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;宽度优先搜索节点顺序：&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; bv.<span class="built_in">size</span>(); j++)</span><br><span class="line">cout &lt;&lt; bv[j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;深度优先搜索节点顺序：&quot;</span>;</span><br><span class="line">    <span class="function">Graph <span class="title">g1</span><span class="params">(<span class="number">6</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    g1.<span class="built_in">addEdge</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    g1.<span class="built_in">addEdge</span>(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">    g1.<span class="built_in">addEdge</span>(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">g1.<span class="built_in">addEdge</span>(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">g1.<span class="built_in">addEdge</span>(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    g1.<span class="built_in">addEdge</span>(<span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line">    g1.<span class="built_in">addEdge</span>(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">    g1.<span class="built_in">addEdge</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; route = g1.<span class="built_in">DFS</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; route.<span class="built_in">size</span>(); i++)</span><br><span class="line">        cout &lt;&lt; route[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line">cin &gt;&gt; ch;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="带出入度的-2019推免试题"><a href="#带出入度的-2019推免试题" class="headerlink" title="带出入度的 (2019推免试题)"></a>带出入度的 (2019推免试题)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a, b) ((a) &gt; (b) ? (a) : (b) )</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; inDegreelist,outDegreelist;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//定义图的定点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Vertex</span> &#123;</span><br><span class="line">    <span class="type">int</span> id,inDegree,outDegree;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; connectors;    <span class="comment">//存储节点的后续连接顶点编号</span></span><br><span class="line">    <span class="built_in">Vertex</span>() : <span class="built_in">id</span>(<span class="number">-1</span>),<span class="built_in">inDegree</span>(<span class="number">0</span>),<span class="built_in">outDegree</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">Vertex</span>(<span class="type">int</span> nid) : <span class="built_in">id</span>(nid),<span class="built_in">inDegree</span>(<span class="number">0</span>),<span class="built_in">outDegree</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">&#125; Vertex;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//定义Graph的邻接表表示</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">    vector&lt;Vertex&gt; vertexs;   <span class="comment">//存储定点信息</span></span><br><span class="line">    <span class="type">int</span> nVertexs;      <span class="comment">//计数：邻接数</span></span><br><span class="line">    <span class="type">bool</span> isDAG;               <span class="comment">//标志：是有向图吗</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">Graph</span>(<span class="type">int</span> n, <span class="type">bool</span> isDAG) : <span class="built_in">nVertexs</span>(n), <span class="built_in">isDAG</span>(isDAG) &#123; vertexs.<span class="built_in">resize</span>(n); &#125;</span><br><span class="line"><span class="built_in">Graph</span>() : <span class="built_in">nVertexs</span>(<span class="number">1</span>), <span class="built_in">isDAG</span>(<span class="number">1</span>) &#123; vertexs.<span class="built_in">resize</span>(<span class="number">1</span>); &#125;</span><br><span class="line"><span class="comment">//向图中添加边</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> id1, <span class="type">int</span> id2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(<span class="built_in">MAX</span>(id1, id2) &lt; vertexs.<span class="built_in">size</span>())) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (isDAG) &#123;</span><br><span class="line">            vertexs[id1].connectors.<span class="built_in">push_back</span>(id2);</span><br><span class="line">            vertexs[id1].outDegree++;</span><br><span class="line">            vertexs[id2].inDegree++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            vertexs[id1].connectors.<span class="built_in">push_back</span>(id2);</span><br><span class="line">            vertexs[id2].connectors.<span class="built_in">push_back</span>(id1);</span><br><span class="line"></span><br><span class="line">            vertexs[id1].outDegree++;</span><br><span class="line">            vertexs[id1].inDegree++;</span><br><span class="line"></span><br><span class="line">            vertexs[id2].outDegree++;</span><br><span class="line">            vertexs[id2].inDegree++;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; Graph;</span><br><span class="line"></span><br><span class="line">Graph g;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">g=<span class="built_in">Graph</span>(n, <span class="literal">true</span>);</span><br><span class="line"><span class="type">int</span> src,dst;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">cin&gt;&gt;src&gt;&gt;dst;</span><br><span class="line">g.<span class="built_in">addEdge</span>(src,dst);</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;Vertex&gt;::iterator it = g.vertexs.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span>(it!=g.vertexs.<span class="built_in">end</span>())&#123;</span><br><span class="line">inDegreelist.<span class="built_in">push_back</span>(it-&gt;inDegree);</span><br><span class="line">outDegreelist.<span class="built_in">push_back</span>(it-&gt;outDegree);</span><br><span class="line">it++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">countin</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">count</span>(inDegreelist.<span class="built_in">begin</span>(),inDegreelist.<span class="built_in">end</span>(),n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">countout</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">count</span>(outDegreelist.<span class="built_in">begin</span>(),outDegreelist.<span class="built_in">end</span>(),n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Is_List</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//有一个inDegree为0的头和一个outDegree为0的尾，且其余节点入度与出度都为1;</span></span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">countin</span>(<span class="number">0</span>)==<span class="number">1</span>)&amp;&amp;(<span class="built_in">countout</span>(<span class="number">0</span>)==<span class="number">1</span>)&amp;&amp;(<span class="built_in">countin</span>(<span class="number">1</span>)==n<span class="number">-1</span>)&amp;&amp;(<span class="built_in">countout</span>(<span class="number">1</span>)==n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Is_Tree</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//有一个inDegree为0的头且其余节点inDegree均为1，且不是链表;</span></span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">countin</span>(<span class="number">0</span>)==<span class="number">1</span>)&amp;&amp;(<span class="built_in">countin</span>(<span class="number">1</span>)==n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">topologicalSort</span><span class="params">()</span></span>&#123;<span class="comment">//拓扑排序判断有环无环</span></span><br><span class="line"><span class="type">int</span> num=<span class="number">0</span>;<span class="comment">//记录加入拓扑排序的顶点数</span></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(inDegreelist[i]==<span class="number">0</span>)&#123;</span><br><span class="line">q.<span class="built_in">push</span>(i);<span class="comment">//将所有入度为0的顶点入队</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="type">int</span> u=q.<span class="built_in">front</span>();<span class="comment">//取队首顶点u</span></span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g.vertexs[u].connectors.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> v=g.vertexs[u].connectors[i];<span class="comment">//u的后继节点v</span></span><br><span class="line">inDegreelist[v]--;<span class="comment">//v的入度减1</span></span><br><span class="line"><span class="keyword">if</span>(inDegreelist[v]==<span class="number">0</span>)&#123;<span class="comment">//顶点v的入度减为0则入队</span></span><br><span class="line">q.<span class="built_in">push</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">g.vertexs[u].connectors.<span class="built_in">clear</span>();<span class="comment">//清空u的所有出边</span></span><br><span class="line">num++;<span class="comment">//加入拓扑排序的顶点数加1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num==n) <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//加入拓扑排序的顶点为n，则拓扑排序成功，图无环</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//否则拓扑排序失败，图有环</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>||m==<span class="number">0</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;error&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Is_List</span>())&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;list&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">Is_Tree</span>())&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;tree&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">topologicalSort</span>())&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;no ring&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;have ring&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图算法：找出u到v的所有路径-邻接表"><a href="#图算法：找出u到v的所有路径-邻接表" class="headerlink" title="图算法：找出u到v的所有路径-邻接表"></a>图算法：找出u到v的所有路径-邻接表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> BASE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BASE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INFEASIBLE -1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OVERFLOW -2</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> <span class="type">bool</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VertexType char <span class="comment">//点类型</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VRType int <span class="comment">//边类型</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxSize 100</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Visit</span><span class="params">(VertexType e)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_VERTEX_NUM 20</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span>&#123;DG, UDG&#125; GraphKind;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ArcNode</span>&#123;</span><br><span class="line"><span class="type">int</span> adjV; <span class="comment">//边指向的顶点</span></span><br><span class="line">VRType weight; <span class="comment">//权重</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ArcNode</span> *next;</span><br><span class="line">&#125;ArcNode; <span class="comment">//边</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">VNode</span>&#123;</span><br><span class="line">VertexType data;</span><br><span class="line">ArcNode *firstarc;</span><br><span class="line">&#125;VNode, AdjList[MAX_VERTEX_NUM]; <span class="comment">//顶点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">GraphKind kind;</span><br><span class="line"><span class="type">int</span> vernum,arcnum;</span><br><span class="line">AdjList vers; </span><br><span class="line">&#125;ALGraph;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*------------------------</span></span><br><span class="line"><span class="comment"> |7.14 创建有向图的邻接表|</span></span><br><span class="line"><span class="comment"> ------------------------*/</span></span><br><span class="line"><span class="function">Status <span class="title">InitGraph_AL</span><span class="params">(ALGraph *pG)</span> </span>&#123; <span class="comment">//初始化</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">pG-&gt;arcnum = <span class="number">0</span>;</span><br><span class="line">pG-&gt;vernum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;MAX_VERTEX_NUM; ++i)</span><br><span class="line">pG-&gt;vers[i].firstarc = <span class="literal">NULL</span>; <span class="comment">//VC++6.0中指针初始化为0xcccccccc</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LocateVex_AL</span><span class="params">(ALGraph G, VertexType e)</span> </span>&#123; <span class="comment">//定位值为e的元素下标</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;G.vernum; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (G.vers[i].data == e) &#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">CreateDG_AL</span><span class="params">(ALGraph *pG)</span> </span>&#123; <span class="comment">//创建有向图的邻接表</span></span><br><span class="line"><span class="comment">//输入规则：顶点数目-&gt;弧的数目-&gt;各顶点的信息-&gt;各条弧的信息</span></span><br><span class="line"><span class="type">int</span> i,a,b;</span><br><span class="line"><span class="type">char</span> tmp[MAX_VERTEX_NUM];</span><br><span class="line"><span class="type">char</span> h,t;</span><br><span class="line">ArcNode *p, *q;</span><br><span class="line"></span><br><span class="line"><span class="built_in">InitGraph_AL</span>(pG); <span class="comment">//VC++6.0中指针初始化为0xcccccccc，如果不将指针初始化为NULL，会出错</span></span><br><span class="line"><span class="comment">//图的类型</span></span><br><span class="line">pG-&gt;kind = DG;</span><br><span class="line"><span class="comment">//顶点数目</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i); <span class="keyword">if</span> (i&lt;<span class="number">0</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">pG-&gt;vernum = i;</span><br><span class="line"><span class="comment">//弧的数目</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i); <span class="keyword">if</span> (i&lt;<span class="number">0</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">pG-&gt;arcnum = i;</span><br><span class="line"><span class="comment">//各顶点信息</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, tmp);</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;pG-&gt;vernum; ++i) pG-&gt;vers[i].data=tmp[i];</span><br><span class="line"><span class="comment">//弧的信息</span></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;pG-&gt;arcnum; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, tmp);</span><br><span class="line">h = tmp[<span class="number">0</span>]; t = tmp[<span class="number">2</span>];</span><br><span class="line">a = <span class="built_in">LocateVex_AL</span>(*pG, h);</span><br><span class="line">b = <span class="built_in">LocateVex_AL</span>(*pG, t);</span><br><span class="line"><span class="keyword">if</span> (a&lt;<span class="number">0</span> || b&lt;<span class="number">0</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">p = (ArcNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ArcNode)); <span class="keyword">if</span> (!p) <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">p-&gt;adjV=b;p-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (pG-&gt;vers[a].firstarc) &#123; <span class="comment">//已经有边了</span></span><br><span class="line"><span class="keyword">for</span> (q = pG-&gt;vers[a].firstarc; q-&gt;next; q=q-&gt;next) ; <span class="comment">//找到最后一条</span></span><br><span class="line">q-&gt;next = p;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">//第一条边</span></span><br><span class="line">pG-&gt;vers[a].firstarc = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*----------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> |7.28 有向图-从u-v的所有简单路径                                |</span></span><br><span class="line"><span class="comment"> ----------------------------------------------------------------*/</span></span><br><span class="line"><span class="type">int</span> visit[MAX_VERTEX_NUM]; <span class="comment">//前面定义了</span></span><br><span class="line">VertexType paths[maxSize][MAX_VERTEX_NUM]; <span class="comment">//存放路径</span></span><br><span class="line"><span class="type">int</span> path[MAX_VERTEX_NUM]; <span class="comment">//路径</span></span><br><span class="line"><span class="type">int</span> pathnum=<span class="number">0</span>; <span class="comment">//当前是第几条路径</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FindAllPath</span><span class="params">(ALGraph G, <span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> k)</span> </span>&#123; <span class="comment">//u-&gt;v当前是第k个位置</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">ArcNode *p;</span><br><span class="line">visit[u]=<span class="number">1</span>; <span class="comment">//走到了u</span></span><br><span class="line">path[k]=u; <span class="comment">//添加到路径-&gt;下标位置为k的结点是u（第k+1个是u）</span></span><br><span class="line"><span class="keyword">if</span> (u==v) &#123; <span class="comment">//找到了</span></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;=k; i++) &#123;<span class="comment">//复制到paths</span></span><br><span class="line">paths[pathnum][i] = G.vers[path[i]].data;</span><br><span class="line">&#125;</span><br><span class="line">paths[pathnum][i]=<span class="string">&#x27;\0&#x27;</span>; <span class="comment">//结束符</span></span><br><span class="line">pathnum++; <span class="comment">//找下一条路径</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//u的邻边开始找</span></span><br><span class="line"><span class="keyword">for</span> (p=G.vers[u].firstarc; p; p=p-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> (visit[p-&gt;adjV]==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">FindAllPath</span>(G, p-&gt;adjV, v, k+<span class="number">1</span>); <span class="comment">//去这个邻接点找</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 回溯到上一个结点</span></span><br><span class="line"><span class="comment">// 注意：回溯应该写在外面--&gt;也就是不管有没有找到都要回溯</span></span><br><span class="line">visit[u]=<span class="number">0</span>;</span><br><span class="line">path[k]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">/*7.28</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">11</span></span><br><span class="line"><span class="comment">ABCDEF</span></span><br><span class="line"><span class="comment">B,A</span></span><br><span class="line"><span class="comment">B,D</span></span><br><span class="line"><span class="comment">C,B</span></span><br><span class="line"><span class="comment">C,F</span></span><br><span class="line"><span class="comment">D,C</span></span><br><span class="line"><span class="comment">D,E</span></span><br><span class="line"><span class="comment">D,F</span></span><br><span class="line"><span class="comment">E,A</span></span><br><span class="line"><span class="comment">F,A</span></span><br><span class="line"><span class="comment">F,B</span></span><br><span class="line"><span class="comment">F,E</span></span><br><span class="line"><span class="comment">B-&gt;A</span></span><br><span class="line"><span class="comment">A-&gt;B</span></span><br><span class="line"><span class="comment">D-&gt;A</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line">ALGraph G;</span><br><span class="line"><span class="type">char</span> tmp[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">CreateDG_AL</span>(&amp;G);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, tmp); <span class="comment">//A-&gt;B</span></span><br><span class="line">i = <span class="built_in">LocateVex_AL</span>(G, tmp[<span class="number">0</span>]);</span><br><span class="line">j = <span class="built_in">LocateVex_AL</span>(G, tmp[<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">for</span> (cnt=<span class="number">0</span>; cnt&lt;MAX_VERTEX_NUM; cnt++) visit[cnt]=<span class="number">0</span>;</span><br><span class="line">pathnum=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;7.28 输出所有 %c 到 %c 的路径\n&quot;</span>, tmp[<span class="number">0</span>], tmp[<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">FindAllPath</span>(G, i, j, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (pathnum==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t- 走不通\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;pathnum; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t%d %s\n&quot;</span>, i+<span class="number">1</span>, paths[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="树模板"><a href="#树模板" class="headerlink" title="树模板"></a>树模板</h2><h3 id="注释版"><a href="#注释版" class="headerlink" title="注释版"></a>注释版</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a,b) memset(a,b,sizeof a);</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">50</span>;</span><br><span class="line"><span class="type">int</span> mid[maxn],po[maxn],pr[maxn];</span><br><span class="line"><span class="type">int</span> first;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">&#125;T[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 中序+先序=&gt;二叉树</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mid_pr_build</span><span class="params">(<span class="type">int</span> la,<span class="type">int</span> ra,<span class="type">int</span> lb,<span class="type">int</span> rb)</span> <span class="comment">// la,ra：表示中序遍历  lb,rb：表示先序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 这里不能等于，因为假设：len==1，则la==ra，直接返回，但是实际上是有一个 rt 的，却没被建立</span></span><br><span class="line">    <span class="keyword">if</span>(la&gt;ra) <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    <span class="type">int</span> rt=pr[lb]; <span class="comment">// 因为先序遍历第一个是根节点</span></span><br><span class="line">    <span class="type">int</span> p1=la,p2;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>(mid[p1]!=rt) p1++; <span class="comment">// 在中序遍历中找到根节点</span></span><br><span class="line">    p2=p1-la;</span><br><span class="line">    T[rt].l=<span class="built_in">mid_pr_build</span>(la,p1<span class="number">-1</span>,lb+<span class="number">1</span>,lb+p2); <span class="comment">// 左子树（锁定左子树范围的下标）</span></span><br><span class="line">    T[rt].r=<span class="built_in">mid_pr_build</span>(p1+<span class="number">1</span>,ra,lb+p2+<span class="number">1</span>,rb); <span class="comment">// 右子树（锁定右子树范围的下标）</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 中序+后序=&gt;二叉树</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mid_po_build</span><span class="params">(<span class="type">int</span> la,<span class="type">int</span> ra,<span class="type">int</span> lb,<span class="type">int</span> rb)</span> <span class="comment">// la,ra：表示中序遍历  lb,rb：表示后序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(la&gt;ra) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> rt=po[rb]; <span class="comment">// 因为后序遍历最后一个是根节点</span></span><br><span class="line">    <span class="type">int</span> p1=la,p2;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>(mid[p1]!=rt) p1++; <span class="comment">// 在中序遍历中找到根节点</span></span><br><span class="line">    p2=p1-la;</span><br><span class="line">    T[rt].l=<span class="built_in">mid_po_build</span>(la,p1<span class="number">-1</span>,lb,lb+p2<span class="number">-1</span>); <span class="comment">// 左子树（锁定左子树范围的下标）</span></span><br><span class="line">    T[rt].r=<span class="built_in">mid_po_build</span>(p1+<span class="number">1</span>,ra,lb+p2,rb<span class="number">-1</span>); <span class="comment">// 右子树（锁定右子树范围的下标）</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 求树高</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getHeight</span><span class="params">(<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rt==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>+<span class="built_in">max</span>(<span class="built_in">getHeight</span>(T[rt].l),<span class="built_in">getHeight</span>(T[rt].r));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 层序遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    q.<span class="built_in">push</span>(rt);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> w=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        v.<span class="built_in">push_back</span>(w);</span><br><span class="line">        <span class="keyword">if</span>(T[w].l!=<span class="number">0</span>) q.<span class="built_in">push</span>(T[w].l);</span><br><span class="line">        <span class="keyword">if</span>(T[w].r!=<span class="number">0</span>) q.<span class="built_in">push</span>(T[w].r);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> len=v.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>,v[i],i==len<span class="number">-1</span>?<span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>); <span class="comment">// 推荐这种写法，简洁</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 先序遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preT</span><span class="params">(<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rt==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">printf</span>(first?first=<span class="number">0</span>,<span class="string">&quot;%d&quot;</span>:<span class="string">&quot; %d&quot;</span>,rt);</span><br><span class="line">    <span class="built_in">preT</span>(T[rt].l);</span><br><span class="line">    <span class="built_in">preT</span>(T[rt].r);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 中序遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">midT</span><span class="params">(<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rt==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">midT</span>(T[rt].l);</span><br><span class="line">    <span class="built_in">printf</span>(first?first=<span class="number">0</span>,<span class="string">&quot;%d&quot;</span>:<span class="string">&quot; %d&quot;</span>,rt);</span><br><span class="line">    <span class="built_in">midT</span>(T[rt].r);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 后序遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postT</span><span class="params">(<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rt==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">postT</span>(T[rt].l);</span><br><span class="line">    <span class="built_in">postT</span>(T[rt].r);</span><br><span class="line">    <span class="built_in">printf</span>(first?first=<span class="number">0</span>,<span class="string">&quot;%d&quot;</span>:<span class="string">&quot; %d&quot;</span>,rt);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        first=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;po[i]); <span class="comment">// 后序结点</span></span><br><span class="line"><span class="comment">//        for(int i=0;i&lt;n;i++) scanf(&quot;%d&quot;,&amp;pr[i]); // 先序结点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;mid[i]); <span class="comment">// 中序结点</span></span><br><span class="line"> </span><br><span class="line">        <span class="type">int</span> rt=<span class="built_in">mid_po_build</span>(<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">0</span>,n<span class="number">-1</span>); <span class="comment">// 中+后，返回根节点</span></span><br><span class="line"><span class="comment">//        int rt=mid_pr_build(0,n-1,0,n-1); // 中+先，返回根节点</span></span><br><span class="line"> </span><br><span class="line">        <span class="built_in">bfs</span>(rt); <span class="comment">// 层序遍历</span></span><br><span class="line"><span class="comment">//        preT(rt); // 先序遍历</span></span><br><span class="line"><span class="comment">//        puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">//        postT(rt); // 后序遍历</span></span><br><span class="line"><span class="comment">//        puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">//        midT(rt); // 中序遍历</span></span><br><span class="line"><span class="comment">//        puts(&quot;&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简化版（Val-As-Index，若数据不在1-N内，则可能越界）"><a href="#简化版（Val-As-Index，若数据不在1-N内，则可能越界）" class="headerlink" title="简化版（Val As Index，若数据不在1~N内，则可能越界）"></a>简化版（Val As Index，若数据不在1~N内，则可能越界）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a,b) memset(a,b,sizeof a);</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">50</span>;</span><br><span class="line"><span class="type">int</span> mid[maxn],po[maxn],pr[maxn];</span><br><span class="line"><span class="type">int</span> first;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">&#125;T[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mid_pr_build</span><span class="params">(<span class="type">int</span> la,<span class="type">int</span> ra,<span class="type">int</span> lb,<span class="type">int</span> rb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(la&gt;ra) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> rt=pr[lb];</span><br><span class="line">    <span class="type">int</span> p1=la,p2;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>(mid[p1]!=rt) p1++;</span><br><span class="line">    p2=p1-la;</span><br><span class="line">    T[rt].l=<span class="built_in">mid_pr_build</span>(la,p1<span class="number">-1</span>,lb+<span class="number">1</span>,lb+p2);</span><br><span class="line">    T[rt].r=<span class="built_in">mid_pr_build</span>(p1+<span class="number">1</span>,ra,lb+p2+<span class="number">1</span>,rb);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mid_po_build</span><span class="params">(<span class="type">int</span> la,<span class="type">int</span> ra,<span class="type">int</span> lb,<span class="type">int</span> rb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(la&gt;ra) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> rt=po[rb];</span><br><span class="line">    <span class="type">int</span> p1=la,p2;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>(mid[p1]!=rt) p1++;</span><br><span class="line">    p2=p1-la;</span><br><span class="line">    T[rt].l=<span class="built_in">mid_po_build</span>(la,p1<span class="number">-1</span>,lb,lb+p2<span class="number">-1</span>);</span><br><span class="line">    T[rt].r=<span class="built_in">mid_po_build</span>(p1+<span class="number">1</span>,ra,lb+p2,rb<span class="number">-1</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getHeight</span><span class="params">(<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rt==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>+<span class="built_in">max</span>(<span class="built_in">getHeight</span>(T[rt].l),<span class="built_in">getHeight</span>(T[rt].r));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    q.<span class="built_in">push</span>(rt);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> w=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        v.<span class="built_in">push_back</span>(w);</span><br><span class="line">        <span class="keyword">if</span>(T[w].l!=<span class="number">0</span>) q.<span class="built_in">push</span>(T[w].l);</span><br><span class="line">        <span class="keyword">if</span>(T[w].r!=<span class="number">0</span>) q.<span class="built_in">push</span>(T[w].r);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> len=v.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>,v[i],i==len<span class="number">-1</span>?<span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preT</span><span class="params">(<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rt==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">printf</span>(first?first=<span class="number">0</span>,<span class="string">&quot;%d&quot;</span>:<span class="string">&quot; %d&quot;</span>,rt);</span><br><span class="line">    <span class="built_in">preT</span>(T[rt].l);</span><br><span class="line">    <span class="built_in">preT</span>(T[rt].r);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">midT</span><span class="params">(<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rt==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">midT</span>(T[rt].l);</span><br><span class="line">    <span class="built_in">printf</span>(first?first=<span class="number">0</span>,<span class="string">&quot;%d&quot;</span>:<span class="string">&quot; %d&quot;</span>,rt);</span><br><span class="line">    <span class="built_in">midT</span>(T[rt].r);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postT</span><span class="params">(<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rt==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">postT</span>(T[rt].l);</span><br><span class="line">    <span class="built_in">postT</span>(T[rt].r);</span><br><span class="line">    <span class="built_in">printf</span>(first?first=<span class="number">0</span>,<span class="string">&quot;%d&quot;</span>:<span class="string">&quot; %d&quot;</span>,rt);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        first=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;po[i]);</span><br><span class="line"><span class="comment">//        for(int i=0;i&lt;n;i++) scanf(&quot;%d&quot;,&amp;pr[i]);</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;mid[i]);</span><br><span class="line"> </span><br><span class="line">        <span class="type">int</span> rt=<span class="built_in">mid_po_build</span>(<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line"><span class="comment">//        int rt=mid_pr_build(0,n-1,0,n-1);</span></span><br><span class="line"> </span><br><span class="line">        <span class="built_in">bfs</span>(rt);</span><br><span class="line"><span class="comment">//        preT(rt);</span></span><br><span class="line"><span class="comment">//        postT(rt);</span></span><br><span class="line"><span class="comment">//        midT(rt);</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简化版（Val-Not-As-Index，可以存任意的-Val）"><a href="#简化版（Val-Not-As-Index，可以存任意的-Val）" class="headerlink" title="简化版（Val Not As Index，可以存任意的 Val）"></a>简化版（Val Not As Index，可以存任意的 Val）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a,b) memset(a,b,sizeof a)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ssclr(ss) ss.clear(), ss.str(<span class="string">&quot;&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">5e4</span>+<span class="number">1000</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> f;</span><br><span class="line"><span class="type">int</span> pre[maxn], in[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r,d;</span><br><span class="line">&#125;T[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">create</span><span class="params">(<span class="type">int</span> l1,<span class="type">int</span> r1,<span class="type">int</span> l2,<span class="type">int</span> r2)</span> <span class="comment">// in pre</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l2&gt;r2) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> rt=l2;</span><br><span class="line">    <span class="type">int</span> p1=l1,p2;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>(in[p1]!=pre[rt]) p1++;</span><br><span class="line">    p2=p1-l1;</span><br><span class="line"> </span><br><span class="line">    T[rt].d=pre[rt];</span><br><span class="line">    T[rt].l=<span class="built_in">create</span>(l1,p1<span class="number">-1</span>,l2+<span class="number">1</span>,l2+p2);</span><br><span class="line">    T[rt].r=<span class="built_in">create</span>(p1+<span class="number">1</span>,r1,l2+p2+<span class="number">1</span>,r2);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postT</span><span class="params">(<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rt==<span class="number">-1</span> || !f) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">postT</span>(T[rt].l);</span><br><span class="line">    <span class="built_in">postT</span>(T[rt].r);</span><br><span class="line">    <span class="keyword">if</span>(f) f=<span class="number">0</span>, <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,T[rt].d);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;pre[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;in[i]);</span><br><span class="line">    <span class="type">int</span> rt=<span class="built_in">create</span>(<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    f=<span class="number">1</span>, <span class="built_in">postT</span>(rt);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCODE常见问题</title>
      <link href="/2023/05/14/VSCODE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2023/05/14/VSCODE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="VSCODE常见问题"><a href="#VSCODE常见问题" class="headerlink" title="VSCODE常见问题"></a>VSCODE常见问题</h1><h2 id="一、中文乱码"><a href="#一、中文乱码" class="headerlink" title="一、中文乱码"></a>一、中文乱码</h2><h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><ol><li>点击“文件”→“首选项”→“设置”，在“文本编辑器”下拉菜单找到“文件”，勾选“Auto Guess Encoding”（或者直接在搜索设置栏输入：Auto Guess Encoding，也能快速找到）→之后重启VSCode设置即可生效。</li><li>点击“文件”→“首选项”→“设置”，在搜索设置中搜索“Encoding”，选择“GBK”。(此设置只针对新建文件有效，之前已有文件无法自动设置。)</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图论</title>
      <link href="/2023/05/10/%E5%9B%BE%E8%AE%BA/"/>
      <url>/2023/05/10/%E5%9B%BE%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><p>存储。图用邻接矩阵（较少），树用邻接表。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//邻接表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;e[idx]=b; ne[idx]=h[a]; h[a]=idx++;&#125;</span><br></pre></td></tr></table></figure><h1 id="一、遍历：DFS和BFS"><a href="#一、遍历：DFS和BFS" class="headerlink" title="一、遍历：DFS和BFS"></a>一、遍历：DFS和BFS</h1><h2 id="DFS模板"><a href="#DFS模板" class="headerlink" title="DFS模板"></a>DFS模板</h2><p>dfs多用函数递归，作为遍历框架；bfs则用队列是否为空的循环，作为遍历框架。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从dfs(0)作为函数入口</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;<span class="comment">//path[]作为答案，st[]限制元素使用次数，u作为path[]的下标</span></span><br><span class="line">  <span class="keyword">if</span>(u==n) <span class="comment">//输出</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;<span class="comment">//遍历范围</span></span><br><span class="line">    <span class="keyword">if</span>(!st[i])&#123;<span class="comment">//满足条件</span></span><br><span class="line">      path[u]=i;</span><br><span class="line">      st[i]=<span class="literal">true</span>； <span class="comment">//使用过后做标记</span></span><br><span class="line">      <span class="built_in">dfs</span>(u+<span class="number">1</span>);</span><br><span class="line">      path[u]=<span class="number">0</span>;  <span class="comment">//还原</span></span><br><span class="line">      st[i]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//树的dfs遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">  st[u]=trrue;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=h[u]; i!=<span class="number">-1</span>; i=ne[i])&#123;</span><br><span class="line">    <span class="type">int</span> j=e[i];</span><br><span class="line">    <span class="keyword">if</span>(!st[j])&#123;</span><br><span class="line">      <span class="built_in">dfs</span>(j);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="经典例题"><a href="#经典例题" class="headerlink" title="经典例题"></a>经典例题</h2><p><a href="https://www.acwing.com/problem/content/845/">N皇后问题</a></p><h2 id="BFS模板"><a href="#BFS模板" class="headerlink" title="BFS模板"></a>BFS模板</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">  queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">  unordered_map&lt;string,<span class="type">int</span>&gt; d;</span><br><span class="line">  q.<span class="built_in">push</span>(&#123;<span class="number">1</span>,<span class="number">1</span>&#125;); </span><br><span class="line">  <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">    <span class="keyword">auto</span> t=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(d[t]满足条件) <span class="keyword">return</span> d[t];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//从边遍历</span></span><br><span class="line">    <span class="type">int</span> distance;<span class="comment">//记录t的距离</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=h[t]; i!=<span class="number">-1</span>; i=ne[i])&#123;</span><br><span class="line">      <span class="type">int</span> j=e[i];</span><br><span class="line">      <span class="keyword">if</span>(!st[j])&#123;</span><br><span class="line">        d[t]=distance+<span class="number">1</span>;</span><br><span class="line">        q.<span class="built_in">push</span>(t);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、拓扑排序"><a href="#二、拓扑排序" class="headerlink" title="二、拓扑排序"></a>二、拓扑排序</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">top_sort</span><span class="params">()</span></span>&#123;</span><br><span class="line">  queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;<span class="keyword">if</span>(!in[i]) q.<span class="built_in">push</span>(i);&#125;</span><br><span class="line">  <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">    <span class="keyword">auto</span> t=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>(); L.<span class="built_in">push_back</span>(t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=h[t]; i!=<span class="number">-1</span>; i=h[i])&#123;</span><br><span class="line">      <span class="type">int</span> j=e[i];</span><br><span class="line">      <span class="keyword">if</span>(--in[j]==<span class="number">0</span>) q.<span class="built_in">push</span>(j);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(<a href="https://blog.csdn.net/raelum/article/details/129650604"> 还不会拓扑排序？看这一篇就够了_Iareges的博客-CSDN博客</a>)</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><a href="https://www.acwing.com/problem/content/850/">有向图的拓扑序列</a></p><p><a href=""></a></p><h1 id="三、最短路"><a href="#三、最短路" class="headerlink" title="三、最短路"></a>三、最短路</h1><h2 id="Djkstra"><a href="#Djkstra" class="headerlink" title="Djkstra"></a>Djkstra</h2><p>1使用于紧密矩阵，2适用于稀疏矩阵。</p><ol><li>连线很多的时候，对应的就是稠密图，显然易见，稠密图的路径太多了，所以就用点来找，也就是抓重点；</li><li>点很多，但是连线不是很多的时候，对应的就是稀疏图，稀疏图的路径不多，所以按照连接路径找最短路，这个过程运用优先队列，能确保每一次查找保留到更新到队列里的都是最小的，同时还解决了两个点多条路选择最短路的问题；</li></ol><p>```C++</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>STL使用手册</title>
      <link href="/2023/05/06/STL/"/>
      <url>/2023/05/06/STL/</url>
      
        <content type="html"><![CDATA[<h1 id="STL-使用手册"><a href="#STL-使用手册" class="headerlink" title="STL 使用手册"></a>STL 使用手册</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//大部分容器都会有的功能</span></span><br><span class="line">.<span class="built_in">size</span>()<span class="comment">//元素个数</span></span><br><span class="line">.<span class="built_in">empty</span>()<span class="comment">//判断是否为空，空返回1</span></span><br><span class="line">.<span class="built_in">clear</span>()<span class="comment">//清空（队列、优先队列没有）</span></span><br></pre></td></tr></table></figure><h3 id="一、vector"><a href="#一、vector" class="headerlink" title="一、vector"></a>一、vector</h3><p>本质仍是数组，只是内存可以可以自动变化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;a;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;a[N];<span class="comment">//二维数组</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it;   <span class="comment">//迭代器、支持相加减。迭代器可以看成数据结构里的指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//增</span></span><br><span class="line">a.<span class="built_in">push_back</span>(x)<span class="comment">//元素x添加到a的尾部</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//删</span></span><br><span class="line">a.<span class="built_in">pop_back</span>()<span class="comment">//删除最后一个元素</span></span><br><span class="line">a.<span class="built_in">erase</span>()<span class="comment">//</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//查</span></span><br><span class="line">a.<span class="built_in">front</span>()<span class="comment">//返回第一个元素</span></span><br><span class="line">a.<span class="built_in">back</span>()<span class="comment">//返回最后一个元素</span></span><br><span class="line">a.<span class="built_in">begin</span>()<span class="comment">//返回第一个元素的迭代器</span></span><br><span class="line">a.<span class="built_in">end</span>()<span class="comment">////返回最后一个元素的迭代器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//算法</span></span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>()); <span class="comment">//排序(从小到大)</span></span><br><span class="line">a.<span class="built_in">erase</span>( (<span class="built_in">unique</span>(a.begin),a.<span class="built_in">end</span>()) ,a.<span class="built_in">end</span>()); <span class="comment">//unique()把不重复的元素移到前面来</span></span><br><span class="line"><span class="comment">//上面两步，生成无重复值的有序vector</span></span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;()) <span class="comment">//从大到小排序</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//遍历的三种方式</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;a.<span class="built_in">size</span>(); i++)</span><br><span class="line"><span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;::iterator i=a.<span class="built_in">begin</span>(); i!=a.<span class="built_in">end</span>(); i++) </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x:a)</span><br></pre></td></tr></table></figure><h3 id="二、pair-和-string"><a href="#二、pair-和-string" class="headerlink" title="二、pair 和 string"></a>二、pair 和 string</h3><p>pari，相当于结构体，按字典序，第一关键字为first，第二关键字为second。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line">pair&lt;<span class="type">int</span>,string&gt; p;</span><br><span class="line"></span><br><span class="line">p.<span class="built_in">first</span>();<span class="comment">//返回第一个元素</span></span><br><span class="line">p.<span class="built_in">second</span>();<span class="comment">//返回第二个元素</span></span><br></pre></td></tr></table></figure><p>string，字符串，内容为字符的数组。用法大抵相同。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line">string s; cin&gt;&gt;s;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数</span></span><br><span class="line">s.<span class="built_in">substr</span>(a,b);<span class="comment">//返回子串，从下标a返回b个字符</span></span><br><span class="line"><span class="built_in">transform</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>(),s.<span class="built_in">begin</span>(),::tolower); <span class="comment">//转换为小写</span></span><br><span class="line"><span class="built_in">transform</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>(),s.<span class="built_in">begin</span>(),::toupper);<span class="comment">//转换为大写</span></span><br></pre></td></tr></table></figure><h3 id="三、stack"><a href="#三、stack" class="headerlink" title="三、stack"></a>三、stack</h3><p>先进后出，类似汉诺塔。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;<span class="type">int</span>&gt;s;</span><br><span class="line"></span><br><span class="line">s.<span class="built_in">push</span>(x);   <span class="comment">//插入一个元素x</span></span><br><span class="line">s.<span class="built_in">pop</span>();     <span class="comment">//删除栈顶元素</span></span><br><span class="line"></span><br><span class="line">s.<span class="built_in">top</span>();     <span class="comment">//取出栈顶元素</span></span><br></pre></td></tr></table></figure><h3 id="四、queue-和-priority-queue"><a href="#四、queue-和-priority-queue" class="headerlink" title="四、queue 和 priority_queue"></a>四、queue 和 priority_queue</h3><p>队列queue相当于，栈的栈底开口出去，栈顶只能进去。优先队列priority_queue是可以自动排序的queue。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line"></span><br><span class="line">q.<span class="built_in">push</span>(x); <span class="comment">// 在队尾插入一个元素x</span></span><br><span class="line">q.<span class="built_in">pop</span>();   <span class="comment">// 弹出队头元素</span></span><br><span class="line"></span><br><span class="line">q.<span class="built_in">front</span>(); <span class="comment">// 返回队头</span></span><br><span class="line">q.<span class="built_in">back</span>();  <span class="comment">// 返回队尾</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; a;      <span class="comment">// 大根堆、优先弹出最大值</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; a;   <span class="comment">// 小根堆、优先弹出最小值</span></span><br><span class="line"></span><br><span class="line">a.<span class="built_in">push</span>(x); <span class="comment">// 插入一个元素x</span></span><br><span class="line">a.<span class="built_in">pop</span>();   <span class="comment">// 删除最大值</span></span><br><span class="line"></span><br><span class="line">a.<span class="built_in">top</span>();   <span class="comment">// 返回最大值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：二者没有clear函数！</span></span><br></pre></td></tr></table></figure><h3 id="五、deque"><a href="#五、deque" class="headerlink" title="五、deque"></a>五、deque</h3><p>队头队尾均可插入弹出。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">deque&lt;<span class="type">int</span>&gt; a;</span><br><span class="line"></span><br><span class="line">a.<span class="built_in">push_back</span>(x);   <span class="comment">// 在队尾插入一个元素x</span></span><br><span class="line">a.<span class="built_in">push_front</span>(x);  <span class="comment">// 在队头插入一个元素x</span></span><br><span class="line">a.<span class="built_in">pop_back</span>();     <span class="comment">// 弹出队尾元素</span></span><br><span class="line">a.<span class="built_in">pop_front</span>();    <span class="comment">// 弹出队头元素</span></span><br><span class="line"></span><br><span class="line">a.<span class="built_in">begin</span>();          <span class="comment">//返回队头的迭代器</span></span><br><span class="line">a.<span class="built_in">end</span>();            <span class="comment">//返回队尾后一个元素的迭代器</span></span><br><span class="line">a.<span class="built_in">front</span>();          <span class="comment">//返回队头元素</span></span><br><span class="line">a.<span class="built_in">back</span>();           <span class="comment">//返回队尾元素</span></span><br></pre></td></tr></table></figure><h3 id="六、set、multiset、unordered-set、unordered-multiset"><a href="#六、set、multiset、unordered-set、unordered-multiset" class="headerlink" title="六、set、multiset、unordered_set、unordered_multiset"></a>六、set、multiset、unordered_set、unordered_multiset</h3><p>​    “有序集合”和“有序多重集合”，即前者的元素不能重复，而后者可以包含若干个相等的元素。set和multiset的内部实现是一棵红黑树，它们支持的函数基本相同。</p><p>​    无序集合unordered_set与普通集合所有操作都一样，所有操作的时间复杂度变为了O(1)，但没有lower_bound和upper_bound操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">multiset&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line">s.<span class="built_in">insert</span>(x);</span><br><span class="line">s.<span class="built_in">erase</span>(it);    <span class="comment">// 设it是一个迭代器，s.erase(it) 从s中删除迭代器it指向的元素</span></span><br><span class="line"></span><br><span class="line">s.<span class="built_in">begin</span>(); s.<span class="built_in">end</span>();</span><br><span class="line">s.<span class="built_in">find</span>(x)<span class="comment">//返回指向该元素的迭代器。若不存在，则返回s.end()</span></span><br><span class="line">s.<span class="built_in">lower_bound</span>(x); <span class="comment">// 查找大于等于x的元素中最小的一个，并返回指向该元素的迭代器。</span></span><br><span class="line">s.<span class="built_in">upper_bound</span>(x); <span class="comment">// 查找大于x的元素中最小的一个，并返回指向该元素的迭代器。</span></span><br><span class="line">s.<span class="built_in">count</span>(x);     <span class="comment">// 返回集合s中等于x的元素个数</span></span><br><span class="line"></span><br><span class="line">unordered_set&lt;<span class="type">int</span>&gt; a;       <span class="comment">//哈希表实现,不能有重复元素</span></span><br><span class="line">unordered_multiset&lt;<span class="type">int</span>&gt; a;  <span class="comment">//哈希表实现,可以有重复元素</span></span><br></pre></td></tr></table></figure><h3 id="七、map、unordered-map"><a href="#七、map、unordered-map" class="headerlink" title="七、map、unordered_map"></a>七、map、unordered_map</h3><p>map容器是一个键值对key-value的映射，其内部实现是一棵以key为关键码的红黑树,map的key和value可以是任意类型，其中key必须定义小于号运算符。（也可以看成是哈希表。）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">map&lt;string, <span class="type">int</span>&gt; m;</span><br><span class="line">m[<span class="string">&quot;headm&quot;</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">m.<span class="built_in">insert</span>(&#123;one,<span class="number">2</span>&#125;);</span><br><span class="line">m.<span class="built_in">erase</span>(x);</span><br><span class="line"></span><br><span class="line">a.<span class="built_in">begin</span>();</span><br><span class="line">a.<span class="built_in">end</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找map中是否存在key</span></span><br><span class="line">map.<span class="built_in">count</span>(key) &gt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (a.<span class="built_in">find</span>(x) == a.<span class="built_in">end</span>());   <span class="comment">// 判断在映射a中x是否存在，原理是a.find(x)如果找到了会返回x的迭代器，没找到返回a.end()</span></span><br><span class="line"></span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; a;  <span class="comment">//哈希表实现</span></span><br></pre></td></tr></table></figure><h3 id="八、bitset"><a href="#八、bitset" class="headerlink" title="八、bitset"></a>八、bitset</h3><p>bitset相当于⼀个数组，但是它是从⼆进制的低位到⾼位分别为b[0]、 b[1]……的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">bitset&lt;1000&gt; a;</span><br><span class="line"><span class="comment">// 初始化⽅式：</span></span><br><span class="line">bitset&lt;5&gt; b; 都为<span class="number">0</span></span><br><span class="line"><span class="function">bitset&lt;5&gt; <span class="title">b</span><span class="params">(u)</span></span>; u为<span class="type">unsigned</span> <span class="type">int</span>，如果u = <span class="number">1</span>，则输出b的结果为<span class="number">00001</span></span><br><span class="line">bitset&lt;<span class="number">8</span>&gt; <span class="built_in">b</span>(s); s为字符串，如<span class="string">&quot;1101&quot;</span>，则输出b的结果为<span class="number">00001101</span>，在前⾯补<span class="number">0</span></span><br><span class="line"><span class="function">bitset&lt;5&gt; <span class="title">b</span><span class="params">(s, pos, n)</span></span>; 从字符串的s[pos]开始， n位⻓度</span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">b.<span class="built_in">any</span>(); <span class="comment">//b中是否存在1的⼆进制位</span></span><br><span class="line">b.<span class="built_in">none</span>(); <span class="comment">//b中不存在1吗？</span></span><br><span class="line">b.<span class="built_in">count</span>(); <span class="comment">//b中1的⼆进制位的个数</span></span><br><span class="line">b.<span class="built_in">size</span>(); <span class="comment">//b中⼆进制位的个数</span></span><br><span class="line">b.<span class="built_in">test</span>(<span class="number">2</span>); <span class="comment">//测试下标为2处是否⼆进制位为1</span></span><br><span class="line">b.<span class="built_in">set</span>(<span class="number">4</span>); <span class="comment">//把b的下标为4处置1</span></span><br><span class="line">b.<span class="built_in">reset</span>(); <span class="comment">//所有位归零</span></span><br><span class="line">b.<span class="built_in">reset</span>(<span class="number">3</span>); <span class="comment">//b的下标3处归零</span></span><br><span class="line">b.<span class="built_in">flip</span>(); <span class="comment">//b的所有⼆进制位逐位取反</span></span><br><span class="line"><span class="built_in">flip</span>(); <span class="comment">//把所有位取反，等价于~</span></span><br><span class="line"><span class="built_in">flip</span>(k); <span class="comment">//把第k位取反</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> a = b.<span class="built_in">to_ulong</span>(); <span class="comment">//b转换为unsigned long类型</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="九、位运算"><a href="#九、位运算" class="headerlink" title="九、位运算"></a>九、位运算</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x &gt;&gt; k &amp; <span class="number">1</span>;     <span class="comment">//求x的第k位数字</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">lowbit</span>(x) = x &amp; (-x);  <span class="comment">//求x的最后一位1的位置,如011001000会返回000001000,没有库函数,需要自己定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断奇偶</span></span><br><span class="line"><span class="keyword">if</span>（a&amp;<span class="number">1</span>) <span class="keyword">return</span> odd;<span class="comment">//奇</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> even;<span class="comment">//偶</span></span><br></pre></td></tr></table></figure><h3 id="十、常用库函数"><a href="#十、常用库函数" class="headerlink" title="十、常用库函数"></a>十、常用库函数</h3><p>reverse, unique, </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span>     <span class="comment">//头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());    <span class="comment">//翻转一个vector,O(n)</span></span><br><span class="line"><span class="built_in">reverse</span>(a, a + n);              <span class="comment">//翻转一个数组,第一个参数起始位置，第二个参数终止位置的后一个位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//unique函数作用的数组要相同的元素在一起,将不重复的数放在数组的前面，返回值是新数组的下一个位置</span></span><br><span class="line"><span class="built_in">unique</span>(a, a + n);</span><br><span class="line"><span class="type">int</span> m = <span class="built_in">unique</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()) – a.<span class="built_in">begin</span>(); <span class="comment">//数组当中不同元素的数量</span></span><br><span class="line"><span class="type">int</span> m = <span class="built_in">unique</span>(a , a + n) – a;</span><br><span class="line">a.<span class="built_in">erase</span>(<span class="built_in">unique</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()), a.<span class="built_in">end</span>());<span class="comment">//删除重复元素</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line"><span class="built_in">random_shuffle</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());     <span class="comment">//随机打乱数组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());                    <span class="comment">//从小到大排序</span></span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());    <span class="comment">//从大到小排序</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>  <span class="comment">//判断a是否应该排在b前面,1:a排在b前面,0:a排在b后面</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), cmp);               <span class="comment">//自定义排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//排序结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">rec</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(rec a, rec b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x &gt; b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rec a[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">sort</span>(a, a + <span class="number">5</span>, cmp);</span><br><span class="line"></span><br><span class="line"><span class="built_in">lower_bound</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), x)      <span class="comment">//返回指向第一个大于等于x的元素的位置的迭代器(指针)</span></span><br><span class="line"><span class="built_in">upper_bound</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), x)      <span class="comment">//返回指向第一个大于x的元素的位置的迭代器(指针)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="十一、常用技巧"><a href="#十一、常用技巧" class="headerlink" title="十一、常用技巧"></a>十一、常用技巧</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求横纵坐标，假设是n行m列矩阵,i是序列（从0开始）</span></span><br><span class="line">x=i/n; y=i/m;</span><br><span class="line">i=x*n+m;<span class="comment">//还原</span></span><br></pre></td></tr></table></figure><p><a href="https://www.acwing.com/blog/content/32/">由数据范围反推算法复杂度以及算法内容</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda</title>
      <link href="/2023/05/01/Anaconda/"/>
      <url>/2023/05/01/Anaconda/</url>
      
        <content type="html"><![CDATA[<h1 id="AI常用工具"><a href="#AI常用工具" class="headerlink" title="AI常用工具"></a>AI常用工具</h1><p>基础工具安装：CUDA👉Anaconda👉Jupyter👉Matplotlib👉NumpyPyTorch</p><p>快速入门：<a href="https://www.bilibili.com/video/BV1oF411s7RS/?spm_id_from=333.788.top_right_bar_window_history.content.click&amp;vd_source=15aaf2f3032abe28c98a76535d8c050b">【CUDA + Anaconda 】深度学习环境配置，3分钟搞定简单粗暴<em>哔哩哔哩</em></a></p><p>Linux安装方法：</p><p><a href="https://blog.csdn.net/arno_an/article/details/105229780">(47条消息) Linux系统安装Anaconda3保姆级教程_anaconda3 linux_zhianY的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_31225201/article/details/119458258">Linux] 安装Anaconda后出现的conda: command not found问题_让我安静会的博客-CSDN博客</a></p><p>安装失败解决办法：</p><ol><li>删除.condarc文件</li></ol><h2 id="一、命令行"><a href="#一、命令行" class="headerlink" title="一、命令行"></a>一、命令行</h2><ol><li>常用conda命令</li></ol>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">conda --version <span class="comment">#查看conda版本，验证是否安装</span></span><br><span class="line">conda update conda <span class="comment">#更新至最新版本，也会更新其它相关包</span></span><br><span class="line">conda update --all <span class="comment">#更新所有包</span></span><br><span class="line">conda update package_name <span class="comment">#更新指定的包</span></span><br><span class="line">conda create -n env_name package_name <span class="comment">#创建名为env_name的新环境，并在该环境下安装名为package_name 的包，可以指定新环境的版本号，例如：conda create -n python2 python=python2.7 numpy pandas，创建了python2环境，python版本为2.7，同时还安装了numpy pandas包</span></span><br><span class="line"><span class="built_in">source</span> activate env_name <span class="comment">#切换至env_name环境</span></span><br><span class="line"><span class="built_in">source</span> deactivate <span class="comment">#退出环境</span></span><br><span class="line">conda info -e <span class="comment">#显示所有已经创建的环境</span></span><br><span class="line">conda create --name new_env_name --<span class="built_in">clone</span> old_env_name <span class="comment">#复制old_env_name为new_env_name</span></span><br><span class="line">conda remove --name env_name –all <span class="comment">#删除环境</span></span><br><span class="line">conda list <span class="comment">#查看所有已经安装的包</span></span><br><span class="line">conda install package_name <span class="comment">#在当前环境中安装包</span></span><br><span class="line">conda install --name env_name package_name <span class="comment">#在指定环境中安装包</span></span><br><span class="line">conda remove -- name env_name package <span class="comment">#删除指定环境中的包</span></span><br><span class="line">conda remove package <span class="comment">#删除当前环境中的包</span></span><br><span class="line">conda <span class="built_in">env</span> remove -n env_name <span class="comment">#采用第10条的方法删除环境失败时，可采用这种方法</span></span><br></pre></td></tr></table></figure><ol><li>打开jupyter<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate name(虚拟环境名称)</span><br><span class="line">jupyter notebook  ```bash</span><br></pre></td></tr></table></figure></li></ol><p>​    快捷键：</p><p>按【H】键，会调出键盘快捷键</p><p><strong>命令行模式:</strong></p><p>Esc键 进入命令行模式</p><p>单元格左边变蓝色</p><p>常用快捷键</p><p>【Ctrl+Enter】：是运行选中的单元格，他会停留在此</p><p>【Alt+Enter】：是运行单元格并且在下面插入一个新的单元格</p><p>【Shift+Enter】:是 运行单元格, 并选择下面的单元格</p><p>【Tab】键用来代码补全</p><p>【A】键：above是在上面插入单元格</p><p>【B】键：below 是在下面插入单元格</p><p>【M】键： 是把单元格变成Markdown</p><p>【Y】键：是把单元格变成代码块</p><p>两下【D】键：删除选中的单元格</p><p><strong>编辑模式:</strong><br>Enter键 进入编辑模式</p><p>常用快捷键</p><p>【Ctrl+/】:代码注释</p><p>【Ctrl+D】:删除整行</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo常见问题</title>
      <link href="/2023/05/01/Hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2023/05/01/Hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo常见问题"><a href="#Hexo常见问题" class="headerlink" title="Hexo常见问题"></a>Hexo常见问题</h1><h3 id="一、-Spawn-failed"><a href="#一、-Spawn-failed" class="headerlink" title="一、 Spawn failed"></a>一、 Spawn failed</h3><figure class="highlight plaintext"><figcaption><span>cl; hexo g; hexo d```后出现下面FATAL：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```bash</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (F:\Blog\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (events.js:400:28)</span><br><span class="line">      at ChildProcess.cp.emit (F:\Blog\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:282:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure><p>解决方法：<strong>大部分原因是网络不好，多上传几次，或找个网络稳定的地方上传。</strong></p><blockquote><p> Details:</p><p>从输出信息来看，您在尝试使用Hexo 进行部署时遇到了some问题。具体而言：</p><p>1．Hexo 在尝试将 public 文件夹中的文件复制到远程GitHub仓库时失败了。这可能是因为：</p><p>—您的GitHub 账户访问令牌已过期，Hexo无法连接到GitHub。解决方案是重新生成一个GitHub访问令牌，并在Hexo配置文件中更新。—您的GitHub仓库不存在或Hexo无法访问。确保您已经创建了仓库，并为Hexo授予了正确的访问权限。</p><p>—网络连接问题导致连接超时。这可能是暂时的，请重试部署。</p><p>2．Hexo在尝试读取远程仓库中的数据时失败了，显示 fatal：Could not read from remote repository。这说明 Hexo 无法从GitHub仓库中获取数据，原因同上。 3．最终Hexo 抛出 FATAL错误，并给出了troubleshooting 文档链接以供参考。</p><p>解决此问题的步骤为：</p><p>1．确认您的GitHub 访问令牌、仓库设置及网络连接没有问题。</p><p>2．清除Hexo的部署缓存，重新初始化部署配置。具体命令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line">hexo clean </span><br><span class="line">hexo deploy --setup </span><br></pre></td></tr></table></figure><p>3．重新运行<code>hexo deploy</code>命令进行部署。 </p><p>4．如果仍失败，可以尝试输入</p><p><code>hexo deploy --debug</code></p><p>命令进行调试，查看更为详细的错误输出信息。</p><p>5．最后，您也可以在Hexo的troubleshooting文档中寻找更多解决方案。</p><p>希望以上信息能帮助您解决部署问题。如果有任何其他问题，欢迎在Hexo论坛或GitHub提出。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OI工具</title>
      <link href="/2023/04/27/OI%E5%B7%A5%E5%85%B7/"/>
      <url>/2023/04/27/OI%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="OI工具"><a href="#OI工具" class="headerlink" title="OI工具"></a>OI工具</h1><h2 id="一、CP-Editor-编译器"><a href="#一、CP-Editor-编译器" class="headerlink" title="一、CP Editor 编译器"></a>一、CP Editor 编译器</h2><p>（<del>Copy and Paste Editorial</del>）</p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="(1) 安装"></a>(1) 安装</h3><ol><li><p>文字教程：<a href="https://oi-wiki.org/tools/editor/cpeditor/">CP Editor - OI Wiki (oi-wiki.org)</a></p></li><li><p>视频教程：<a href="https://www.bilibili.com/video/BV1mX4y1V7S8/?vd_source=15aaf2f3032abe28c98a76535d8c050b">简单的 CP Editor 使用教程！_哔哩哔哩_bilibili</a></p></li></ol><h3 id="2-日常调教-（Ctrl-P打开设置）"><a href="#2-日常调教-（Ctrl-P打开设置）" class="headerlink" title="(2) 日常调教  （Ctrl+P打开设置）"></a>(2) 日常调教  （Ctrl+P打开设置）</h3><ul><li><h4 id="设置模板"><a href="#设置模板" class="headerlink" title="设置模板"></a>设置模板</h4><ol><li><p>管理员身份的cmd进入cf_v1.0.0_windows_64文件路径。(找不到路径就在cp editor的设置里找)</p></li><li><p>命令<code>cf config</code>跳出选项。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Configure the tool</span><br><span class="line">0) login</span><br><span class="line">1) add a template</span><br><span class="line">2) delete a template</span><br><span class="line">3) set default template</span><br><span class="line">4) run &quot;cf gen&quot; after &quot;cf parse&quot;</span><br><span class="line">5) set host domain</span><br><span class="line">6) set proxy</span><br><span class="line">7) set folders&#x27; name</span><br><span class="line">Please choose one (index):</span><br></pre></td></tr></table></figure></li><li><p>选<code>0</code>登录后，再调出上述界面。</p></li><li><p>选<code>1</code>添加模板，再选<code>language</code>里的<code>50</code>(G++14)。在<code>Template absolute path(e.g. &quot;~/template/io.cpp&quot;):</code>之后输入模板文件路径，不用带引号。<code>suffix</code>不需要填，直接回车。</p></li><li><p><code>alias</code>输入<code>cpp</code>。</p></li><li><p><code>`Before script</code>也不需要填，直接回车。</p></li><li><p><code>Script</code>下直接复制<code>./$%file%$.exe</code>输入就行。</p></li><li><p><code>After Script</code>直接回车。</p></li><li><p><code>Make it default (y/n)?</code> 输入<code>y</code>。<strong>这样上传模板就成功了。</strong></p></li><li><p>用<code>cf config</code>调出选项，用3，2来设置默认模板和删除模板。</p></li></ol></li></ul><ul><li><h4 id="CF-Tool爬取OJ"><a href="#CF-Tool爬取OJ" class="headerlink" title="CF Tool爬取OJ"></a>CF Tool爬取OJ</h4><p><em>(需事先安装Competitive Companion 拓展(CF tool)</em></p><ol><li>直接爬取：在左键浏览器CF Tool插件$\rightarrow$Parse with$\rightarrow$Problem parser$\rightarrow$选择相应OJ内核。</li><li>开启默认：在左键浏览器CF Tool插件$\rightarrow$管理拓展$\rightarrow$扩展选项$\rightarrow$Custom rules$\rightarrow$设置OJ网址和OJ类型。</li></ol></li></ul><h2 id="二、相关网站"><a href="#二、相关网站" class="headerlink" title="二、相关网站"></a>二、相关网站</h2><ul><li><a href="https://comphub.notion.site/comphub/c5f45f67535e452ba475497c46830534?v=fcfac8df9b9d4fe2883226a3580c2f1a">OJ日历</a>：比赛日历</li><li><a href="https://oi-wiki.org/">OI Wiki</a>：知识点百科</li><li><a href="https://cftracker.netlify.app/contests">CF Tracker</a>：CodeForces赛事题目统计</li><li><a href="https://zh.moegirl.org.cn/OI%E6%A2%97">OI梗百科</a></li></ul><h2 id="三、编译器"><a href="#三、编译器" class="headerlink" title="三、编译器"></a>三、编译器</h2><p><a href="https://blog.csdn.net/Cykinter/article/details/113796587">VSCode打造成oi刷题利器</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科研工具</title>
      <link href="/2023/04/15/%E7%A7%91%E7%A0%94%E5%B7%A5%E5%85%B7/"/>
      <url>/2023/04/15/%E7%A7%91%E7%A0%94%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="科研工具"><a href="#科研工具" class="headerlink" title="科研工具"></a>科研工具</h1><h1 id="一、tyora"><a href="#一、tyora" class="headerlink" title="一、tyora"></a>一、tyora</h1><p>破解版安装：<a href="https://www.bilibili.com/video/BV1zX4y1X73T/?spm_id_from=333.337.search-card.all.click">Typora免费安装使用，直接安装无废话(最新版本也可使用）_哔哩哔哩_bilibili</a></p><p>使用教程：<a href="https://www.bilibili.com/video/BV1hG411p7fX/?spm_id_from=333.999.0.0&amp;vd_source=15aaf2f3032abe28c98a76535d8c050b">[Markdown + Typora/VSCode 超全教程] 给大一新生安利的文本神器 !_哔哩哔哩_bilibili</a></p><h1 id="二、LaTex公式"><a href="#二、LaTex公式" class="headerlink" title="二、LaTex公式"></a>二、LaTex公式</h1><p>公式表：<a href="https://blog.csdn.net/LCCFlccf/article/details/89643585">(42条消息) LaTeX数学符号大全_latex 数学符号_LCCFlccf的博客-CSDN博客</a></p><p>公式编辑器：<a href="https://www.latexlive.com/">在线LaTeX公式编辑器-编辑器 (latexlive.com)</a></p><p>图片提取：</p><h1 id="三、Markdown"><a href="#三、Markdown" class="headerlink" title="三、Markdown"></a>三、Markdown</h1><p>语法：<a href="https://markdown.com.cn/intro.html">Markdown 入门基础 | Markdown 官方教程</a></p><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/#picgo-is-here">图床Picgo使用手册</a></p><h1 id="四、卡西欧fx991"><a href="#四、卡西欧fx991" class="headerlink" title="四、卡西欧fx991"></a>四、卡西欧fx991</h1><p><a href="https://www.bilibili.com/video/BV1gY411L71c/?spm_id_from=333.999.0.0&amp;vd_source=15aaf2f3032abe28c98a76535d8c050b">【B站最全】卡西欧fx991计算器使用教程升级版_哔哩哔哩_bilibili</a></p><h1 id="五、MatLab安装"><a href="#五、MatLab安装" class="headerlink" title="五、MatLab安装"></a>五、MatLab安装</h1><p><a href="https://blog.csdn.net/qq_44955314/article/details/120004211">(42条消息) 最新MATLAB R2020b超详细安装教程（附完整安装文件）_matlab2020b安装教程_dew_142857的博客-CSDN博客</a></p><h1 id="六、codeforces使用教程"><a href="#六、codeforces使用教程" class="headerlink" title="六、codeforces使用教程"></a>六、codeforces使用教程</h1><p><a href="https://blog.csdn.net/bwabdbkjdbkjwabd/article/details/119620156">CodeForce使用说明超详细！！！！！</a></p><p><a href="https://zhuanlan.zhihu.com/p/71674596">【洛谷日报#116】Codeforces快速精通</a></p><h1 id="七、lingo安装"><a href="#七、lingo安装" class="headerlink" title="七、lingo安装"></a>七、lingo安装</h1><p><a href="https://blog.csdn.net/GODSuner/article/details/107435105">Lingo 18.0及其安装教程</a></p><h1 id="八、新的导师评价网"><a href="#八、新的导师评价网" class="headerlink" title="八、新的导师评价网"></a>八、新的导师评价网</h1><p><a href="https://www.yankong.org/review">https://www.yankong.org/review</a></p><h1 id="九、R语言"><a href="#九、R语言" class="headerlink" title="九、R语言"></a>九、R语言</h1><p>教程大全：<a href="https://space.bilibili.com/237533276/channel/series">借我一生8888的个人空间_bilibili</a></p><h1 id="十、Minitab"><a href="#十、Minitab" class="headerlink" title="十、Minitab"></a>十、Minitab</h1><p><a href="https://www.bilibili.com/video/BV1dB4y1T7e2/?p=2&amp;spm_id_from=pageDriver&amp;vd_source=15aaf2f3032abe28c98a76535d8c050b">序言 Minitab功能介绍_哔哩哔哩_bilibili</a></p>]]></content>
      
      
      <categories>
          
          <category> 基础学科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包</title>
      <link href="/2023/04/05/%E8%83%8C%E5%8C%85/"/>
      <url>/2023/04/05/%E8%83%8C%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h1><h2 id="一、01背包"><a href="#一、01背包" class="headerlink" title="一、01背包"></a>一、01背包</h2><p>对前i个物品，都有选或不选的01状态。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=m; j&gt;=w[i]; j--)</span><br><span class="line">    dp[j]=<span class="built_in">max</span>(dp[j], dp[ j-w[i] ]+v[i]);</span><br></pre></td></tr></table></figure><h2 id="二、完全背包问题"><a href="#二、完全背包问题" class="headerlink" title="二、完全背包问题"></a>二、完全背包问题</h2><p>每种物品可无限取用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> j=w[i]; j&lt;=m; j++)</span><br><span class="line">    dp[j]=<span class="built_in">max</span>( dp[j], dp[ j-w[i] ]+v[i]);</span><br></pre></td></tr></table></figure><h2 id="三、多重背包问题"><a href="#三、多重背包问题" class="headerlink" title="三、多重背包问题"></a>三、多重背包问题</h2><p>每种物品有限取。</p><h3 id="一-二进制优化"><a href="#一-二进制优化" class="headerlink" title="(一)二进制优化"></a>(一)二进制优化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> k=<span class="number">1</span>, a,b,s; cin&gt;&gt;a&gt;&gt;b&gt;&gt;s;</span><br><span class="line">  <span class="keyword">while</span>(k&lt;=s)</span><br><span class="line">  &#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    v[cnt]=k*a; w[cnt]=k*b;</span><br><span class="line">    s-=k; k*=<span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(s&gt;<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    v[cnt]=s*a; w[cnt]=s*b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">n=cnt;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> j=m; j&gt;=v[i]; j--)</span><br><span class="line">    dp[j]=<span class="built_in">max</span>(dp[j], dp[j-v[i]]+w[i]);</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;dp[m];</span><br></pre></td></tr></table></figure><h3 id="三-单调队列优化"><a href="#三-单调队列优化" class="headerlink" title="(三)单调队列优化"></a>(三)单调队列优化</h3><h2 id="三、混合背包"><a href="#三、混合背包" class="headerlink" title="三、混合背包"></a>三、混合背包</h2><ul><li><p>第一类物品只能用1次（01背包）；</p></li><li><p>第二类物品可以用无限次（完全背包）；</p></li><li><p>第三类物品最多只能用 $S_i$次（多重背包）；</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(s&lt;<span class="number">0</span>) s=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="number">0</span>) s=m/a;</span><br><span class="line"><span class="comment">//之后多重背包模板</span></span><br></pre></td></tr></table></figure><p>将混合背包转化位多重背包问题。</p><h2 id="四、二维背包"><a href="#四、二维背包" class="headerlink" title="四、二维背包"></a>四、二维背包</h2><p>有两个限制，设置二维数组，两层遍历。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> j=V; j&gt;=v[i]; j++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=M; k&gt;=m[i]; k++)</span><br><span class="line">      dp[j][k]=<span class="built_in">max</span>(dp[j][k], dp[j-v[i]][k-m[i]]+w[i]);</span><br><span class="line">cout&lt;&lt;dp[V][M];</span><br></pre></td></tr></table></figure><h2 id="五、分组背包"><a href="#五、分组背包" class="headerlink" title="五、分组背包"></a>五、分组背包</h2><p>物品分为n组，每组只能选一个。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> j=m; j&gt;=<span class="number">1</span>; j--)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>; k&gt;=s[i]; k++)</span><br><span class="line">      <span class="keyword">if</span>(v[i][k]&lt;=j) dp[j]=<span class="built_in">max</span>(dp[j], dp[j-v[i][k]]+w[i][k]);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多元微分学</title>
      <link href="/2023/04/03/%E5%A4%9A%E5%85%83%E5%BE%AE%E5%88%86%E5%AD%A6/"/>
      <url>/2023/04/03/%E5%A4%9A%E5%85%83%E5%BE%AE%E5%88%86%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="高数-多元微分学"><a href="#高数-多元微分学" class="headerlink" title="高数|多元微分学"></a>高数|多元微分学</h1><h2 id="一、偏导数"><a href="#一、偏导数" class="headerlink" title="一、偏导数"></a>一、偏导数</h2><p>初等函数，复合函数，隐函数</p><h2 id="二、全微分"><a href="#二、全微分" class="headerlink" title="二、全微分"></a>二、全微分</h2><p>初等函数，复合函数</p><p>变型：已知全微分求参。利用”对两个函数的偏微分与顺序无关“的恒等性质列出方程。</p><h2 id="三、极值"><a href="#三、极值" class="headerlink" title="三、极值"></a>三、极值</h2><p>求出偏导数为0的解，用$B^2-AC$判断极值点的情况。</p><p>对于隐函数，需要求出符合元隐函数条件的 偏导数为0的解，即还需要联立原方程。</p><h2 id="四、最值"><a href="#四、最值" class="headerlink" title="四、最值"></a>四、最值</h2><ol><li>先求出区间，然后利用求极值的方法，解出最值。</li><li>不等式。</li></ol><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 基础学科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极限</title>
      <link href="/2023/04/03/%E6%9E%81%E9%99%90/"/>
      <url>/2023/04/03/%E6%9E%81%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h1 id="高数极限"><a href="#高数极限" class="headerlink" title="高数极限"></a>高数极限</h1><p>本博客可以作为自学材料，也可作为<a href="https://www.bilibili.com/video/BV1Gr4y1P7Rt/?spm_id_from=333.788&amp;vd_source=15aaf2f3032abe28c98a76535d8c050b">考研竞赛凯哥-极限</a>的讲义。</p><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><ol><li><p>无穷小代换：被代换部分与整体为乘除关系，即被代换部分为因子。</p><blockquote><p>例：$\lim_{x\rightarrow0}\frac{x-\sin{x}}{x^3}$中不可把$\sin{x}$替换为x。</p></blockquote></li><li><p>特殊无穷小代换：若α,β→0，且α ~ α~1~ ， β ~ β~1~ ， 则α±β ~ α~1~±β~1~（可用等比定理证明）。</p><blockquote><p>例：$x-\sin{x}$可替换为$arcsin{x}-x$。</p></blockquote></li><li><p>局部代入：非零因子才能局部代换。</p><blockquote><p>例：$\lim_{x\rightarrow0}\frac{x-\sin{x}\cos{x}}{x^3}$不能把$\cos{x}$代为1。</p></blockquote></li><li><p><a href="https://zhuanlan.zhihu.com/p/60268688">极限拆分</a>：每个函数的极限都存在。</p><blockquote><p>例: </p></blockquote></li></ol><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><ol><li><p><a href="https://baijiahao.baidu.com/s?id=1681664435625655973">六小函数图像</a>:  $xe^x, x\ln{x}, \frac{x}{e^x}, \frac{\ln{x}}{x}, \frac{e^x}{x}, \frac{x}{\ln{x}}$</p></li><li><p><a href="https://zhuanlan.zhihu.com/p/25048945">两个重要极限</a>：</p><p>$\lim_{x\rightarrow0} $ $\frac{sinx}{x}$ = 1</p><p>$\lim<em>{x\rightarrow0}$ $(1+x)^\frac{1}{x}$ = $\lim</em>{x\rightarrow+\infty}$ $(1+\frac{1}{x})^x$ = e</p></li><li><p>无穷小代换 (when $x\rightarrow0$)：</p><p>$x\sim\sin{x}\sim\arcsin{x}\sim\tan{x}\sim\arctan{x}\sim\ln{(x+1)\sim e^x-1}$</p><p>$\lim_{x\rightarrow1}(x-1)\sim\ln{x}$🖊</p><p>$x-sin{x}\sim\frac{1}{6}x^3\sim\arcsin{x}-x$</p><p>$\tan{x}-x\sim\frac{1}{3}x^3\sim x-\arctan{x}$</p><p>$\tan{x}-\sin{x}\sim\frac{1}{2}x^3\sim\arcsin{x}-\arctan{x}$</p><p>$x-\ln(1+x)\sim\frac{1}{2}x^2\sim1-\cos{x}$</p><p>$a^x-1\sim x\ln{a}$</p><p>$(1+ax)^b\sim abx$</p><script type="math/tex; mode=display">\sqrt{1+x}-\sqrt{1-x}\sim x</script></li><li><p>等价无穷大代换：</p><p>$\alpha\sim\beta\rightarrow+0, 则\ln{\alpha}\sim\ln{\beta}\rightarrow-\infty$</p><blockquote><p>证明： $\frac{\ln{a}}{\ln{b}}=\frac{\ln{a}-\ln{b}}{\ln{b}}+1=\frac{\ln{\frac{a}{b}}}{\ln{b}}+1=1$</p></blockquote><ol><li>$\lim<em>{x\rightarrow+0}{\frac{\ln{\arctan{x}}}{\ln{(\ln(1+x))}}}=\lim</em>{x\rightarrow+0}{\frac{\ln{x}}{\ln{x}}}=1$</li><li>$\lim<em>{x\rightarrow+0}{(e^x-1-x)}^{\frac{1}{x}}=e^{\lim</em>{x\rightarrow+0}{\frac{\ln(e^x-1-x)}{\ln{x}}}}=e^{\lim<em>{x\rightarrow+0}{\frac{\ln{\frac{x^2}{2}}}{\ln{x}}}}=e^{\lim</em>{x\rightarrow+0}{\frac{2\ln{x}-\ln{2}}{\ln{x}}}}=e^2$</li><li>$\lim<em>{x\rightarrow{+}\infty}{(x^{\frac{1}{x}}-1)}^{\frac{1}{\ln{x}}}=e^{\lim</em>{x\rightarrow{+}\infty}\frac{1}{\ln{x}}\ln{x^{\frac{1}{x}}-1}}e^{\lim_{x\rightarrow{+}\infty}\frac{1}{\ln{x}}(\ln{\ln{x}}-\ln{x})}=e^{-1}$</li></ol></li><li><p><a href="[【数学135】4分钟通透泰勒展开式！看完不会算我输！_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV128411L7Nx/?spm_id_from=333.788.top_right_bar_window_custom_collection.content.click&amp;vd_source=15aaf2f3032abe28c98a76535d8c050b">泰勒展开（速记）</a>)</p></li></ol><h2 id="题型总结"><a href="#题型总结" class="headerlink" title="题型总结"></a>题型总结</h2><h3 id="型一：构造等价无穷小"><a href="#型一：构造等价无穷小" class="headerlink" title="型一：构造等价无穷小"></a>型一：构造等价无穷小</h3><ol><li>求$\lim_{x\rightarrow0}\frac{\sqrt[m]{1+ax}\sqrt[m]{1+bx}-1}{x}$</li></ol><blockquote><p>法一：想到$\lim_{x\rightarrow0}\sqrt[m]{1+ax}-1\sim\frac{a}{m}x$,则应围绕该项配凑。</p></blockquote><p>​    $=\lim_{x\rightarrow0}\frac{\sqrt[m]{1+ax}-1}{x}\sqrt[n]{1+bx}+\frac{\sqrt[n]{1+bx}-1}{x}$</p><p>​    $=\lim_{x\rightarrow0}\frac{ax}{mx}\bullet1+\frac{bx}{nx}$</p><p>​    $=\frac{a}{m}+\frac{b}{n}$</p><blockquote><p>我们可以总结出$AB-1=(A-1)B+(B-1)$的恒等式。</p><p>法二：发现分子的结构，套用🖊公式    </p></blockquote><p>​    $=\lim_{x\rightarrow0}\frac{\ln{\sqrt[m]{1+ax}\sqrt[n]{1+bx}}}{x}$</p><p>​    $=\lim<em>{x\rightarrow0}\frac{\ln{\sqrt[m]{1+ax}}}{x}+\lim</em>{x\rightarrow0}\frac{\ln{\sqrt[n]{1+bx}}}{x}$</p><p>​    $=\lim<em>{x\rightarrow0}\frac{\sqrt[m]{1+ax}-1}{x}+\lim</em>{x\rightarrow0}\frac{\sqrt[n]{1+bx}-1}{x}$</p><hr><p>​    2.求$\lim_{x\rightarrow0}\frac{1-\cos{x}\cos{2x}\cos{3x}\cdots\cos{nx}}{x^2}$</p><blockquote><p>法一：构造</p></blockquote><p>​    $=\lim<em>{x\rightarrow0}\frac{1-\cos{x}}{x^2}+lim</em>{x\rightarrow0}\cos{x}\frac{1-\cos{2x}\cos{3x}\cdots\cos{nx}}{x^2}$</p><p>​    $=\frac{1}{2}+\frac{1}{2}\times2^2+\frac{1}{2}\times{3^2}+\cdots$</p><p>​    $=\frac{1}{2}\times\frac{1}{6}n(n+1)(2n+1)$ (平方和公式)</p><blockquote><p>法二：🖊</p></blockquote><p>​    $=-\lim_{x\rightarrow0}\frac{\ln{\cos{x}\cos{2x}\cdots\cos{nx}}}{x^2}$</p><p>​    $=\lim_{x\rightarrow0}\sum_1^n\frac{1-\cos{ix}}{x^2}$</p><p>​    $=\lim_{x\rightarrow0}\sum_1^n\frac{(ix)^2}{2x^2}$</p><h3 id="型二：幂指函数-lim-u-x-v-x-取指对数-e-lim-u-x-ln-v-x"><a href="#型二：幂指函数-lim-u-x-v-x-取指对数-e-lim-u-x-ln-v-x" class="headerlink" title="型二：幂指函数($\lim{u(x)}^{v(x)}$)取指对数($e^{\lim{u(x)}\ln{v(x)}}$)"></a>型二：幂指函数($\lim{u(x)}^{v(x)}$)取指对数($e^{\lim{u(x)}\ln{v(x)}}$)</h3><ol><li><p>$\lim_{x\rightarrow0}\frac{\sin{x}}{x}^{\frac{1}{1-\cos{x}}}$</p><blockquote></blockquote></li><li><p>$\lim_{x\rightarrow0}\frac{1}{x3}[({\frac{2+\cos{x}}{3}})^x-1]$</p></li><li><p>$\lim_{x\rightarrow0}(\frac{e^x+e^{2x}+e^{3x}+\dots+e^{nx}}{n})^{\frac{e}{x}}$</p></li><li><p>$\lim_{x\rightarrow{+}\infty}[{\frac{(1+\frac{1}{x})^x}{e}]}^x$</p></li><li><p>$\lim_{x\rightarrow0}\frac{(3+2\tan{x})^x-3^x}{3\sin^2{x}+x^3\cos{\frac{1}{x}}}$</p><blockquote></blockquote></li><li><p>$f(x),g(x)$在x=0的领域U内有定义，且对$\forall x\in U$,均有$f(x)\not=g(x),且\lim<em>{x\rightarrow0}{f(x)=\lim</em>{x\rightarrow0}{g(x)}}=a&gt;0,求\lim_{x\rightarrow0}\frac{[f(x)]^{g(x)}-[g(x)]^{f(x)}}{f(x)-g(x)}$</p></li></ol><h3 id="型三：精度不够用泰勒"><a href="#型三：精度不够用泰勒" class="headerlink" title="型三：精度不够用泰勒"></a>型三：精度不够用泰勒</h3><ol><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 基础学科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础学科 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo自带命令</title>
      <link href="/2023/03/18/hello-world/"/>
      <url>/2023/03/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
