<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构</title>
      <link href="/2023/05/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2023/05/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>s</p><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>STL使用手册</title>
      <link href="/2023/05/06/STL/"/>
      <url>/2023/05/06/STL/</url>
      
        <content type="html"><![CDATA[<h1 id="STL-使用手册"><a href="#STL-使用手册" class="headerlink" title="STL 使用手册"></a>STL 使用手册</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//大部分容器都会有的功能</span></span><br><span class="line">.<span class="built_in">size</span>()<span class="comment">//元素个数</span></span><br><span class="line">.<span class="built_in">empty</span>()<span class="comment">//判断是否为空，空返回1</span></span><br><span class="line">.<span class="built_in">clear</span>()<span class="comment">//清空（队列、优先队列没有）</span></span><br></pre></td></tr></table></figure><h3 id="一、vector"><a href="#一、vector" class="headerlink" title="一、vector"></a>一、vector</h3><p>本质仍是数组，只是内存可以可以自动变化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;a;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;a[N];<span class="comment">//二维数组</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it;   <span class="comment">//迭代器、支持相加减。迭代器可以看成数据结构里的指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//增</span></span><br><span class="line">a.<span class="built_in">push_back</span>(x)<span class="comment">//元素x添加到a的尾部</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//删</span></span><br><span class="line">a.<span class="built_in">pop_back</span>()<span class="comment">//删除最后一个元素</span></span><br><span class="line">a.<span class="built_in">erase</span>()<span class="comment">//</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//查</span></span><br><span class="line">a.<span class="built_in">front</span>()<span class="comment">//返回第一个元素</span></span><br><span class="line">a.<span class="built_in">back</span>()<span class="comment">//返回最后一个元素</span></span><br><span class="line">a.<span class="built_in">begin</span>()<span class="comment">//返回第一个元素的迭代器</span></span><br><span class="line">a.<span class="built_in">end</span>()<span class="comment">////返回最后一个元素的迭代器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//算法</span></span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>()); <span class="comment">//排序(从小到大)</span></span><br><span class="line">a.<span class="built_in">erase</span>( (<span class="built_in">unique</span>(a.begin),a.<span class="built_in">end</span>()) ,a.<span class="built_in">end</span>()); <span class="comment">//unique()把不重复的元素移到前面来</span></span><br><span class="line"><span class="comment">//上面两步，生成无重复值的有序vector</span></span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;()) <span class="comment">//从大到小排序</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//遍历的三种方式</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;a.<span class="built_in">size</span>(); i++)</span><br><span class="line"><span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;::iterator i=a.<span class="built_in">begin</span>(); i!=a.<span class="built_in">end</span>(); i++) </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x:a)</span><br></pre></td></tr></table></figure><h3 id="二、pair-和-string"><a href="#二、pair-和-string" class="headerlink" title="二、pair 和 string"></a>二、pair 和 string</h3><p>pari，相当于结构体，按字典序，第一关键字为first，第二关键字为second。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line">pair&lt;<span class="type">int</span>,string&gt; p;</span><br><span class="line"></span><br><span class="line">p.<span class="built_in">first</span>();<span class="comment">//返回第一个元素</span></span><br><span class="line">p.<span class="built_in">second</span>();<span class="comment">//返回第二个元素</span></span><br></pre></td></tr></table></figure><p>string，字符串，内容为字符的数组。用法大抵相同。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line">string s; cin&gt;&gt;s;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数</span></span><br><span class="line">s.<span class="built_in">substr</span>(a,b);<span class="comment">//返回子串，从下标a返回b个字符</span></span><br><span class="line"><span class="built_in">transform</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>(),s.<span class="built_in">begin</span>(),::tolower); <span class="comment">//转换为小写</span></span><br><span class="line"><span class="built_in">transform</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>(),s.<span class="built_in">begin</span>(),::toupper);<span class="comment">//转换为大写</span></span><br></pre></td></tr></table></figure><h3 id="三、stack"><a href="#三、stack" class="headerlink" title="三、stack"></a>三、stack</h3><p>先进后出，类似汉诺塔。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;<span class="type">int</span>&gt;s;</span><br><span class="line"></span><br><span class="line">s.<span class="built_in">push</span>(x);   <span class="comment">//插入一个元素x</span></span><br><span class="line">s.<span class="built_in">pop</span>();     <span class="comment">//删除栈顶元素</span></span><br><span class="line"></span><br><span class="line">s.<span class="built_in">top</span>();     <span class="comment">//取出栈顶元素</span></span><br></pre></td></tr></table></figure><h3 id="四、queue-和-priority-queue"><a href="#四、queue-和-priority-queue" class="headerlink" title="四、queue 和 priority_queue"></a>四、queue 和 priority_queue</h3><p>队列queue相当于，栈的栈底开口出去，栈顶只能进去。优先队列priority_queue是可以自动排序的queue。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line"></span><br><span class="line">q.<span class="built_in">push</span>(x); <span class="comment">// 在队尾插入一个元素x</span></span><br><span class="line">q.<span class="built_in">pop</span>();   <span class="comment">// 弹出队头元素</span></span><br><span class="line"></span><br><span class="line">q.<span class="built_in">front</span>(); <span class="comment">// 返回队头</span></span><br><span class="line">q.<span class="built_in">back</span>();  <span class="comment">// 返回队尾</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; a;      <span class="comment">// 大根堆、优先弹出最大值</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; a;   <span class="comment">// 小根堆、优先弹出最小值</span></span><br><span class="line"></span><br><span class="line">a.<span class="built_in">push</span>(x); <span class="comment">// 插入一个元素x</span></span><br><span class="line">a.<span class="built_in">pop</span>();   <span class="comment">// 删除最大值</span></span><br><span class="line"></span><br><span class="line">a.<span class="built_in">top</span>();   <span class="comment">// 返回最大值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：二者没有clear函数！</span></span><br></pre></td></tr></table></figure><h3 id="五、deque"><a href="#五、deque" class="headerlink" title="五、deque"></a>五、deque</h3><p>队头队尾均可插入弹出。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">deque&lt;<span class="type">int</span>&gt; a;</span><br><span class="line"></span><br><span class="line">a.<span class="built_in">push_back</span>(x);   <span class="comment">// 在队尾插入一个元素x</span></span><br><span class="line">a.<span class="built_in">push_front</span>(x);  <span class="comment">// 在队头插入一个元素x</span></span><br><span class="line">a.<span class="built_in">pop_back</span>();     <span class="comment">// 弹出队尾元素</span></span><br><span class="line">a.<span class="built_in">pop_front</span>();    <span class="comment">// 弹出队头元素</span></span><br><span class="line"></span><br><span class="line">a.<span class="built_in">begin</span>();          <span class="comment">//返回队头的迭代器</span></span><br><span class="line">a.<span class="built_in">end</span>();            <span class="comment">//返回队尾后一个元素的迭代器</span></span><br><span class="line">a.<span class="built_in">front</span>();          <span class="comment">//返回队头元素</span></span><br><span class="line">a.<span class="built_in">back</span>();           <span class="comment">//返回队尾元素</span></span><br></pre></td></tr></table></figure><h3 id="六、set、multiset、unordered-set、unordered-multiset"><a href="#六、set、multiset、unordered-set、unordered-multiset" class="headerlink" title="六、set、multiset、unordered_set、unordered_multiset"></a>六、set、multiset、unordered_set、unordered_multiset</h3><p>​    “有序集合”和“有序多重集合”，即前者的元素不能重复，而后者可以包含若干个相等的元素。set和multiset的内部实现是一棵红黑树，它们支持的函数基本相同。</p><p>​    无序集合unordered_set与普通集合所有操作都一样，所有操作的时间复杂度变为了O(1)，但没有lower_bound和upper_bound操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">multiset&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line">s.<span class="built_in">insert</span>(x);</span><br><span class="line">s.<span class="built_in">erase</span>(it);    <span class="comment">// 设it是一个迭代器，s.erase(it) 从s中删除迭代器it指向的元素</span></span><br><span class="line"></span><br><span class="line">s.<span class="built_in">begin</span>(); s.<span class="built_in">end</span>();</span><br><span class="line">s.<span class="built_in">find</span>(x)<span class="comment">//返回指向该元素的迭代器。若不存在，则返回s.end()</span></span><br><span class="line">s.<span class="built_in">lower_bound</span>(x); <span class="comment">// 查找大于等于x的元素中最小的一个，并返回指向该元素的迭代器。</span></span><br><span class="line">s.<span class="built_in">upper_bound</span>(x); <span class="comment">// 查找大于x的元素中最小的一个，并返回指向该元素的迭代器。</span></span><br><span class="line">s.<span class="built_in">count</span>(x);     <span class="comment">// 返回集合s中等于x的元素个数</span></span><br><span class="line"></span><br><span class="line">unordered_set&lt;<span class="type">int</span>&gt; a;       <span class="comment">//哈希表实现,不能有重复元素</span></span><br><span class="line">unordered_multiset&lt;<span class="type">int</span>&gt; a;  <span class="comment">//哈希表实现,可以有重复元素</span></span><br></pre></td></tr></table></figure><h3 id="七、map、unordered-map"><a href="#七、map、unordered-map" class="headerlink" title="七、map、unordered_map"></a>七、map、unordered_map</h3><p>map容器是一个键值对key-value的映射，其内部实现是一棵以key为关键码的红黑树,map的key和value可以是任意类型，其中key必须定义小于号运算符。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">map&lt;string, <span class="type">int</span>&gt; m;</span><br><span class="line">m[<span class="string">&quot;headm&quot;</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">m.<span class="built_in">insert</span>(&#123;one,<span class="number">2</span>&#125;);</span><br><span class="line">m.<span class="built_in">erase</span>(x);</span><br><span class="line"></span><br><span class="line">a.<span class="built_in">begin</span>();</span><br><span class="line">a.<span class="built_in">end</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找map中是否存在key</span></span><br><span class="line">map.<span class="built_in">count</span>(key) &gt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (a.<span class="built_in">find</span>(x) == a.<span class="built_in">end</span>());   <span class="comment">// 判断在映射a中x是否存在，原理是a.find(x)如果找到了会返回x的迭代器，没找到返回a.end()</span></span><br><span class="line"></span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; a;  <span class="comment">//哈希表实现</span></span><br></pre></td></tr></table></figure><h3 id="八、bitset"><a href="#八、bitset" class="headerlink" title="八、bitset"></a>八、bitset</h3><p>bitset相当于⼀个数组，但是它是从⼆进制的低位到⾼位分别为b[0]、 b[1]……的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">bitset&lt;1000&gt; a;</span><br><span class="line"><span class="comment">// 初始化⽅式：</span></span><br><span class="line">bitset&lt;5&gt; b; 都为<span class="number">0</span></span><br><span class="line"><span class="function">bitset&lt;5&gt; <span class="title">b</span><span class="params">(u)</span></span>; u为<span class="type">unsigned</span> <span class="type">int</span>，如果u = <span class="number">1</span>，则输出b的结果为<span class="number">00001</span></span><br><span class="line">bitset&lt;<span class="number">8</span>&gt; <span class="built_in">b</span>(s); s为字符串，如<span class="string">&quot;1101&quot;</span>，则输出b的结果为<span class="number">00001101</span>，在前⾯补<span class="number">0</span></span><br><span class="line"><span class="function">bitset&lt;5&gt; <span class="title">b</span><span class="params">(s, pos, n)</span></span>; 从字符串的s[pos]开始， n位⻓度</span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">b.<span class="built_in">any</span>(); <span class="comment">//b中是否存在1的⼆进制位</span></span><br><span class="line">b.<span class="built_in">none</span>(); <span class="comment">//b中不存在1吗？</span></span><br><span class="line">b.<span class="built_in">count</span>(); <span class="comment">//b中1的⼆进制位的个数</span></span><br><span class="line">b.<span class="built_in">size</span>(); <span class="comment">//b中⼆进制位的个数</span></span><br><span class="line">b.<span class="built_in">test</span>(<span class="number">2</span>); <span class="comment">//测试下标为2处是否⼆进制位为1</span></span><br><span class="line">b.<span class="built_in">set</span>(<span class="number">4</span>); <span class="comment">//把b的下标为4处置1</span></span><br><span class="line">b.<span class="built_in">reset</span>(); <span class="comment">//所有位归零</span></span><br><span class="line">b.<span class="built_in">reset</span>(<span class="number">3</span>); <span class="comment">//b的下标3处归零</span></span><br><span class="line">b.<span class="built_in">flip</span>(); <span class="comment">//b的所有⼆进制位逐位取反</span></span><br><span class="line"><span class="built_in">flip</span>(); <span class="comment">//把所有位取反，等价于~</span></span><br><span class="line"><span class="built_in">flip</span>(k); <span class="comment">//把第k位取反</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> a = b.<span class="built_in">to_ulong</span>(); <span class="comment">//b转换为unsigned long类型</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="九、位运算"><a href="#九、位运算" class="headerlink" title="九、位运算"></a>九、位运算</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x &gt;&gt; k &amp; <span class="number">1</span>;     <span class="comment">//求x的第k位数字</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">lowbit</span>(x) = x &amp; (-x);  <span class="comment">//求x的最后一位1的位置,如011001000会返回000001000,没有库函数,需要自己定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断奇偶</span></span><br><span class="line"><span class="keyword">if</span>（a&amp;<span class="number">1</span>) <span class="keyword">return</span> odd;<span class="comment">//奇</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> even;<span class="comment">//偶</span></span><br></pre></td></tr></table></figure><h3 id="十、常用库函数"><a href="#十、常用库函数" class="headerlink" title="十、常用库函数"></a>十、常用库函数</h3><p>reverse, unique, </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span>     <span class="comment">//头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());    <span class="comment">//翻转一个vector,O(n)</span></span><br><span class="line"><span class="built_in">reverse</span>(a, a + n);              <span class="comment">//翻转一个数组,第一个参数起始位置，第二个参数终止位置的后一个位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//unique函数作用的数组要相同的元素在一起,将不重复的数放在数组的前面，返回值是新数组的下一个位置</span></span><br><span class="line"><span class="built_in">unique</span>(a, a + n);</span><br><span class="line"><span class="type">int</span> m = <span class="built_in">unique</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()) – a.<span class="built_in">begin</span>(); <span class="comment">//数组当中不同元素的数量</span></span><br><span class="line"><span class="type">int</span> m = <span class="built_in">unique</span>(a , a + n) – a;</span><br><span class="line">a.<span class="built_in">erase</span>(<span class="built_in">unique</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()), a.<span class="built_in">end</span>());<span class="comment">//删除重复元素</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line"><span class="built_in">random_shuffle</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());     <span class="comment">//随机打乱数组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());                    <span class="comment">//从小到大排序</span></span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());    <span class="comment">//从大到小排序</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>  <span class="comment">//判断a是否应该排在b前面,1:a排在b前面,0:a排在b后面</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), cmp);               <span class="comment">//自定义排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//排序结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">rec</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(rec a, rec b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x &gt; b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rec a[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">sort</span>(a, a + <span class="number">5</span>, cmp);</span><br><span class="line"></span><br><span class="line"><span class="built_in">lower_bound</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), x)      <span class="comment">//返回指向第一个大于等于x的元素的位置的迭代器(指针)</span></span><br><span class="line"><span class="built_in">upper_bound</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), x)      <span class="comment">//返回指向第一个大于x的元素的位置的迭代器(指针)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda</title>
      <link href="/2023/05/01/Anaconda/"/>
      <url>/2023/05/01/Anaconda/</url>
      
        <content type="html"><![CDATA[<h1 id="AI常用工具"><a href="#AI常用工具" class="headerlink" title="AI常用工具"></a>AI常用工具</h1><p>基础工具安装：CUDA👉Anaconda👉Jupyter👉Matplotlib👉NumpyPyTorch</p><p>快速入门：<a href="https://www.bilibili.com/video/BV1oF411s7RS/?spm_id_from=333.788.top_right_bar_window_history.content.click&amp;vd_source=15aaf2f3032abe28c98a76535d8c050b">【CUDA + Anaconda 】深度学习环境配置，3分钟搞定简单粗暴<em>哔哩哔哩</em></a></p><p>安装失败解决办法：</p><ol><li>删除.condarc文件</li></ol><h2 id="一、命令行"><a href="#一、命令行" class="headerlink" title="一、命令行"></a>一、命令行</h2><ol><li>常用conda命令</li></ol>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">conda --version <span class="comment">#查看conda版本，验证是否安装</span></span><br><span class="line">conda update conda <span class="comment">#更新至最新版本，也会更新其它相关包</span></span><br><span class="line">conda update --all <span class="comment">#更新所有包</span></span><br><span class="line">conda update package_name <span class="comment">#更新指定的包</span></span><br><span class="line">conda create -n env_name package_name <span class="comment">#创建名为env_name的新环境，并在该环境下安装名为package_name 的包，可以指定新环境的版本号，例如：conda create -n python2 python=python2.7 numpy pandas，创建了python2环境，python版本为2.7，同时还安装了numpy pandas包</span></span><br><span class="line"><span class="built_in">source</span> activate env_name <span class="comment">#切换至env_name环境</span></span><br><span class="line"><span class="built_in">source</span> deactivate <span class="comment">#退出环境</span></span><br><span class="line">conda info -e <span class="comment">#显示所有已经创建的环境</span></span><br><span class="line">conda create --name new_env_name --<span class="built_in">clone</span> old_env_name <span class="comment">#复制old_env_name为new_env_name</span></span><br><span class="line">conda remove --name env_name –all <span class="comment">#删除环境</span></span><br><span class="line">conda list <span class="comment">#查看所有已经安装的包</span></span><br><span class="line">conda install package_name <span class="comment">#在当前环境中安装包</span></span><br><span class="line">conda install --name env_name package_name <span class="comment">#在指定环境中安装包</span></span><br><span class="line">conda remove -- name env_name package <span class="comment">#删除指定环境中的包</span></span><br><span class="line">conda remove package <span class="comment">#删除当前环境中的包</span></span><br><span class="line">conda <span class="built_in">env</span> remove -n env_name <span class="comment">#采用第10条的方法删除环境失败时，可采用这种方法</span></span><br></pre></td></tr></table></figure><ol><li>打开jupyter<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate name(虚拟环境名称)</span><br><span class="line">jupyter notebook  ```bash</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OI工具</title>
      <link href="/2023/04/27/OI%E5%B7%A5%E5%85%B7/"/>
      <url>/2023/04/27/OI%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="OI工具"><a href="#OI工具" class="headerlink" title="OI工具"></a>OI工具</h1><h2 id="一、CP-Editor-编译器"><a href="#一、CP-Editor-编译器" class="headerlink" title="一、CP Editor 编译器"></a>一、CP Editor 编译器</h2><p>（<del>Copy and Paste Editorial</del>）</p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="(1) 安装"></a>(1) 安装</h3><ol><li><p>文字教程：<a href="https://oi-wiki.org/tools/editor/cpeditor/">CP Editor - OI Wiki (oi-wiki.org)</a></p></li><li><p>视频教程：<a href="https://www.bilibili.com/video/BV1mX4y1V7S8/?vd_source=15aaf2f3032abe28c98a76535d8c050b">简单的 CP Editor 使用教程！_哔哩哔哩_bilibili</a></p></li></ol><h3 id="2-日常调教-（Ctrl-P打开设置）"><a href="#2-日常调教-（Ctrl-P打开设置）" class="headerlink" title="(2) 日常调教  （Ctrl+P打开设置）"></a>(2) 日常调教  （Ctrl+P打开设置）</h3><ul><li><h4 id="设置模板"><a href="#设置模板" class="headerlink" title="设置模板"></a>设置模板</h4><ol><li><p>管理员身份的cmd进入cf_v1.0.0_windows_64文件路径。</p></li><li><p>命令<code>cf config</code>跳出选项。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Configure the tool</span><br><span class="line">0) login</span><br><span class="line">1) add a template</span><br><span class="line">2) delete a template</span><br><span class="line">3) set default template</span><br><span class="line">4) run &quot;cf gen&quot; after &quot;cf parse&quot;</span><br><span class="line">5) set host domain</span><br><span class="line">6) set proxy</span><br><span class="line">7) set folders&#x27; name</span><br><span class="line">Please choose one (index):</span><br></pre></td></tr></table></figure></li><li><p>选<code>0</code>登录后，再调出上述界面。</p></li><li><p>选<code>1</code>添加模板，再选<code>language</code>里的<code>50</code>(G++14)。在<code>Template absolute path(e.g. &quot;~/template/io.cpp&quot;):</code>之后输入模板文件路径。<code>suffix</code>不需要填，直接回车。</p></li><li><p><code>alias</code>输入<code>cpp</code>。</p></li><li><p><code>`Before script</code>也不需要填，直接回车。</p></li><li><p><code>Script</code>下直接复制<code>./$%file%$.exe</code>输入就行。</p></li><li><p><code>After Script</code>直接回车。</p></li><li><p><code>Make it default (y/n)?</code> 输入<code>y</code>。<strong>这样上传模板就成功了。</strong></p></li><li><p>用<code>cf config</code>调出选项，用3，2来设置默认模板和删除模板。</p></li></ol></li></ul><ul><li><h4 id="CF-Tool爬取OJ"><a href="#CF-Tool爬取OJ" class="headerlink" title="CF Tool爬取OJ"></a>CF Tool爬取OJ</h4><p><em>(需事先安装Competitive Companion 拓展(CF tool)</em></p><ol><li>直接爬取：在左键浏览器CF Tool插件$\rightarrow$Parse with$\rightarrow$Problem parser$\rightarrow$选择相应OJ内核。</li><li>开启默认：在左键浏览器CF Tool插件$\rightarrow$管理拓展$\rightarrow$扩展选项$\rightarrow$Custom rules$\rightarrow$设置OJ网址和OJ类型。</li></ol></li></ul><h2 id="二、相关网站"><a href="#二、相关网站" class="headerlink" title="二、相关网站"></a>二、相关网站</h2><ul><li><a href="https://comphub.notion.site/comphub/c5f45f67535e452ba475497c46830534?v=fcfac8df9b9d4fe2883226a3580c2f1a">OJ日历</a>：比赛日历</li><li><a href="https://oi-wiki.org/">OI Wiki</a>：知识点百科</li><li><a href="https://cftracker.netlify.app/contests">CF Tracker</a>：CodeForces赛事题目统计</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/24/Hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2023/04/24/Hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo常见问题"><a href="#Hexo常见问题" class="headerlink" title="Hexo常见问题"></a>Hexo常见问题</h1><h3 id="一、-Spawn-failed"><a href="#一、-Spawn-failed" class="headerlink" title="一、 Spawn failed"></a>一、 Spawn failed</h3><figure class="highlight plaintext"><figcaption><span>cl; hexo g; hexo d```后出现下面FATAL：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```bash</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (F:\Blog\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (events.js:400:28)</span><br><span class="line">      at ChildProcess.cp.emit (F:\Blog\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:282:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure><p>解决方法：<strong>大部分原因是网络不好，多上传几次，或找个网络稳定的地方上传。</strong></p><blockquote><p> Details:</p><p>从输出信息来看，您在尝试使用Hexo 进行部署时遇到了some问题。具体而言：</p><p>1．Hexo 在尝试将 public 文件夹中的文件复制到远程GitHub仓库时失败了。这可能是因为：</p><p>—您的GitHub 账户访问令牌已过期，Hexo无法连接到GitHub。解决方案是重新生成一个GitHub访问令牌，并在Hexo配置文件中更新。—您的GitHub仓库不存在或Hexo无法访问。确保您已经创建了仓库，并为Hexo授予了正确的访问权限。</p><p>—网络连接问题导致连接超时。这可能是暂时的，请重试部署。</p><p>2．Hexo在尝试读取远程仓库中的数据时失败了，显示 fatal：Could not read from remote repository。这说明 Hexo 无法从GitHub仓库中获取数据，原因同上。 3．最终Hexo 抛出 FATAL错误，并给出了troubleshooting 文档链接以供参考。</p><p>解决此问题的步骤为：</p><p>1．确认您的GitHub 访问令牌、仓库设置及网络连接没有问题。</p><p>2．清除Hexo的部署缓存，重新初始化部署配置。具体命令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line">hexo clean </span><br><span class="line">hexo deploy --setup </span><br></pre></td></tr></table></figure><p>3．重新运行<code>hexo deploy</code>命令进行部署。 </p><p>4．如果仍失败，可以尝试输入</p><p><code>hexo deploy --debug</code></p><p>命令进行调试，查看更为详细的错误输出信息。</p><p>5．最后，您也可以在Hexo的troubleshooting文档中寻找更多解决方案。</p><p>希望以上信息能帮助您解决部署问题。如果有任何其他问题，欢迎在Hexo论坛或GitHub提出。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>科研工具</title>
      <link href="/2023/04/15/%E7%A7%91%E7%A0%94%E5%B7%A5%E5%85%B7/"/>
      <url>/2023/04/15/%E7%A7%91%E7%A0%94%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="科研工具"><a href="#科研工具" class="headerlink" title="科研工具"></a>科研工具</h1><h2 id="一、tyora"><a href="#一、tyora" class="headerlink" title="一、tyora"></a>一、tyora</h2><p>破解版安装：<a href="https://www.bilibili.com/video/BV1zX4y1X73T/?spm_id_from=333.337.search-card.all.click">Typora免费安装使用，直接安装无废话(最新版本也可使用）_哔哩哔哩_bilibili</a></p><p>使用教程：<a href="https://www.bilibili.com/video/BV1hG411p7fX/?spm_id_from=333.999.0.0&amp;vd_source=15aaf2f3032abe28c98a76535d8c050b">[Markdown + Typora/VSCode 超全教程] 给大一新生安利的文本神器 !_哔哩哔哩_bilibili</a></p><h2 id="二、LaTex公式"><a href="#二、LaTex公式" class="headerlink" title="二、LaTex公式"></a>二、LaTex公式</h2><p>公式表：<a href="https://blog.csdn.net/LCCFlccf/article/details/89643585">(42条消息) LaTeX数学符号大全_latex 数学符号_LCCFlccf的博客-CSDN博客</a></p><p>公式编辑器：<a href="https://www.latexlive.com/">在线LaTeX公式编辑器-编辑器 (latexlive.com)</a></p><p>图片提取：</p><h3 id="三、Markdown"><a href="#三、Markdown" class="headerlink" title="三、Markdown"></a>三、Markdown</h3><p>语法：<a href="https://markdown.com.cn/intro.html">Markdown 入门基础 | Markdown 官方教程</a></p><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/#picgo-is-here">图床Picgo使用手册</a></p><h3 id="四、卡西欧fx991"><a href="#四、卡西欧fx991" class="headerlink" title="四、卡西欧fx991"></a>四、卡西欧fx991</h3><p><a href="https://www.bilibili.com/video/BV1gY411L71c/?spm_id_from=333.999.0.0&amp;vd_source=15aaf2f3032abe28c98a76535d8c050b">【B站最全】卡西欧fx991计算器使用教程升级版_哔哩哔哩_bilibili</a></p><h3 id="五、MatLab安装"><a href="#五、MatLab安装" class="headerlink" title="五、MatLab安装"></a>五、MatLab安装</h3><p><a href="https://blog.csdn.net/qq_44955314/article/details/120004211">(42条消息) 最新MATLAB R2020b超详细安装教程（附完整安装文件）_matlab2020b安装教程_dew_142857的博客-CSDN博客</a></p><h3 id="六、codeforces使用教程"><a href="#六、codeforces使用教程" class="headerlink" title="六、codeforces使用教程"></a>六、codeforces使用教程</h3><p><a href="https://blog.csdn.net/bwabdbkjdbkjwabd/article/details/119620156">CodeForce使用说明超详细！！！！！</a></p><p><a href="https://zhuanlan.zhihu.com/p/71674596">【洛谷日报#116】Codeforces快速精通</a></p><h3 id="七、lingo安装"><a href="#七、lingo安装" class="headerlink" title="七、lingo安装"></a>七、lingo安装</h3><p><a href="https://blog.csdn.net/GODSuner/article/details/107435105">Lingo 18.0及其安装教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 基础学科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包</title>
      <link href="/2023/04/05/%E8%83%8C%E5%8C%85/"/>
      <url>/2023/04/05/%E8%83%8C%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h1><h2 id="一、01背包"><a href="#一、01背包" class="headerlink" title="一、01背包"></a>一、01背包</h2><p>对前i个物品，都有选或不选的01状态。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=m; j&gt;=w[i]; j--)</span><br><span class="line">    dp[j]=<span class="built_in">max</span>(dp[j], dp[ j-w[i] ]+v[i]);</span><br></pre></td></tr></table></figure><h2 id="二、完全背包问题"><a href="#二、完全背包问题" class="headerlink" title="二、完全背包问题"></a>二、完全背包问题</h2><p>每种物品可无限取用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> j=w[i]; j&lt;=m; j++)</span><br><span class="line">    dp[j]=<span class="built_in">max</span>( dp[j], dp[ j-w[i] ]+v[i]);</span><br></pre></td></tr></table></figure><h2 id="三、多重背包问题"><a href="#三、多重背包问题" class="headerlink" title="三、多重背包问题"></a>三、多重背包问题</h2><p>每种物品有限取。</p><h3 id="一-二进制优化"><a href="#一-二进制优化" class="headerlink" title="(一)二进制优化"></a>(一)二进制优化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> k=<span class="number">1</span>, a,b,s; cin&gt;&gt;a&gt;&gt;b&gt;&gt;s;</span><br><span class="line">  <span class="keyword">while</span>(k&lt;=s)</span><br><span class="line">  &#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    v[cnt]=k*a; w[cnt]=k*b;</span><br><span class="line">    s-=k; k*=<span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(s&gt;<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    v[cnt]=s*a; w[cnt]=s*b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">n=cnt;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> j=m; j&gt;=v[i]; j--)</span><br><span class="line">    dp[j]=<span class="built_in">max</span>(dp[j], dp[j-v[i]]+w[i]);</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;dp[m];</span><br></pre></td></tr></table></figure><h3 id="三-单调队列优化"><a href="#三-单调队列优化" class="headerlink" title="(三)单调队列优化"></a>(三)单调队列优化</h3><h2 id="三、混合背包"><a href="#三、混合背包" class="headerlink" title="三、混合背包"></a>三、混合背包</h2><ul><li><p>第一类物品只能用1次（01背包）；</p></li><li><p>第二类物品可以用无限次（完全背包）；</p></li><li><p>第三类物品最多只能用 $S_i$次（多重背包）；</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(s&lt;<span class="number">0</span>) s=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="number">0</span>) s=m/a;</span><br><span class="line"><span class="comment">//之后多重背包模板</span></span><br></pre></td></tr></table></figure><p>将混合背包转化位多重背包问题。</p><h2 id="四、二维背包"><a href="#四、二维背包" class="headerlink" title="四、二维背包"></a>四、二维背包</h2><p>有两个限制，设置二维数组，两层遍历。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> j=V; j&gt;=v[i]; j++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=M; k&gt;=m[i]; k++)</span><br><span class="line">      dp[j][k]=<span class="built_in">max</span>(dp[j][k], dp[j-v[i]][k-m[i]]+w[i]);</span><br><span class="line">cout&lt;&lt;dp[V][M];</span><br></pre></td></tr></table></figure><h2 id="五、分组背包"><a href="#五、分组背包" class="headerlink" title="五、分组背包"></a>五、分组背包</h2><p>物品分为n组，每组只能选一个。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> j=m; j&gt;=<span class="number">1</span>; j--)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>; k&gt;=s[i]; k++)</span><br><span class="line">      <span class="keyword">if</span>(v[i][k]&lt;=j) dp[j]=<span class="built_in">max</span>(dp[j], dp[j-v[i][k]]+w[i][k]);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多元微分学</title>
      <link href="/2023/04/03/%E5%A4%9A%E5%85%83%E5%BE%AE%E5%88%86%E5%AD%A6/"/>
      <url>/2023/04/03/%E5%A4%9A%E5%85%83%E5%BE%AE%E5%88%86%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="高数-多元微分学"><a href="#高数-多元微分学" class="headerlink" title="高数|多元微分学"></a>高数|多元微分学</h1><h2 id="一、偏导数"><a href="#一、偏导数" class="headerlink" title="一、偏导数"></a>一、偏导数</h2><p>初等函数，复合函数，隐函数</p><h2 id="二、全微分"><a href="#二、全微分" class="headerlink" title="二、全微分"></a>二、全微分</h2><p>初等函数，复合函数</p><p>变型：已知全微分求参。利用”对两个函数的偏微分与顺序无关“的恒等性质列出方程。</p><h2 id="三、极值"><a href="#三、极值" class="headerlink" title="三、极值"></a>三、极值</h2><p>求出偏导数为0的解，用$B^2-AC$判断极值点的情况。</p><p>对于隐函数，需要求出符合元隐函数条件的 偏导数为0的解，即还需要联立原方程。</p><h2 id="四、最值"><a href="#四、最值" class="headerlink" title="四、最值"></a>四、最值</h2><ol><li>先求出区间，然后利用求极值的方法，解出最值。</li><li>不等式。</li></ol><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 基础学科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极限</title>
      <link href="/2023/04/03/%E6%9E%81%E9%99%90/"/>
      <url>/2023/04/03/%E6%9E%81%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h1 id="高数极限"><a href="#高数极限" class="headerlink" title="高数极限"></a>高数极限</h1><p>本博客可以作为自学材料，也可作为<a href="https://www.bilibili.com/video/BV1Gr4y1P7Rt/?spm_id_from=333.788&amp;vd_source=15aaf2f3032abe28c98a76535d8c050b">考研竞赛凯哥-极限</a>的讲义。</p><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><ol><li><p>无穷小代换：被代换部分与整体为乘除关系，即被代换部分为因子。</p><blockquote><p>例：$\lim_{x\rightarrow0}\frac{x-\sin{x}}{x^3}$中不可把$\sin{x}$替换为x。</p></blockquote></li><li><p>特殊无穷小代换：若α,β→0，且α ~ α~1~ ， β ~ β~1~ ， 则α±β ~ α~1~±β~1~（可用等比定理证明）。</p><blockquote><p>例：$x-\sin{x}$可替换为$arcsin{x}-x$。</p></blockquote></li><li><p>局部代入：非零因子才能局部代换。</p><blockquote><p>例：$\lim_{x\rightarrow0}\frac{x-\sin{x}\cos{x}}{x^3}$不能把$\cos{x}$代为1。</p></blockquote></li><li><p><a href="https://zhuanlan.zhihu.com/p/60268688">极限拆分</a>：每个函数的极限都存在。</p><blockquote><p>例: </p></blockquote></li></ol><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><ol><li><p><a href="https://baijiahao.baidu.com/s?id=1681664435625655973">六小函数图像</a>:  $xe^x, x\ln{x}, \frac{x}{e^x}, \frac{\ln{x}}{x}, \frac{e^x}{x}, \frac{x}{\ln{x}}$</p></li><li><p><a href="https://zhuanlan.zhihu.com/p/25048945">两个重要极限</a>：</p><p>$\lim_{x\rightarrow0} $ $\frac{sinx}{x}$ = 1</p><p>$\lim<em>{x\rightarrow0}$ $(1+x)^\frac{1}{x}$ = $\lim</em>{x\rightarrow+\infty}$ $(1+\frac{1}{x})^x$ = e</p></li><li><p>无穷小代换 (when $x\rightarrow0$)：</p><p>$x\sim\sin{x}\sim\arcsin{x}\sim\tan{x}\sim\arctan{x}\sim\ln{(x+1)\sim e^x-1}$</p><p>$\lim_{x\rightarrow1}(x-1)\sim\ln{x}$🖊</p><p>$x-sin{x}\sim\frac{1}{6}x^3\sim\arcsin{x}-x$</p><p>$\tan{x}-x\sim\frac{1}{3}x^3\sim x-\arctan{x}$</p><p>$\tan{x}-\sin{x}\sim\frac{1}{2}x^3\sim\arcsin{x}-\arctan{x}$</p><p>$x-\ln(1+x)\sim\frac{1}{2}x^2\sim1-\cos{x}$</p><p>$a^x-1\sim x\ln{a}$</p><p>$(1+ax)^b\sim abx$</p><script type="math/tex; mode=display">\sqrt{1+x}-\sqrt{1-x}\sim x</script></li><li><p>等价无穷大代换：</p><p>$\alpha\sim\beta\rightarrow+0, 则\ln{\alpha}\sim\ln{\beta}\rightarrow-\infty$</p><blockquote><p>证明： $\frac{\ln{a}}{\ln{b}}=\frac{\ln{a}-\ln{b}}{\ln{b}}+1=\frac{\ln{\frac{a}{b}}}{\ln{b}}+1=1$</p></blockquote><ol><li>$\lim<em>{x\rightarrow+0}{\frac{\ln{\arctan{x}}}{\ln{(\ln(1+x))}}}=\lim</em>{x\rightarrow+0}{\frac{\ln{x}}{\ln{x}}}=1$</li><li>$\lim<em>{x\rightarrow+0}{(e^x-1-x)}^{\frac{1}{x}}=e^{\lim</em>{x\rightarrow+0}{\frac{\ln(e^x-1-x)}{\ln{x}}}}=e^{\lim<em>{x\rightarrow+0}{\frac{\ln{\frac{x^2}{2}}}{\ln{x}}}}=e^{\lim</em>{x\rightarrow+0}{\frac{2\ln{x}-\ln{2}}{\ln{x}}}}=e^2$</li><li>$\lim<em>{x\rightarrow{+}\infty}{(x^{\frac{1}{x}}-1)}^{\frac{1}{\ln{x}}}=e^{\lim</em>{x\rightarrow{+}\infty}\frac{1}{\ln{x}}\ln{x^{\frac{1}{x}}-1}}e^{\lim_{x\rightarrow{+}\infty}\frac{1}{\ln{x}}(\ln{\ln{x}}-\ln{x})}=e^{-1}$</li></ol></li><li><p><a href="[【数学135】4分钟通透泰勒展开式！看完不会算我输！_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV128411L7Nx/?spm_id_from=333.788.top_right_bar_window_custom_collection.content.click&amp;vd_source=15aaf2f3032abe28c98a76535d8c050b">泰勒展开（速记）</a>)</p></li></ol><h2 id="题型总结"><a href="#题型总结" class="headerlink" title="题型总结"></a>题型总结</h2><h3 id="型一：构造等价无穷小"><a href="#型一：构造等价无穷小" class="headerlink" title="型一：构造等价无穷小"></a>型一：构造等价无穷小</h3><ol><li>求$\lim_{x\rightarrow0}\frac{\sqrt[m]{1+ax}\sqrt[m]{1+bx}-1}{x}$</li></ol><blockquote><p>法一：想到$\lim_{x\rightarrow0}\sqrt[m]{1+ax}-1\sim\frac{a}{m}x$,则应围绕该项配凑。</p></blockquote><p>​    $=\lim_{x\rightarrow0}\frac{\sqrt[m]{1+ax}-1}{x}\sqrt[n]{1+bx}+\frac{\sqrt[n]{1+bx}-1}{x}$</p><p>​    $=\lim_{x\rightarrow0}\frac{ax}{mx}\bullet1+\frac{bx}{nx}$</p><p>​    $=\frac{a}{m}+\frac{b}{n}$</p><blockquote><p>我们可以总结出$AB-1=(A-1)B+(B-1)$的恒等式。</p><p>法二：发现分子的结构，套用🖊公式    </p></blockquote><p>​    $=\lim_{x\rightarrow0}\frac{\ln{\sqrt[m]{1+ax}\sqrt[n]{1+bx}}}{x}$</p><p>​    $=\lim<em>{x\rightarrow0}\frac{\ln{\sqrt[m]{1+ax}}}{x}+\lim</em>{x\rightarrow0}\frac{\ln{\sqrt[n]{1+bx}}}{x}$</p><p>​    $=\lim<em>{x\rightarrow0}\frac{\sqrt[m]{1+ax}-1}{x}+\lim</em>{x\rightarrow0}\frac{\sqrt[n]{1+bx}-1}{x}$</p><hr><p>​    2.求$\lim_{x\rightarrow0}\frac{1-\cos{x}\cos{2x}\cos{3x}\cdots\cos{nx}}{x^2}$</p><blockquote><p>法一：构造</p></blockquote><p>​    $=\lim<em>{x\rightarrow0}\frac{1-\cos{x}}{x^2}+lim</em>{x\rightarrow0}\cos{x}\frac{1-\cos{2x}\cos{3x}\cdots\cos{nx}}{x^2}$</p><p>​    $=\frac{1}{2}+\frac{1}{2}\times2^2+\frac{1}{2}\times{3^2}+\cdots$</p><p>​    $=\frac{1}{2}\times\frac{1}{6}n(n+1)(2n+1)$ (平方和公式)</p><blockquote><p>法二：🖊</p></blockquote><p>​    $=-\lim_{x\rightarrow0}\frac{\ln{\cos{x}\cos{2x}\cdots\cos{nx}}}{x^2}$</p><p>​    $=\lim_{x\rightarrow0}\sum_1^n\frac{1-\cos{ix}}{x^2}$</p><p>​    $=\lim_{x\rightarrow0}\sum_1^n\frac{(ix)^2}{2x^2}$</p><h3 id="型二：幂指函数-lim-u-x-v-x-取指对数-e-lim-u-x-ln-v-x"><a href="#型二：幂指函数-lim-u-x-v-x-取指对数-e-lim-u-x-ln-v-x" class="headerlink" title="型二：幂指函数($\lim{u(x)}^{v(x)}$)取指对数($e^{\lim{u(x)}\ln{v(x)}}$)"></a>型二：幂指函数($\lim{u(x)}^{v(x)}$)取指对数($e^{\lim{u(x)}\ln{v(x)}}$)</h3><ol><li><p>$\lim_{x\rightarrow0}\frac{\sin{x}}{x}^{\frac{1}{1-\cos{x}}}$</p><blockquote></blockquote></li><li><p>$\lim_{x\rightarrow0}\frac{1}{x3}[({\frac{2+\cos{x}}{3}})^x-1]$</p></li><li><p>$\lim_{x\rightarrow0}(\frac{e^x+e^{2x}+e^{3x}+\dots+e^{nx}}{n})^{\frac{e}{x}}$</p></li><li><p>$\lim_{x\rightarrow{+}\infty}[{\frac{(1+\frac{1}{x})^x}{e}]}^x$</p></li><li><p>$\lim_{x\rightarrow0}\frac{(3+2\tan{x})^x-3^x}{3\sin^2{x}+x^3\cos{\frac{1}{x}}}$</p><blockquote></blockquote></li><li><p>$f(x),g(x)$在x=0的领域U内有定义，且对$\forall x\in U$,均有$f(x)\not=g(x),且\lim<em>{x\rightarrow0}{f(x)=\lim</em>{x\rightarrow0}{g(x)}}=a&gt;0,求\lim_{x\rightarrow0}\frac{[f(x)]^{g(x)}-[g(x)]^{f(x)}}{f(x)-g(x)}$</p></li></ol><h3 id="型三：精度不够用泰勒"><a href="#型三：精度不够用泰勒" class="headerlink" title="型三：精度不够用泰勒"></a>型三：精度不够用泰勒</h3><ol><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 基础学科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础学科 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo自带命令</title>
      <link href="/2023/03/18/hello-world/"/>
      <url>/2023/03/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2023/01/13/2023-01-13-%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/01/13/2023-01-13-%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="满纸荒唐言，一把辛酸泪。都云作者痴，谁解其中味？"><a href="#满纸荒唐言，一把辛酸泪。都云作者痴，谁解其中味？" class="headerlink" title="满纸荒唐言，一把辛酸泪。都云作者痴，谁解其中味？"></a>满纸荒唐言，一把辛酸泪。都云作者痴，谁解其中味？</h2>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
